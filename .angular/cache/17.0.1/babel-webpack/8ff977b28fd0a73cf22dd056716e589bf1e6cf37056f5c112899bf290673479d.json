{"ast":null,"code":"import { HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { FUSE_MOCK_API_DEFAULT_DELAY } from '@fuse/lib/mock-api/mock-api.constants';\nimport { FuseMockApiService } from '@fuse/lib/mock-api/mock-api.service';\nimport { delay, of, switchMap, throwError } from 'rxjs';\nexport const mockApiInterceptor = (request, next) => {\n  const defaultDelay = inject(FUSE_MOCK_API_DEFAULT_DELAY);\n  const fuseMockApiService = inject(FuseMockApiService);\n  // Try to get the request handler\n  const {\n    handler,\n    urlParams\n  } = fuseMockApiService.findHandler(request.method.toUpperCase(), request.url);\n  // Pass through if the request handler does not exist\n  if (!handler) {\n    return next(request);\n  }\n  // Set the intercepted request on the handler\n  handler.request = request;\n  // Set the url params on the handler\n  handler.urlParams = urlParams;\n  // Subscribe to the response function observable\n  return handler.response.pipe(delay(handler.delay ?? defaultDelay ?? 0), switchMap(response => {\n    // If there is no response data,\n    // throw an error response\n    if (!response) {\n      response = new HttpErrorResponse({\n        error: 'NOT FOUND',\n        status: 404,\n        statusText: 'NOT FOUND'\n      });\n      return throwError(response);\n    }\n    // Parse the response data\n    const data = {\n      status: response[0],\n      body: response[1]\n    };\n    // If the status code is in between 200 and 300,\n    // return a success response\n    if (data.status >= 200 && data.status < 300) {\n      response = new HttpResponse({\n        body: data.body,\n        status: data.status,\n        statusText: 'OK'\n      });\n      return of(response);\n    }\n    // For other status codes,\n    // throw an error response\n    response = new HttpErrorResponse({\n      error: data.body.error,\n      status: data.status,\n      statusText: 'ERROR'\n    });\n    return throwError(response);\n  }));\n};","map":{"version":3,"names":["HttpErrorResponse","HttpResponse","inject","FUSE_MOCK_API_DEFAULT_DELAY","FuseMockApiService","delay","of","switchMap","throwError","mockApiInterceptor","request","next","defaultDelay","fuseMockApiService","handler","urlParams","findHandler","method","toUpperCase","url","response","pipe","error","status","statusText","data","body"],"sources":["/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/src/@fuse/lib/mock-api/mock-api.interceptor.ts"],"sourcesContent":["import { HttpErrorResponse, HttpEvent, HttpHandlerFn, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { FUSE_MOCK_API_DEFAULT_DELAY } from '@fuse/lib/mock-api/mock-api.constants';\nimport { FuseMockApiService } from '@fuse/lib/mock-api/mock-api.service';\nimport { delay, Observable, of, switchMap, throwError } from 'rxjs';\n\nexport const mockApiInterceptor = (request: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> =>\n{\n    const defaultDelay = inject(FUSE_MOCK_API_DEFAULT_DELAY);\n    const fuseMockApiService = inject(FuseMockApiService);\n\n    // Try to get the request handler\n    const {\n        handler,\n        urlParams,\n    } = fuseMockApiService.findHandler(request.method.toUpperCase(), request.url);\n\n    // Pass through if the request handler does not exist\n    if ( !handler )\n    {\n        return next(request);\n    }\n\n    // Set the intercepted request on the handler\n    handler.request = request;\n\n    // Set the url params on the handler\n    handler.urlParams = urlParams;\n\n    // Subscribe to the response function observable\n    return handler.response.pipe(\n        delay(handler.delay ?? defaultDelay ?? 0),\n        switchMap((response) =>\n        {\n            // If there is no response data,\n            // throw an error response\n            if ( !response )\n            {\n                response = new HttpErrorResponse({\n                    error     : 'NOT FOUND',\n                    status    : 404,\n                    statusText: 'NOT FOUND',\n                });\n\n                return throwError(response);\n            }\n\n            // Parse the response data\n            const data = {\n                status: response[0],\n                body  : response[1],\n            };\n\n            // If the status code is in between 200 and 300,\n            // return a success response\n            if ( data.status >= 200 && data.status < 300 )\n            {\n                response = new HttpResponse({\n                    body      : data.body,\n                    status    : data.status,\n                    statusText: 'OK',\n                });\n\n                return of(response);\n            }\n\n            // For other status codes,\n            // throw an error response\n            response = new HttpErrorResponse({\n                error     : data.body.error,\n                status    : data.status,\n                statusText: 'ERROR',\n            });\n\n            return throwError(response);\n        }));\n};\n"],"mappings":"AAAA,SAASA,iBAAiB,EAAyCC,YAAY,QAAQ,sBAAsB;AAC7G,SAASC,MAAM,QAAQ,eAAe;AACtC,SAASC,2BAA2B,QAAQ,uCAAuC;AACnF,SAASC,kBAAkB,QAAQ,qCAAqC;AACxE,SAASC,KAAK,EAAcC,EAAE,EAAEC,SAAS,EAAEC,UAAU,QAAQ,MAAM;AAEnE,OAAO,MAAMC,kBAAkB,GAAGA,CAACC,OAA6B,EAAEC,IAAmB,KAAoC;EAErH,MAAMC,YAAY,GAAGV,MAAM,CAACC,2BAA2B,CAAC;EACxD,MAAMU,kBAAkB,GAAGX,MAAM,CAACE,kBAAkB,CAAC;EAErD;EACA,MAAM;IACFU,OAAO;IACPC;EAAS,CACZ,GAAGF,kBAAkB,CAACG,WAAW,CAACN,OAAO,CAACO,MAAM,CAACC,WAAW,EAAE,EAAER,OAAO,CAACS,GAAG,CAAC;EAE7E;EACA,IAAK,CAACL,OAAO,EACb;IACI,OAAOH,IAAI,CAACD,OAAO,CAAC;;EAGxB;EACAI,OAAO,CAACJ,OAAO,GAAGA,OAAO;EAEzB;EACAI,OAAO,CAACC,SAAS,GAAGA,SAAS;EAE7B;EACA,OAAOD,OAAO,CAACM,QAAQ,CAACC,IAAI,CACxBhB,KAAK,CAACS,OAAO,CAACT,KAAK,IAAIO,YAAY,IAAI,CAAC,CAAC,EACzCL,SAAS,CAAEa,QAAQ,IAAI;IAEnB;IACA;IACA,IAAK,CAACA,QAAQ,EACd;MACIA,QAAQ,GAAG,IAAIpB,iBAAiB,CAAC;QAC7BsB,KAAK,EAAO,WAAW;QACvBC,MAAM,EAAM,GAAG;QACfC,UAAU,EAAE;OACf,CAAC;MAEF,OAAOhB,UAAU,CAACY,QAAQ,CAAC;;IAG/B;IACA,MAAMK,IAAI,GAAG;MACTF,MAAM,EAAEH,QAAQ,CAAC,CAAC,CAAC;MACnBM,IAAI,EAAIN,QAAQ,CAAC,CAAC;KACrB;IAED;IACA;IACA,IAAKK,IAAI,CAACF,MAAM,IAAI,GAAG,IAAIE,IAAI,CAACF,MAAM,GAAG,GAAG,EAC5C;MACIH,QAAQ,GAAG,IAAInB,YAAY,CAAC;QACxByB,IAAI,EAAQD,IAAI,CAACC,IAAI;QACrBH,MAAM,EAAME,IAAI,CAACF,MAAM;QACvBC,UAAU,EAAE;OACf,CAAC;MAEF,OAAOlB,EAAE,CAACc,QAAQ,CAAC;;IAGvB;IACA;IACAA,QAAQ,GAAG,IAAIpB,iBAAiB,CAAC;MAC7BsB,KAAK,EAAOG,IAAI,CAACC,IAAI,CAACJ,KAAK;MAC3BC,MAAM,EAAME,IAAI,CAACF,MAAM;MACvBC,UAAU,EAAE;KACf,CAAC;IAEF,OAAOhB,UAAU,CAACY,QAAQ,CAAC;EAC/B,CAAC,CAAC,CAAC;AACX,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}