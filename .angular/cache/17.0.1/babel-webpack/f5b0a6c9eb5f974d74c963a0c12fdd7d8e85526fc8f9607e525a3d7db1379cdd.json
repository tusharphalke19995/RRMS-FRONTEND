{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { AuthService } from 'app/core/auth/auth.service';\nimport { AuthUtils } from 'app/core/auth/auth.utils';\nimport { catchError, throwError } from 'rxjs';\n/**\n * Intercept\n *\n * @param req\n * @param next\n */\nexport const authInterceptor = (req, next) => {\n  const authService = inject(AuthService);\n  // Clone the request object\n  let newReq = req.clone();\n  // Request\n  //\n  // If the access token didn't expire, add the Authorization header.\n  // We won't add the Authorization header if the access token expired.\n  // This will force the server to return a \"401 Unauthorized\" response\n  // for the protected API routes which our response interceptor will\n  // catch and delete the access token from the local storage while logging\n  // the user out from the app.\n  if (authService.accessToken && !AuthUtils.isTokenExpired(authService.accessToken)) {\n    newReq = req.clone({\n      headers: req.headers.set('Authorization', 'Bearer ' + authService.accessToken)\n    });\n  }\n  // Response\n  return next(newReq).pipe(catchError(error => {\n    // Catch \"401 Unauthorized\" responses\n    if (error instanceof HttpErrorResponse && error.status === 401) {\n      // Sign out\n      authService.signOut();\n      // Reload the app\n      location.reload();\n    }\n    return throwError(error);\n  }));\n};","map":{"version":3,"names":["HttpErrorResponse","inject","AuthService","AuthUtils","catchError","throwError","authInterceptor","req","next","authService","newReq","clone","accessToken","isTokenExpired","headers","set","pipe","error","status","signOut","location","reload"],"sources":["/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/src/app/core/auth/auth.interceptor.ts"],"sourcesContent":["import { HttpErrorResponse, HttpEvent, HttpHandlerFn, HttpRequest } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { AuthService } from 'app/core/auth/auth.service';\nimport { AuthUtils } from 'app/core/auth/auth.utils';\nimport { catchError, Observable, throwError } from 'rxjs';\n\n/**\n * Intercept\n *\n * @param req\n * @param next\n */\nexport const authInterceptor = (req: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> =>\n{\n    const authService = inject(AuthService);\n\n    // Clone the request object\n    let newReq = req.clone();\n\n    // Request\n    //\n    // If the access token didn't expire, add the Authorization header.\n    // We won't add the Authorization header if the access token expired.\n    // This will force the server to return a \"401 Unauthorized\" response\n    // for the protected API routes which our response interceptor will\n    // catch and delete the access token from the local storage while logging\n    // the user out from the app.\n    if ( authService.accessToken && !AuthUtils.isTokenExpired(authService.accessToken) )\n    {\n        newReq = req.clone({\n            headers: req.headers.set('Authorization', 'Bearer ' + authService.accessToken),\n        });\n    }\n\n    // Response\n    return next(newReq).pipe(\n        catchError((error) =>\n        {\n            // Catch \"401 Unauthorized\" responses\n            if ( error instanceof HttpErrorResponse && error.status === 401 )\n            {\n                // Sign out\n                authService.signOut();\n\n                // Reload the app\n                location.reload();\n            }\n\n            return throwError(error);\n        }),\n    );\n};\n"],"mappings":"AAAA,SAASA,iBAAiB,QAA+C,sBAAsB;AAC/F,SAASC,MAAM,QAAQ,eAAe;AACtC,SAASC,WAAW,QAAQ,4BAA4B;AACxD,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAASC,UAAU,EAAcC,UAAU,QAAQ,MAAM;AAEzD;;;;;;AAMA,OAAO,MAAMC,eAAe,GAAGA,CAACC,GAAyB,EAAEC,IAAmB,KAAoC;EAE9G,MAAMC,WAAW,GAAGR,MAAM,CAACC,WAAW,CAAC;EAEvC;EACA,IAAIQ,MAAM,GAAGH,GAAG,CAACI,KAAK,EAAE;EAExB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAKF,WAAW,CAACG,WAAW,IAAI,CAACT,SAAS,CAACU,cAAc,CAACJ,WAAW,CAACG,WAAW,CAAC,EAClF;IACIF,MAAM,GAAGH,GAAG,CAACI,KAAK,CAAC;MACfG,OAAO,EAAEP,GAAG,CAACO,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,SAAS,GAAGN,WAAW,CAACG,WAAW;KAChF,CAAC;;EAGN;EACA,OAAOJ,IAAI,CAACE,MAAM,CAAC,CAACM,IAAI,CACpBZ,UAAU,CAAEa,KAAK,IAAI;IAEjB;IACA,IAAKA,KAAK,YAAYjB,iBAAiB,IAAIiB,KAAK,CAACC,MAAM,KAAK,GAAG,EAC/D;MACI;MACAT,WAAW,CAACU,OAAO,EAAE;MAErB;MACAC,QAAQ,CAACC,MAAM,EAAE;;IAGrB,OAAOhB,UAAU,CAACY,KAAK,CAAC;EAC5B,CAAC,CAAC,CACL;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}