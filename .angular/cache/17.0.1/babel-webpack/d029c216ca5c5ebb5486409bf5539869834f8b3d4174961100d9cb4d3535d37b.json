{"ast":null,"code":"import * as i1 from '@angular/cdk/a11y';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, booleanAttribute, Directive, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i2 from '@angular/material/core';\nimport { MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nconst _c0 = [\"button\"];\nconst _c1 = [\"*\"];\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\n * could cause unnecessary retention of the class and its component metadata.\n */\nconst MAT_BUTTON_TOGGLE_GROUP = new InjectionToken('MatButtonToggleGroup');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n// Counter used to generate unique IDs.\nlet uniqueIdCounter = 0;\n/** Change event object emitted by button toggle. */\nclass MatButtonToggleChange {\n  constructor( /** The button toggle that emits the event. */\n  source, /** The value assigned to the button toggle. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nclass MatButtonToggleGroup {\n  /** `name` attribute for the underlying `input` element. */\n  get name() {\n    return this._name;\n  }\n  set name(value) {\n    this._name = value;\n    this._markButtonsForCheck();\n  }\n  /** Value of the toggle group. */\n  get value() {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n    return this.multiple ? selected : selected[0] || null;\n  }\n  /** Whether multiple button toggles can be selected. */\n  get multiple() {\n    return this._multiple;\n  }\n  set multiple(value) {\n    this._multiple = value;\n    this._markButtonsForCheck();\n  }\n  /** Whether multiple button toggle group is disabled. */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = value;\n    this._markButtonsForCheck();\n  }\n  constructor(_changeDetector, defaultOptions) {\n    this._changeDetector = _changeDetector;\n    this._multiple = false;\n    this._disabled = false;\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n    this._controlValueAccessorChangeFn = () => {};\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    this._onTouched = () => {};\n    this._name = `mat-button-toggle-group-${uniqueIdCounter++}`;\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * @docs-private\n     */\n    this.valueChange = new EventEmitter();\n    /** Event emitted when the group's value changes. */\n    this.change = new EventEmitter();\n    this.appearance = defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n  ngOnInit() {\n    this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n  }\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(toggle) {\n    const event = new MatButtonToggleChange(toggle, this.value);\n    this._rawValue = event.value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   * @param deferEvents Whether to defer emitting the change events.\n   */\n  _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      this.selected.checked = false;\n    }\n    if (this._selectionModel) {\n      if (select) {\n        this._selectionModel.select(toggle);\n      } else {\n        this._selectionModel.deselect(toggle);\n      }\n    } else {\n      deferEvents = true;\n    }\n    // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n    // the side-effect is that we may end up updating the model value out of sequence in others\n    // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n    if (deferEvents) {\n      Promise.resolve().then(() => this._updateModelValue(toggle, isUserInput));\n    } else {\n      this._updateModelValue(toggle, isUserInput);\n    }\n  }\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle) {\n    return this._selectionModel && this._selectionModel.isSelected(toggle);\n  }\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n    return toggle.value === this._rawValue;\n  }\n  /** Updates the selection state of the toggles in the group based on a value. */\n  _setSelectionByValue(value) {\n    this._rawValue = value;\n    if (!this._buttonToggles) {\n      return;\n    }\n    if (this.multiple && value) {\n      if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n      this._clearSelection();\n      value.forEach(currentValue => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n  /** Clears the selected toggles. */\n  _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n  /** Selects a value if there's a toggle that corresponds to it. */\n  _selectValue(value) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n  /** Syncs up the group's value with the model and emits the change event. */\n  _updateModelValue(toggle, isUserInput) {\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent(toggle);\n    }\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n  /** Marks all of the child button toggles to be checked. */\n  _markButtonsForCheck() {\n    this._buttonToggles?.forEach(toggle => toggle._markForCheck());\n  }\n  static #_ = this.ɵfac = function MatButtonToggleGroup_Factory(t) {\n    return new (t || MatButtonToggleGroup)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8));\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatButtonToggleGroup,\n    selectors: [[\"mat-button-toggle-group\"]],\n    contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MatButtonToggle, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n      }\n    },\n    hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"],\n    hostVars: 5,\n    hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n        i0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical)(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n      }\n    },\n    inputs: {\n      appearance: \"appearance\",\n      name: \"name\",\n      vertical: [\"vertical\", \"vertical\", booleanAttribute],\n      value: \"value\",\n      multiple: [\"multiple\", \"multiple\", booleanAttribute],\n      disabled: [\"disabled\", \"disabled\", booleanAttribute]\n    },\n    outputs: {\n      valueChange: \"valueChange\",\n      change: \"change\"\n    },\n    exportAs: [\"matButtonToggleGroup\"],\n    features: [i0.ɵɵProvidersFeature([MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, {\n      provide: MAT_BUTTON_TOGGLE_GROUP,\n      useExisting: MatButtonToggleGroup\n    }]), i0.ɵɵInputTransformsFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatButtonToggleGroup, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-button-toggle-group',\n      providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, {\n        provide: MAT_BUTTON_TOGGLE_GROUP,\n        useExisting: MatButtonToggleGroup\n      }],\n      host: {\n        'role': 'group',\n        'class': 'mat-button-toggle-group',\n        '[attr.aria-disabled]': 'disabled',\n        '[class.mat-button-toggle-vertical]': 'vertical',\n        '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"'\n      },\n      exportAs: 'matButtonToggleGroup'\n    }]\n  }], () => [{\n    type: i0.ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n    }]\n  }], {\n    _buttonToggles: [{\n      type: ContentChildren,\n      args: [forwardRef(() => MatButtonToggle), {\n        // Note that this would technically pick up toggles\n        // from nested groups, but that's not a case that we support.\n        descendants: true\n      }]\n    }],\n    appearance: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    vertical: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    value: [{\n      type: Input\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    multiple: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    change: [{\n      type: Output\n    }]\n  });\n})();\n/** Single button inside of a toggle group. */\nclass MatButtonToggle {\n  /** Unique ID for the underlying `button` element. */\n  get buttonId() {\n    return `${this.id}-button`;\n  }\n  /** The appearance style of the button. */\n  get appearance() {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value) {\n    this._appearance = value;\n  }\n  /** Whether the button is checked. */\n  get checked() {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value) {\n    if (value !== this._checked) {\n      this._checked = value;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Whether the button is disabled. */\n  get disabled() {\n    return this._disabled || this.buttonToggleGroup && this.buttonToggleGroup.disabled;\n  }\n  set disabled(value) {\n    this._disabled = value;\n  }\n  constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    this._focusMonitor = _focusMonitor;\n    this._checked = false;\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    this.ariaLabelledby = null;\n    this._disabled = false;\n    /** Event emitted when the group value changes. */\n    this.change = new EventEmitter();\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance = defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n  ngOnInit() {\n    const group = this.buttonToggleGroup;\n    this.id = this.id || `mat-button-toggle-${uniqueIdCounter++}`;\n    if (group) {\n      if (group._isPrechecked(this)) {\n        this.checked = true;\n      } else if (group._isSelected(this) !== this._checked) {\n        // As side effect of the circular dependency between the toggle group and the button,\n        // we may end up in a state where the button is supposed to be checked on init, but it\n        // isn't, because the checked value was assigned too early. This can happen when Ivy\n        // assigns the static input value before the `ngOnInit` has run.\n        group._syncButtonToggle(this, this._checked);\n      }\n    }\n  }\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      group._syncButtonToggle(this, false, false, true);\n    }\n  }\n  /** Focuses the button. */\n  focus(options) {\n    this._buttonElement.nativeElement.focus(options);\n  }\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector() ? true : !this._checked;\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Gets the name that should be assigned to the inner DOM node. */\n  _getButtonName() {\n    if (this._isSingleSelector()) {\n      return this.buttonToggleGroup.name;\n    }\n    return this.name || null;\n  }\n  /** Whether the toggle is in single selection mode. */\n  _isSingleSelector() {\n    return this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n  }\n  static #_ = this.ɵfac = function MatButtonToggle_Factory(t) {\n    return new (t || MatButtonToggle)(i0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_GROUP, 8), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵinjectAttribute('tabindex'), i0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8));\n  };\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatButtonToggle,\n    selectors: [[\"mat-button-toggle\"]],\n    viewQuery: function MatButtonToggle_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"presentation\", 1, \"mat-button-toggle\"],\n    hostVars: 12,\n    hostBindings: function MatButtonToggle_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"focus\", function MatButtonToggle_focus_HostBindingHandler() {\n          return ctx.focus();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-label\", null)(\"aria-labelledby\", null)(\"id\", ctx.id)(\"name\", null);\n        i0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled)(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n      }\n    },\n    inputs: {\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n      id: \"id\",\n      name: \"name\",\n      value: \"value\",\n      tabIndex: \"tabIndex\",\n      disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute],\n      appearance: \"appearance\",\n      checked: [\"checked\", \"checked\", booleanAttribute],\n      disabled: [\"disabled\", \"disabled\", booleanAttribute]\n    },\n    outputs: {\n      change: \"change\"\n    },\n    exportAs: [\"matButtonToggle\"],\n    features: [i0.ɵɵInputTransformsFeature],\n    ngContentSelectors: _c1,\n    decls: 6,\n    vars: 9,\n    consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", \"mat-focus-indicator\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]],\n    template: function MatButtonToggle_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"button\", 0, 1);\n        i0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() {\n          return ctx._onButtonClick();\n        });\n        i0.ɵɵelementStart(2, \"span\", 2);\n        i0.ɵɵprojection(3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(4, \"span\", 3)(5, \"span\", 4);\n      }\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(1);\n        i0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n        i0.ɵɵattribute(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex)(\"aria-pressed\", ctx.checked)(\"name\", ctx._getButtonName())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n      }\n    },\n    dependencies: [i2.MatRipple],\n    styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;-webkit-tap-highlight-color:rgba(0,0,0,0);transform:translateZ(0);border-radius:var(--mat-legacy-button-toggle-shape)}.mat-button-toggle-standalone:not([class*=mat-elevation-z]),.mat-button-toggle-group:not([class*=mat-elevation-z]){box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:var(--mat-standard-button-toggle-shape);border:solid 1px var(--mat-standard-button-toggle-divider-color)}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard:not([class*=mat-elevation-z]),.mat-button-toggle-group-appearance-standard:not([class*=mat-elevation-z]){box-shadow:none}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative;color:var(--mat-legacy-button-toggle-text-color);font-family:var(--mat-legacy-button-toggle-text-font)}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:var(--mat-legacy-button-toggle-focus-state-layer-opacity)}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle-checked{color:var(--mat-legacy-button-toggle-selected-state-text-color);background-color:var(--mat-legacy-button-toggle-selected-state-background-color)}.mat-button-toggle-disabled{color:var(--mat-legacy-button-toggle-disabled-state-text-color);background-color:var(--mat-legacy-button-toggle-disabled-state-background-color)}.mat-button-toggle-disabled.mat-button-toggle-checked{background-color:var(--mat-legacy-button-toggle-disabled-selected-state-background-color)}.mat-button-toggle-appearance-standard{color:var(--mat-standard-button-toggle-text-color);background-color:var(--mat-standard-button-toggle-background-color);font-family:var(--mat-standard-button-toggle-text-font)}.mat-button-toggle-group-appearance-standard .mat-button-toggle-appearance-standard+.mat-button-toggle-appearance-standard{border-left:solid 1px var(--mat-standard-button-toggle-divider-color)}[dir=rtl] .mat-button-toggle-group-appearance-standard .mat-button-toggle-appearance-standard+.mat-button-toggle-appearance-standard{border-left:none;border-right:solid 1px var(--mat-standard-button-toggle-divider-color)}.mat-button-toggle-group-appearance-standard.mat-button-toggle-vertical .mat-button-toggle-appearance-standard+.mat-button-toggle-appearance-standard{border-left:none;border-right:none;border-top:solid 1px var(--mat-standard-button-toggle-divider-color)}.mat-button-toggle-appearance-standard.mat-button-toggle-checked{color:var(--mat-standard-button-toggle-selected-state-text-color);background-color:var(--mat-standard-button-toggle-selected-state-background-color)}.mat-button-toggle-appearance-standard.mat-button-toggle-disabled{color:var(--mat-standard-button-toggle-disabled-state-text-color);background-color:var(--mat-standard-button-toggle-disabled-state-background-color)}.mat-button-toggle-appearance-standard.mat-button-toggle-disabled.mat-button-toggle-checked{color:var(--mat-standard-button-toggle-disabled-selected-state-text-color);background-color:var(--mat-standard-button-toggle-disabled-selected-state-background-color)}.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{background-color:var(--mat-standard-button-toggle-state-layer-color)}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:var(--mat-standard-button-toggle-hover-state-layer-opacity)}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:var(--mat-standard-button-toggle-focus-state-layer-opacity)}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;user-select:none;display:inline-block;padding:0 16px;line-height:var(--mat-legacy-button-toggle-height);position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px;line-height:var(--mat-standard-button-toggle-height)}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;pointer-events:none;opacity:0;background-color:var(--mat-legacy-button-toggle-state-layer-color)}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 500px;opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked:hover .mat-button-toggle-focus-overlay{opacity:.6}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatButtonToggle, [{\n    type: Component,\n    args: [{\n      selector: 'mat-button-toggle',\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matButtonToggle',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n        '[class.mat-button-toggle-checked]': 'checked',\n        '[class.mat-button-toggle-disabled]': 'disabled',\n        '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n        'class': 'mat-button-toggle',\n        '[attr.aria-label]': 'null',\n        '[attr.aria-labelledby]': 'null',\n        '[attr.id]': 'id',\n        '[attr.name]': 'null',\n        '(focus)': 'focus()',\n        'role': 'presentation'\n      },\n      template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"_getButtonName()\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\",\n      styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;-webkit-tap-highlight-color:rgba(0,0,0,0);transform:translateZ(0);border-radius:var(--mat-legacy-button-toggle-shape)}.mat-button-toggle-standalone:not([class*=mat-elevation-z]),.mat-button-toggle-group:not([class*=mat-elevation-z]){box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:var(--mat-standard-button-toggle-shape);border:solid 1px var(--mat-standard-button-toggle-divider-color)}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard:not([class*=mat-elevation-z]),.mat-button-toggle-group-appearance-standard:not([class*=mat-elevation-z]){box-shadow:none}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative;color:var(--mat-legacy-button-toggle-text-color);font-family:var(--mat-legacy-button-toggle-text-font)}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:var(--mat-legacy-button-toggle-focus-state-layer-opacity)}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle-checked{color:var(--mat-legacy-button-toggle-selected-state-text-color);background-color:var(--mat-legacy-button-toggle-selected-state-background-color)}.mat-button-toggle-disabled{color:var(--mat-legacy-button-toggle-disabled-state-text-color);background-color:var(--mat-legacy-button-toggle-disabled-state-background-color)}.mat-button-toggle-disabled.mat-button-toggle-checked{background-color:var(--mat-legacy-button-toggle-disabled-selected-state-background-color)}.mat-button-toggle-appearance-standard{color:var(--mat-standard-button-toggle-text-color);background-color:var(--mat-standard-button-toggle-background-color);font-family:var(--mat-standard-button-toggle-text-font)}.mat-button-toggle-group-appearance-standard .mat-button-toggle-appearance-standard+.mat-button-toggle-appearance-standard{border-left:solid 1px var(--mat-standard-button-toggle-divider-color)}[dir=rtl] .mat-button-toggle-group-appearance-standard .mat-button-toggle-appearance-standard+.mat-button-toggle-appearance-standard{border-left:none;border-right:solid 1px var(--mat-standard-button-toggle-divider-color)}.mat-button-toggle-group-appearance-standard.mat-button-toggle-vertical .mat-button-toggle-appearance-standard+.mat-button-toggle-appearance-standard{border-left:none;border-right:none;border-top:solid 1px var(--mat-standard-button-toggle-divider-color)}.mat-button-toggle-appearance-standard.mat-button-toggle-checked{color:var(--mat-standard-button-toggle-selected-state-text-color);background-color:var(--mat-standard-button-toggle-selected-state-background-color)}.mat-button-toggle-appearance-standard.mat-button-toggle-disabled{color:var(--mat-standard-button-toggle-disabled-state-text-color);background-color:var(--mat-standard-button-toggle-disabled-state-background-color)}.mat-button-toggle-appearance-standard.mat-button-toggle-disabled.mat-button-toggle-checked{color:var(--mat-standard-button-toggle-disabled-selected-state-text-color);background-color:var(--mat-standard-button-toggle-disabled-selected-state-background-color)}.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{background-color:var(--mat-standard-button-toggle-state-layer-color)}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:var(--mat-standard-button-toggle-hover-state-layer-opacity)}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:var(--mat-standard-button-toggle-focus-state-layer-opacity)}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;user-select:none;display:inline-block;padding:0 16px;line-height:var(--mat-legacy-button-toggle-height);position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px;line-height:var(--mat-standard-button-toggle-height)}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;pointer-events:none;opacity:0;background-color:var(--mat-legacy-button-toggle-state-layer-color)}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 500px;opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked:hover .mat-button-toggle-focus-overlay{opacity:.6}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"]\n    }]\n  }], () => [{\n    type: MatButtonToggleGroup,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_BUTTON_TOGGLE_GROUP]\n    }]\n  }, {\n    type: i0.ChangeDetectorRef\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: i1.FocusMonitor\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n    }]\n  }], {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    _buttonElement: [{\n      type: ViewChild,\n      args: ['button']\n    }],\n    id: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    disableRipple: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    appearance: [{\n      type: Input\n    }],\n    checked: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    change: [{\n      type: Output\n    }]\n  });\n})();\nclass MatButtonToggleModule {\n  static #_ = this.ɵfac = function MatButtonToggleModule_Factory(t) {\n    return new (t || MatButtonToggleModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatButtonToggleModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [MatCommonModule, MatRippleModule, MatCommonModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatButtonToggleModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule, MatRippleModule],\n      exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n      declarations: [MatButtonToggleGroup, MatButtonToggle]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule };","map":{"version":3,"names":["i1","SelectionModel","i0","InjectionToken","forwardRef","EventEmitter","booleanAttribute","Directive","Optional","Inject","ContentChildren","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","Attribute","ViewChild","NgModule","NG_VALUE_ACCESSOR","i2","MatCommonModule","MatRippleModule","_c0","_c1","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","provide","useExisting","MatButtonToggleGroup","multi","uniqueIdCounter","MatButtonToggleChange","constructor","source","value","name","_name","_markButtonsForCheck","selected","_selectionModel","multiple","map","toggle","undefined","newValue","_setSelectionByValue","valueChange","emit","_multiple","disabled","_disabled","_changeDetector","defaultOptions","_controlValueAccessorChangeFn","_onTouched","change","appearance","ngOnInit","ngAfterContentInit","select","_buttonToggles","filter","checked","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_emitChangeEvent","event","_rawValue","_syncButtonToggle","isUserInput","deferEvents","deselect","Promise","resolve","then","_updateModelValue","_isSelected","isSelected","_isPrechecked","Array","isArray","some","ngDevMode","Error","_clearSelection","forEach","currentValue","_selectValue","clear","correspondingOption","find","_markForCheck","_","ɵfac","MatButtonToggleGroup_Factory","t","ɵɵdirectiveInject","ChangeDetectorRef","_2","ɵdir","ɵɵdefineDirective","type","selectors","contentQueries","MatButtonToggleGroup_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","MatButtonToggle","_t","ɵɵqueryRefresh","ɵɵloadQuery","hostAttrs","hostVars","hostBindings","MatButtonToggleGroup_HostBindings","ɵɵattribute","ɵɵclassProp","vertical","inputs","outputs","exportAs","features","ɵɵProvidersFeature","ɵɵInputTransformsFeature","ɵsetClassMetadata","args","selector","providers","host","decorators","descendants","transform","buttonId","id","buttonToggleGroup","_appearance","_checked","_changeDetectorRef","toggleGroup","_elementRef","_focusMonitor","defaultTabIndex","ariaLabelledby","parsedTabIndex","Number","tabIndex","group","ngAfterViewInit","monitor","ngOnDestroy","stopMonitoring","focus","options","_buttonElement","nativeElement","_onButtonClick","newChecked","_isSingleSelector","_getButtonName","MatButtonToggle_Factory","ElementRef","FocusMonitor","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","viewQuery","MatButtonToggle_Query","ɵɵviewQuery","first","MatButtonToggle_HostBindings","ɵɵlistener","MatButtonToggle_focus_HostBindingHandler","ariaLabel","disableRipple","ngContentSelectors","decls","vars","consts","template","MatButtonToggle_Template","ɵɵprojectionDef","ɵɵelementStart","MatButtonToggle_Template_button_click_0_listener","ɵɵprojection","ɵɵelementEnd","ɵɵelement","_r0","ɵɵreference","ɵɵproperty","ɵɵadvance","dependencies","MatRipple","styles","encapsulation","changeDetection","None","OnPush","MatButtonToggleModule","MatButtonToggleModule_Factory","ɵmod","ɵɵdefineNgModule","_3","ɵinj","ɵɵdefineInjector","imports","exports","declarations"],"sources":["/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/node_modules/@angular/material/fesm2022/button-toggle.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/a11y';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, booleanAttribute, Directive, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i2 from '@angular/material/core';\nimport { MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\n * could cause unnecessary retention of the class and its component metadata.\n */\nconst MAT_BUTTON_TOGGLE_GROUP = new InjectionToken('MatButtonToggleGroup');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatButtonToggleGroup),\n    multi: true,\n};\n// Counter used to generate unique IDs.\nlet uniqueIdCounter = 0;\n/** Change event object emitted by button toggle. */\nclass MatButtonToggleChange {\n    constructor(\n    /** The button toggle that emits the event. */\n    source, \n    /** The value assigned to the button toggle. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nclass MatButtonToggleGroup {\n    /** `name` attribute for the underlying `input` element. */\n    get name() {\n        return this._name;\n    }\n    set name(value) {\n        this._name = value;\n        this._markButtonsForCheck();\n    }\n    /** Value of the toggle group. */\n    get value() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map(toggle => toggle.value);\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /** Selected button toggles in the group. */\n    get selected() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        return this.multiple ? selected : selected[0] || null;\n    }\n    /** Whether multiple button toggles can be selected. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        this._multiple = value;\n        this._markButtonsForCheck();\n    }\n    /** Whether multiple button toggle group is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._markButtonsForCheck();\n    }\n    constructor(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = () => { };\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this._onTouched = () => { };\n        this._name = `mat-button-toggle-group-${uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /** Event emitted when the group's value changes. */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent(toggle) {\n        const event = new MatButtonToggleChange(toggle, this.value);\n        this._rawValue = event.value;\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     * @param deferEvents Whether to defer emitting the change events.\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            this.selected.checked = false;\n        }\n        if (this._selectionModel) {\n            if (select) {\n                this._selectionModel.select(toggle);\n            }\n            else {\n                this._selectionModel.deselect(toggle);\n            }\n        }\n        else {\n            deferEvents = true;\n        }\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n        // the side-effect is that we may end up updating the model value out of sequence in others\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n        if (deferEvents) {\n            Promise.resolve().then(() => this._updateModelValue(toggle, isUserInput));\n        }\n        else {\n            this._updateModelValue(toggle, isUserInput);\n        }\n    }\n    /** Checks whether a button toggle is selected. */\n    _isSelected(toggle) {\n        return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /** Determines whether a button toggle should be checked on init. */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n        }\n        return toggle.value === this._rawValue;\n    }\n    /** Updates the selection state of the toggles in the group based on a value. */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /** Clears the selected toggles. */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach(toggle => (toggle.checked = false));\n    }\n    /** Selects a value if there's a toggle that corresponds to it. */\n    _selectValue(value) {\n        const correspondingOption = this._buttonToggles.find(toggle => {\n            return toggle.value != null && toggle.value === value;\n        });\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n    /** Syncs up the group's value with the model and emits the change event. */\n    _updateModelValue(toggle, isUserInput) {\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent(toggle);\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n    /** Marks all of the child button toggles to be checked. */\n    _markButtonsForCheck() {\n        this._buttonToggles?.forEach(toggle => toggle._markForCheck());\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatButtonToggleGroup, deps: [{ token: i0.ChangeDetectorRef }, { token: MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.0.0\", type: MatButtonToggleGroup, selector: \"mat-button-toggle-group\", inputs: { appearance: \"appearance\", name: \"name\", vertical: [\"vertical\", \"vertical\", booleanAttribute], value: \"value\", multiple: [\"multiple\", \"multiple\", booleanAttribute], disabled: [\"disabled\", \"disabled\", booleanAttribute] }, outputs: { valueChange: \"valueChange\", change: \"change\" }, host: { attributes: { \"role\": \"group\" }, properties: { \"attr.aria-disabled\": \"disabled\", \"class.mat-button-toggle-vertical\": \"vertical\", \"class.mat-button-toggle-group-appearance-standard\": \"appearance === \\\"standard\\\"\" }, classAttribute: \"mat-button-toggle-group\" }, providers: [\n            MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n            { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n        ], queries: [{ propertyName: \"_buttonToggles\", predicate: i0.forwardRef(() => MatButtonToggle), descendants: true }], exportAs: [\"matButtonToggleGroup\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatButtonToggleGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-button-toggle-group',\n                    providers: [\n                        MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                        { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n                    ],\n                    host: {\n                        'role': 'group',\n                        'class': 'mat-button-toggle-group',\n                        '[attr.aria-disabled]': 'disabled',\n                        '[class.mat-button-toggle-vertical]': 'vertical',\n                        '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n                    },\n                    exportAs: 'matButtonToggleGroup',\n                }]\n        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n                }] }], propDecorators: { _buttonToggles: [{\n                type: ContentChildren,\n                args: [forwardRef(() => MatButtonToggle), {\n                        // Note that this would technically pick up toggles\n                        // from nested groups, but that's not a case that we support.\n                        descendants: true,\n                    }]\n            }], appearance: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], vertical: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], value: [{\n                type: Input\n            }], valueChange: [{\n                type: Output\n            }], multiple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], change: [{\n                type: Output\n            }] } });\n/** Single button inside of a toggle group. */\nclass MatButtonToggle {\n    /** Unique ID for the underlying `button` element. */\n    get buttonId() {\n        return `${this.id}-button`;\n    }\n    /** The appearance style of the button. */\n    get appearance() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    set appearance(value) {\n        this._appearance = value;\n    }\n    /** Whether the button is checked. */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    set checked(value) {\n        if (value !== this._checked) {\n            this._checked = value;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the button is disabled. */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value) {\n        this._disabled = value;\n    }\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /** Event emitted when the group value changes. */\n        this.change = new EventEmitter();\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n        this.buttonToggleGroup = toggleGroup;\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    ngOnInit() {\n        const group = this.buttonToggleGroup;\n        this.id = this.id || `mat-button-toggle-${uniqueIdCounter++}`;\n        if (group) {\n            if (group._isPrechecked(this)) {\n                this.checked = true;\n            }\n            else if (group._isSelected(this) !== this._checked) {\n                // As side effect of the circular dependency between the toggle group and the button,\n                // we may end up in a state where the button is supposed to be checked on init, but it\n                // isn't, because the checked value was assigned too early. This can happen when Ivy\n                // assigns the static input value before the `ngOnInit` has run.\n                group._syncButtonToggle(this, this._checked);\n            }\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group._isSelected(this)) {\n            group._syncButtonToggle(this, false, false, true);\n        }\n    }\n    /** Focuses the button. */\n    focus(options) {\n        this._buttonElement.nativeElement.focus(options);\n    }\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    _onButtonClick() {\n        const newChecked = this._isSingleSelector() ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Gets the name that should be assigned to the inner DOM node. */\n    _getButtonName() {\n        if (this._isSingleSelector()) {\n            return this.buttonToggleGroup.name;\n        }\n        return this.name || null;\n    }\n    /** Whether the toggle is in single selection mode. */\n    _isSingleSelector() {\n        return this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatButtonToggle, deps: [{ token: MAT_BUTTON_TOGGLE_GROUP, optional: true }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i1.FocusMonitor }, { token: 'tabindex', attribute: true }, { token: MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"17.0.0\", type: MatButtonToggle, selector: \"mat-button-toggle\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], id: \"id\", name: \"name\", value: \"value\", tabIndex: \"tabIndex\", disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute], appearance: \"appearance\", checked: [\"checked\", \"checked\", booleanAttribute], disabled: [\"disabled\", \"disabled\", booleanAttribute] }, outputs: { change: \"change\" }, host: { attributes: { \"role\": \"presentation\" }, listeners: { \"focus\": \"focus()\" }, properties: { \"class.mat-button-toggle-standalone\": \"!buttonToggleGroup\", \"class.mat-button-toggle-checked\": \"checked\", \"class.mat-button-toggle-disabled\": \"disabled\", \"class.mat-button-toggle-appearance-standard\": \"appearance === \\\"standard\\\"\", \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.id\": \"id\", \"attr.name\": \"null\" }, classAttribute: \"mat-button-toggle\" }, viewQueries: [{ propertyName: \"_buttonElement\", first: true, predicate: [\"button\"], descendants: true }], exportAs: [\"matButtonToggle\"], ngImport: i0, template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"_getButtonName()\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\", styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;-webkit-tap-highlight-color:rgba(0,0,0,0);transform:translateZ(0);border-radius:var(--mat-legacy-button-toggle-shape)}.mat-button-toggle-standalone:not([class*=mat-elevation-z]),.mat-button-toggle-group:not([class*=mat-elevation-z]){box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:var(--mat-standard-button-toggle-shape);border:solid 1px var(--mat-standard-button-toggle-divider-color)}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard:not([class*=mat-elevation-z]),.mat-button-toggle-group-appearance-standard:not([class*=mat-elevation-z]){box-shadow:none}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative;color:var(--mat-legacy-button-toggle-text-color);font-family:var(--mat-legacy-button-toggle-text-font)}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:var(--mat-legacy-button-toggle-focus-state-layer-opacity)}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle-checked{color:var(--mat-legacy-button-toggle-selected-state-text-color);background-color:var(--mat-legacy-button-toggle-selected-state-background-color)}.mat-button-toggle-disabled{color:var(--mat-legacy-button-toggle-disabled-state-text-color);background-color:var(--mat-legacy-button-toggle-disabled-state-background-color)}.mat-button-toggle-disabled.mat-button-toggle-checked{background-color:var(--mat-legacy-button-toggle-disabled-selected-state-background-color)}.mat-button-toggle-appearance-standard{color:var(--mat-standard-button-toggle-text-color);background-color:var(--mat-standard-button-toggle-background-color);font-family:var(--mat-standard-button-toggle-text-font)}.mat-button-toggle-group-appearance-standard .mat-button-toggle-appearance-standard+.mat-button-toggle-appearance-standard{border-left:solid 1px var(--mat-standard-button-toggle-divider-color)}[dir=rtl] .mat-button-toggle-group-appearance-standard .mat-button-toggle-appearance-standard+.mat-button-toggle-appearance-standard{border-left:none;border-right:solid 1px var(--mat-standard-button-toggle-divider-color)}.mat-button-toggle-group-appearance-standard.mat-button-toggle-vertical .mat-button-toggle-appearance-standard+.mat-button-toggle-appearance-standard{border-left:none;border-right:none;border-top:solid 1px var(--mat-standard-button-toggle-divider-color)}.mat-button-toggle-appearance-standard.mat-button-toggle-checked{color:var(--mat-standard-button-toggle-selected-state-text-color);background-color:var(--mat-standard-button-toggle-selected-state-background-color)}.mat-button-toggle-appearance-standard.mat-button-toggle-disabled{color:var(--mat-standard-button-toggle-disabled-state-text-color);background-color:var(--mat-standard-button-toggle-disabled-state-background-color)}.mat-button-toggle-appearance-standard.mat-button-toggle-disabled.mat-button-toggle-checked{color:var(--mat-standard-button-toggle-disabled-selected-state-text-color);background-color:var(--mat-standard-button-toggle-disabled-selected-state-background-color)}.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{background-color:var(--mat-standard-button-toggle-state-layer-color)}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:var(--mat-standard-button-toggle-hover-state-layer-opacity)}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:var(--mat-standard-button-toggle-focus-state-layer-opacity)}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;user-select:none;display:inline-block;padding:0 16px;line-height:var(--mat-legacy-button-toggle-height);position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px;line-height:var(--mat-standard-button-toggle-height)}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;pointer-events:none;opacity:0;background-color:var(--mat-legacy-button-toggle-state-layer-color)}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 500px;opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked:hover .mat-button-toggle-focus-overlay{opacity:.6}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"], dependencies: [{ kind: \"directive\", type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatButtonToggle, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-button-toggle', encapsulation: ViewEncapsulation.None, exportAs: 'matButtonToggle', changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                        '[class.mat-button-toggle-checked]': 'checked',\n                        '[class.mat-button-toggle-disabled]': 'disabled',\n                        '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                        'class': 'mat-button-toggle',\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.id]': 'id',\n                        '[attr.name]': 'null',\n                        '(focus)': 'focus()',\n                        'role': 'presentation',\n                    }, template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"_getButtonName()\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\", styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;-webkit-tap-highlight-color:rgba(0,0,0,0);transform:translateZ(0);border-radius:var(--mat-legacy-button-toggle-shape)}.mat-button-toggle-standalone:not([class*=mat-elevation-z]),.mat-button-toggle-group:not([class*=mat-elevation-z]){box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:var(--mat-standard-button-toggle-shape);border:solid 1px var(--mat-standard-button-toggle-divider-color)}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard:not([class*=mat-elevation-z]),.mat-button-toggle-group-appearance-standard:not([class*=mat-elevation-z]){box-shadow:none}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative;color:var(--mat-legacy-button-toggle-text-color);font-family:var(--mat-legacy-button-toggle-text-font)}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:var(--mat-legacy-button-toggle-focus-state-layer-opacity)}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle-checked{color:var(--mat-legacy-button-toggle-selected-state-text-color);background-color:var(--mat-legacy-button-toggle-selected-state-background-color)}.mat-button-toggle-disabled{color:var(--mat-legacy-button-toggle-disabled-state-text-color);background-color:var(--mat-legacy-button-toggle-disabled-state-background-color)}.mat-button-toggle-disabled.mat-button-toggle-checked{background-color:var(--mat-legacy-button-toggle-disabled-selected-state-background-color)}.mat-button-toggle-appearance-standard{color:var(--mat-standard-button-toggle-text-color);background-color:var(--mat-standard-button-toggle-background-color);font-family:var(--mat-standard-button-toggle-text-font)}.mat-button-toggle-group-appearance-standard .mat-button-toggle-appearance-standard+.mat-button-toggle-appearance-standard{border-left:solid 1px var(--mat-standard-button-toggle-divider-color)}[dir=rtl] .mat-button-toggle-group-appearance-standard .mat-button-toggle-appearance-standard+.mat-button-toggle-appearance-standard{border-left:none;border-right:solid 1px var(--mat-standard-button-toggle-divider-color)}.mat-button-toggle-group-appearance-standard.mat-button-toggle-vertical .mat-button-toggle-appearance-standard+.mat-button-toggle-appearance-standard{border-left:none;border-right:none;border-top:solid 1px var(--mat-standard-button-toggle-divider-color)}.mat-button-toggle-appearance-standard.mat-button-toggle-checked{color:var(--mat-standard-button-toggle-selected-state-text-color);background-color:var(--mat-standard-button-toggle-selected-state-background-color)}.mat-button-toggle-appearance-standard.mat-button-toggle-disabled{color:var(--mat-standard-button-toggle-disabled-state-text-color);background-color:var(--mat-standard-button-toggle-disabled-state-background-color)}.mat-button-toggle-appearance-standard.mat-button-toggle-disabled.mat-button-toggle-checked{color:var(--mat-standard-button-toggle-disabled-selected-state-text-color);background-color:var(--mat-standard-button-toggle-disabled-selected-state-background-color)}.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{background-color:var(--mat-standard-button-toggle-state-layer-color)}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:var(--mat-standard-button-toggle-hover-state-layer-opacity)}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:var(--mat-standard-button-toggle-focus-state-layer-opacity)}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;user-select:none;display:inline-block;padding:0 16px;line-height:var(--mat-legacy-button-toggle-height);position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px;line-height:var(--mat-standard-button-toggle-height)}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;pointer-events:none;opacity:0;background-color:var(--mat-legacy-button-toggle-state-layer-color)}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 500px;opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked:hover .mat-button-toggle-focus-overlay{opacity:.6}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"] }]\n        }], ctorParameters: () => [{ type: MatButtonToggleGroup, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_BUTTON_TOGGLE_GROUP]\n                }] }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.FocusMonitor }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n                }] }], propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], _buttonElement: [{\n                type: ViewChild,\n                args: ['button']\n            }], id: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], tabIndex: [{\n                type: Input\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], appearance: [{\n                type: Input\n            }], checked: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], change: [{\n                type: Output\n            }] } });\n\nclass MatButtonToggleModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatButtonToggleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.0\", ngImport: i0, type: MatButtonToggleModule, declarations: [MatButtonToggleGroup, MatButtonToggle], imports: [MatCommonModule, MatRippleModule], exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatButtonToggleModule, imports: [MatCommonModule, MatRippleModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatButtonToggleModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatRippleModule],\n                    exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                    declarations: [MatButtonToggleGroup, MatButtonToggle],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}