{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { map, ReplaySubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class UserService {\n  constructor() {\n    this._httpClient = inject(HttpClient);\n    this._user = new ReplaySubject(1);\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Accessors\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Setter & getter for user\n   *\n   * @param value\n   */\n  set user(value) {\n    // Store the value\n    this._user.next(value);\n  }\n  get user$() {\n    return this._user.asObservable();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Get the current signed-in user data\n   */\n  get() {\n    return this._httpClient.get('api/common/user').pipe(tap(user => {\n      this._user.next(user);\n    }));\n  }\n  /**\n   * Update the user\n   *\n   * @param user\n   */\n  update(user) {\n    return this._httpClient.patch('api/common/user', {\n      user\n    }).pipe(map(response => {\n      this._user.next(response);\n    }));\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpClient","inject","map","ReplaySubject","tap","UserService","constructor","_httpClient","_user","user","value","next","user$","asObservable","get","pipe","update","patch","response","_","_2","factory","ɵfac","providedIn"],"sources":["/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/src/app/core/user/user.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { User } from 'app/core/user/user.types';\nimport { map, Observable, ReplaySubject, tap } from 'rxjs';\n\n@Injectable({providedIn: 'root'})\nexport class UserService\n{\n    private _httpClient = inject(HttpClient);\n    private _user: ReplaySubject<User> = new ReplaySubject<User>(1);\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Setter & getter for user\n     *\n     * @param value\n     */\n    set user(value: User)\n    {\n        // Store the value\n        this._user.next(value);\n    }\n\n    get user$(): Observable<User>\n    {\n        return this._user.asObservable();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Get the current signed-in user data\n     */\n    get(): Observable<User>\n    {\n        return this._httpClient.get<User>('api/common/user').pipe(\n            tap((user) =>\n            {\n                this._user.next(user);\n            }),\n        );\n    }\n\n    /**\n     * Update the user\n     *\n     * @param user\n     */\n    update(user: User): Observable<any>\n    {\n        return this._httpClient.patch<User>('api/common/user', {user}).pipe(\n            map((response) =>\n            {\n                this._user.next(response);\n            }),\n        );\n    }\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,sBAAsB;AACjD,SAASC,MAAM,QAAoB,eAAe;AAElD,SAASC,GAAG,EAAcC,aAAa,EAAEC,GAAG,QAAQ,MAAM;;AAG1D,OAAM,MAAOC,WAAW;EADxBC,YAAA;IAGY,KAAAC,WAAW,GAAGN,MAAM,CAACD,UAAU,CAAC;IAChC,KAAAQ,KAAK,GAAwB,IAAIL,aAAa,CAAO,CAAC,CAAC;;EAE/D;EACA;EACA;EAEA;;;;;EAKA,IAAIM,IAAIA,CAACC,KAAW;IAEhB;IACA,IAAI,CAACF,KAAK,CAACG,IAAI,CAACD,KAAK,CAAC;EAC1B;EAEA,IAAIE,KAAKA,CAAA;IAEL,OAAO,IAAI,CAACJ,KAAK,CAACK,YAAY,EAAE;EACpC;EAEA;EACA;EACA;EAEA;;;EAGAC,GAAGA,CAAA;IAEC,OAAO,IAAI,CAACP,WAAW,CAACO,GAAG,CAAO,iBAAiB,CAAC,CAACC,IAAI,CACrDX,GAAG,CAAEK,IAAI,IAAI;MAET,IAAI,CAACD,KAAK,CAACG,IAAI,CAACF,IAAI,CAAC;IACzB,CAAC,CAAC,CACL;EACL;EAEA;;;;;EAKAO,MAAMA,CAACP,IAAU;IAEb,OAAO,IAAI,CAACF,WAAW,CAACU,KAAK,CAAO,iBAAiB,EAAE;MAACR;IAAI,CAAC,CAAC,CAACM,IAAI,CAC/Db,GAAG,CAAEgB,QAAQ,IAAI;MAEb,IAAI,CAACV,KAAK,CAACG,IAAI,CAACO,QAAQ,CAAC;IAC7B,CAAC,CAAC,CACL;EACL;EAAC,QAAAC,CAAA,G;qBAvDQd,WAAW;EAAA;EAAA,QAAAe,EAAA,G;WAAXf,WAAW;IAAAgB,OAAA,EAAXhB,WAAW,CAAAiB,IAAA;IAAAC,UAAA,EADC;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}