{"ast":null,"code":"import { BehaviorSubject, map, of, switchMap, tap, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class QuickChatService {\n  /**\n   * Constructor\n   */\n  constructor(_httpClient) {\n    this._httpClient = _httpClient;\n    this._chat = new BehaviorSubject(null);\n    this._chats = new BehaviorSubject(null);\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Accessors\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Getter for chat\n   */\n  get chat$() {\n    return this._chat.asObservable();\n  }\n  /**\n   * Getter for chat\n   */\n  get chats$() {\n    return this._chats.asObservable();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Get chats\n   */\n  getChats() {\n    return this._httpClient.get('api/apps/chat/chats').pipe(tap(response => {\n      this._chats.next(response);\n    }));\n  }\n  /**\n   * Get chat\n   *\n   * @param id\n   */\n  getChatById(id) {\n    return this._httpClient.get('api/apps/chat/chat', {\n      params: {\n        id\n      }\n    }).pipe(map(chat => {\n      // Update the chat\n      this._chat.next(chat);\n      // Return the chat\n      return chat;\n    }), switchMap(chat => {\n      if (!chat) {\n        return throwError('Could not found chat with id of ' + id + '!');\n      }\n      return of(chat);\n    }));\n  }\n  static #_ = this.ɵfac = function QuickChatService_Factory(t) {\n    return new (t || QuickChatService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuickChatService,\n    factory: QuickChatService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","map","of","switchMap","tap","throwError","QuickChatService","constructor","_httpClient","_chat","_chats","chat$","asObservable","chats$","getChats","get","pipe","response","next","getChatById","id","params","chat","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/src/app/layout/common/quick-chat/quick-chat.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Chat } from 'app/layout/common/quick-chat/quick-chat.types';\nimport { BehaviorSubject, map, Observable, of, switchMap, tap, throwError } from 'rxjs';\n\n@Injectable({providedIn: 'root'})\nexport class QuickChatService\n{\n    private _chat: BehaviorSubject<Chat> = new BehaviorSubject(null);\n    private _chats: BehaviorSubject<Chat[]> = new BehaviorSubject<Chat[]>(null);\n\n    /**\n     * Constructor\n     */\n    constructor(private _httpClient: HttpClient)\n    {\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Getter for chat\n     */\n    get chat$(): Observable<Chat>\n    {\n        return this._chat.asObservable();\n    }\n\n    /**\n     * Getter for chat\n     */\n    get chats$(): Observable<Chat[]>\n    {\n        return this._chats.asObservable();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Get chats\n     */\n    getChats(): Observable<any>\n    {\n        return this._httpClient.get<Chat[]>('api/apps/chat/chats').pipe(\n            tap((response: Chat[]) =>\n            {\n                this._chats.next(response);\n            }),\n        );\n    }\n\n    /**\n     * Get chat\n     *\n     * @param id\n     */\n    getChatById(id: string): Observable<any>\n    {\n        return this._httpClient.get<Chat>('api/apps/chat/chat', {params: {id}}).pipe(\n            map((chat) =>\n            {\n                // Update the chat\n                this._chat.next(chat);\n\n                // Return the chat\n                return chat;\n            }),\n            switchMap((chat) =>\n            {\n                if ( !chat )\n                {\n                    return throwError('Could not found chat with id of ' + id + '!');\n                }\n\n                return of(chat);\n            }),\n        );\n    }\n}\n"],"mappings":"AAGA,SAASA,eAAe,EAAEC,GAAG,EAAcC,EAAE,EAAEC,SAAS,EAAEC,GAAG,EAAEC,UAAU,QAAQ,MAAM;;;AAGvF,OAAM,MAAOC,gBAAgB;EAKzB;;;EAGAC,YAAoBC,WAAuB;IAAvB,KAAAA,WAAW,GAAXA,WAAW;IANvB,KAAAC,KAAK,GAA0B,IAAIT,eAAe,CAAC,IAAI,CAAC;IACxD,KAAAU,MAAM,GAA4B,IAAIV,eAAe,CAAS,IAAI,CAAC;EAO3E;EAEA;EACA;EACA;EAEA;;;EAGA,IAAIW,KAAKA,CAAA;IAEL,OAAO,IAAI,CAACF,KAAK,CAACG,YAAY,EAAE;EACpC;EAEA;;;EAGA,IAAIC,MAAMA,CAAA;IAEN,OAAO,IAAI,CAACH,MAAM,CAACE,YAAY,EAAE;EACrC;EAEA;EACA;EACA;EAEA;;;EAGAE,QAAQA,CAAA;IAEJ,OAAO,IAAI,CAACN,WAAW,CAACO,GAAG,CAAS,qBAAqB,CAAC,CAACC,IAAI,CAC3DZ,GAAG,CAAEa,QAAgB,IAAI;MAErB,IAAI,CAACP,MAAM,CAACQ,IAAI,CAACD,QAAQ,CAAC;IAC9B,CAAC,CAAC,CACL;EACL;EAEA;;;;;EAKAE,WAAWA,CAACC,EAAU;IAElB,OAAO,IAAI,CAACZ,WAAW,CAACO,GAAG,CAAO,oBAAoB,EAAE;MAACM,MAAM,EAAE;QAACD;MAAE;IAAC,CAAC,CAAC,CAACJ,IAAI,CACxEf,GAAG,CAAEqB,IAAI,IAAI;MAET;MACA,IAAI,CAACb,KAAK,CAACS,IAAI,CAACI,IAAI,CAAC;MAErB;MACA,OAAOA,IAAI;IACf,CAAC,CAAC,EACFnB,SAAS,CAAEmB,IAAI,IAAI;MAEf,IAAK,CAACA,IAAI,EACV;QACI,OAAOjB,UAAU,CAAC,kCAAkC,GAAGe,EAAE,GAAG,GAAG,CAAC;;MAGpE,OAAOlB,EAAE,CAACoB,IAAI,CAAC;IACnB,CAAC,CAAC,CACL;EACL;EAAC,QAAAC,CAAA,G;qBA3EQjB,gBAAgB,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAhBtB,gBAAgB;IAAAuB,OAAA,EAAhBvB,gBAAgB,CAAAwB,IAAA;IAAAC,UAAA,EADJ;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}