{"ast":null,"code":"import { DOCUMENT, NgTemplateOutlet } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/button\";\nimport * as i2 from \"@angular/material/tooltip\";\nimport * as i3 from \"@angular/material/icon\";\nfunction FuseFullscreenComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-icon\", 3);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"svgIcon\", \"heroicons_outline:arrows-pointing-out\");\n  }\n}\nexport class FuseFullscreenComponent {\n  /**\n   * Constructor\n   */\n  constructor(_document) {\n    this._document = _document;\n    this._isFullscreen = false;\n    this._fsDoc = _document;\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Lifecycle hooks\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * On init\n   */\n  ngOnInit() {\n    this._fsDocEl = document.documentElement;\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Toggle the fullscreen mode\n   */\n  toggleFullscreen() {\n    // Check if the fullscreen is open\n    this._isFullscreen = this._getBrowserFullscreenElement() !== null;\n    // Toggle the fullscreen\n    if (this._isFullscreen) {\n      this._closeFullscreen();\n    } else {\n      this._openFullscreen();\n    }\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Private methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Get browser's fullscreen element\n   *\n   * @private\n   */\n  _getBrowserFullscreenElement() {\n    if (typeof this._fsDoc.fullscreenElement !== 'undefined') {\n      return this._fsDoc.fullscreenElement;\n    }\n    if (typeof this._fsDoc.mozFullScreenElement !== 'undefined') {\n      return this._fsDoc.mozFullScreenElement;\n    }\n    if (typeof this._fsDoc.msFullscreenElement !== 'undefined') {\n      return this._fsDoc.msFullscreenElement;\n    }\n    if (typeof this._fsDoc.webkitFullscreenElement !== 'undefined') {\n      return this._fsDoc.webkitFullscreenElement;\n    }\n    throw new Error('Fullscreen mode is not supported by this browser');\n  }\n  /**\n   * Open the fullscreen\n   *\n   * @private\n   */\n  _openFullscreen() {\n    if (this._fsDocEl.requestFullscreen) {\n      this._fsDocEl.requestFullscreen();\n      return;\n    }\n    // Firefox\n    if (this._fsDocEl.mozRequestFullScreen) {\n      this._fsDocEl.mozRequestFullScreen();\n      return;\n    }\n    // Chrome, Safari and Opera\n    if (this._fsDocEl.webkitRequestFullscreen) {\n      this._fsDocEl.webkitRequestFullscreen();\n      return;\n    }\n    // IE/Edge\n    if (this._fsDocEl.msRequestFullscreen) {\n      this._fsDocEl.msRequestFullscreen();\n      return;\n    }\n  }\n  /**\n   * Close the fullscreen\n   *\n   * @private\n   */\n  _closeFullscreen() {\n    if (this._fsDoc.exitFullscreen) {\n      this._fsDoc.exitFullscreen();\n      return;\n    }\n    // Firefox\n    if (this._fsDoc.mozCancelFullScreen) {\n      this._fsDoc.mozCancelFullScreen();\n      return;\n    }\n    // Chrome, Safari and Opera\n    if (this._fsDoc.webkitExitFullscreen) {\n      this._fsDoc.webkitExitFullscreen();\n      return;\n    }\n    // IE/Edge\n    else if (this._fsDoc.msExitFullscreen) {\n      this._fsDoc.msExitFullscreen();\n      return;\n    }\n  }\n  static #_ = this.ɵfac = function FuseFullscreenComponent_Factory(t) {\n    return new (t || FuseFullscreenComponent)(i0.ɵɵdirectiveInject(DOCUMENT));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FuseFullscreenComponent,\n    selectors: [[\"fuse-fullscreen\"]],\n    inputs: {\n      iconTpl: \"iconTpl\",\n      tooltip: \"tooltip\"\n    },\n    exportAs: [\"fuseFullscreen\"],\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 4,\n    vars: 2,\n    consts: [[\"mat-icon-button\", \"\", 3, \"matTooltip\", \"click\"], [3, \"ngTemplateOutlet\"], [\"defaultIconTpl\", \"\"], [3, \"svgIcon\"]],\n    template: function FuseFullscreenComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function FuseFullscreenComponent_Template_button_click_0_listener() {\n          return ctx.toggleFullscreen();\n        });\n        i0.ɵɵelementContainer(1, 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(2, FuseFullscreenComponent_ng_template_2_Template, 1, 1, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(3);\n        i0.ɵɵproperty(\"matTooltip\", ctx.tooltip || \"Toggle Fullscreen\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.iconTpl || _r1);\n      }\n    },\n    dependencies: [MatButtonModule, i1.MatIconButton, MatTooltipModule, i2.MatTooltip, NgTemplateOutlet, MatIconModule, i3.MatIcon],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}","map":{"version":3,"names":["DOCUMENT","NgTemplateOutlet","MatButtonModule","MatIconModule","MatTooltipModule","i0","ɵɵelement","ɵɵproperty","FuseFullscreenComponent","constructor","_document","_isFullscreen","_fsDoc","ngOnInit","_fsDocEl","document","documentElement","toggleFullscreen","_getBrowserFullscreenElement","_closeFullscreen","_openFullscreen","fullscreenElement","mozFullScreenElement","msFullscreenElement","webkitFullscreenElement","Error","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","_","ɵɵdirectiveInject","_2","selectors","inputs","iconTpl","tooltip","exportAs","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","FuseFullscreenComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","FuseFullscreenComponent_Template_button_click_0_listener","ɵɵelementContainer","ɵɵelementEnd","ɵɵtemplate","FuseFullscreenComponent_ng_template_2_Template","ɵɵtemplateRefExtractor","ɵɵadvance","_r1","i1","MatIconButton","i2","MatTooltip","i3","MatIcon","encapsulation","changeDetection"],"sources":["/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/src/@fuse/components/fullscreen/fullscreen.component.ts","/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/src/@fuse/components/fullscreen/fullscreen.component.html"],"sourcesContent":["import { DOCUMENT, NgTemplateOutlet } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, Inject, Input, OnInit, TemplateRef, ViewEncapsulation } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { FSDocument, FSDocumentElement } from '@fuse/components/fullscreen/fullscreen.types';\n\n@Component({\n    selector       : 'fuse-fullscreen',\n    templateUrl    : './fullscreen.component.html',\n    encapsulation  : ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs       : 'fuseFullscreen',\n    standalone     : true,\n    imports        : [MatButtonModule, MatTooltipModule, NgTemplateOutlet, MatIconModule],\n})\nexport class FuseFullscreenComponent implements OnInit\n{\n    @Input() iconTpl: TemplateRef<any>;\n    @Input() tooltip: string;\n    private _fsDoc: FSDocument;\n    private _fsDocEl: FSDocumentElement;\n    private _isFullscreen: boolean = false;\n\n    /**\n     * Constructor\n     */\n    constructor(@Inject(DOCUMENT) private _document: Document)\n    {\n        this._fsDoc = _document as FSDocument;\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        this._fsDocEl = document.documentElement as FSDocumentElement;\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Toggle the fullscreen mode\n     */\n    toggleFullscreen(): void\n    {\n        // Check if the fullscreen is open\n        this._isFullscreen = this._getBrowserFullscreenElement() !== null;\n\n        // Toggle the fullscreen\n        if ( this._isFullscreen )\n        {\n            this._closeFullscreen();\n        }\n        else\n        {\n            this._openFullscreen();\n        }\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Private methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Get browser's fullscreen element\n     *\n     * @private\n     */\n    private _getBrowserFullscreenElement(): Element\n    {\n        if ( typeof this._fsDoc.fullscreenElement !== 'undefined' )\n        {\n            return this._fsDoc.fullscreenElement;\n        }\n\n        if ( typeof this._fsDoc.mozFullScreenElement !== 'undefined' )\n        {\n            return this._fsDoc.mozFullScreenElement;\n        }\n\n        if ( typeof this._fsDoc.msFullscreenElement !== 'undefined' )\n        {\n            return this._fsDoc.msFullscreenElement;\n        }\n\n        if ( typeof this._fsDoc.webkitFullscreenElement !== 'undefined' )\n        {\n            return this._fsDoc.webkitFullscreenElement;\n        }\n\n        throw new Error('Fullscreen mode is not supported by this browser');\n    }\n\n    /**\n     * Open the fullscreen\n     *\n     * @private\n     */\n    private _openFullscreen(): void\n    {\n        if ( this._fsDocEl.requestFullscreen )\n        {\n            this._fsDocEl.requestFullscreen();\n            return;\n        }\n\n        // Firefox\n        if ( this._fsDocEl.mozRequestFullScreen )\n        {\n            this._fsDocEl.mozRequestFullScreen();\n            return;\n        }\n\n        // Chrome, Safari and Opera\n        if ( this._fsDocEl.webkitRequestFullscreen )\n        {\n            this._fsDocEl.webkitRequestFullscreen();\n            return;\n        }\n\n        // IE/Edge\n        if ( this._fsDocEl.msRequestFullscreen )\n        {\n            this._fsDocEl.msRequestFullscreen();\n            return;\n        }\n    }\n\n    /**\n     * Close the fullscreen\n     *\n     * @private\n     */\n    private _closeFullscreen(): void\n    {\n        if ( this._fsDoc.exitFullscreen )\n        {\n            this._fsDoc.exitFullscreen();\n            return;\n        }\n\n        // Firefox\n        if ( this._fsDoc.mozCancelFullScreen )\n        {\n            this._fsDoc.mozCancelFullScreen();\n            return;\n        }\n\n        // Chrome, Safari and Opera\n        if ( this._fsDoc.webkitExitFullscreen )\n        {\n            this._fsDoc.webkitExitFullscreen();\n            return;\n        }\n\n        // IE/Edge\n        else if ( this._fsDoc.msExitFullscreen )\n        {\n            this._fsDoc.msExitFullscreen();\n            return;\n        }\n    }\n}\n","<!-- Button -->\n<button\n    mat-icon-button\n    [matTooltip]=\"tooltip || 'Toggle Fullscreen'\"\n    (click)=\"toggleFullscreen()\">\n    <ng-container [ngTemplateOutlet]=\"iconTpl || defaultIconTpl\"></ng-container>\n</button>\n\n<!-- Default icon -->\n<ng-template #defaultIconTpl>\n    <mat-icon [svgIcon]=\"'heroicons_outline:arrows-pointing-out'\"></mat-icon>\n</ng-template>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}