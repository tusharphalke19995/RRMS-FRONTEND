{"ast":null,"code":"import { FuseMockApiUtils } from '@fuse/lib/mock-api';\nimport { boards as boardsData, cards as cardsData, labels as labelsData, lists as listsData, members as membersData } from 'app/mock-api/apps/scrumboard/data';\nimport { assign, cloneDeep } from 'lodash-es';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nexport class ScrumboardMockApi {\n  /**\n   * Constructor\n   */\n  constructor(_fuseMockApiService) {\n    this._fuseMockApiService = _fuseMockApiService;\n    // Private\n    this._boards = boardsData;\n    this._cards = cardsData;\n    this._labels = labelsData;\n    this._lists = listsData;\n    this._members = membersData;\n    // Register Mock API handlers\n    this.registerHandlers();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Register Mock API handlers\n   */\n  registerHandlers() {\n    // -----------------------------------------------------------------------------------------------------\n    // @ Boards - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/scrumboard/boards').reply(({\n      request\n    }) => {\n      // Clone the boards\n      let boards = cloneDeep(this._boards);\n      // Go through the boards and inject the members\n      boards = boards.map(board => ({\n        ...board,\n        members: board.members.map(boardMember => this._members.find(member => boardMember === member.id))\n      }));\n      return [200, boards];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Board - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/scrumboard/board').reply(({\n      request\n    }) => {\n      // Get the id\n      const id = request.params.get('id');\n      // Find the board\n      const board = this._boards.find(item => item.id === id);\n      // Attach the board lists\n      board.lists = this._lists.filter(item => item.boardId === id).sort((a, b) => a.position - b.position);\n      // Grab all cards that belong to this board and attach labels to them\n      let cards = this._cards.filter(item => item.boardId === id);\n      cards = cards.map(card => ({\n        ...card,\n        labels: card.labels.map(cardLabelId => this._labels.find(label => label.id === cardLabelId))\n      }));\n      // Attach the board cards into corresponding lists\n      board.lists.forEach((list, index, array) => {\n        array[index].cards = cards.filter(item => item.boardId === id && item.listId === list.id).sort((a, b) => a.position - b.position);\n      });\n      // Attach the board labels\n      board.labels = this._labels.filter(item => item.boardId === id);\n      return [200, cloneDeep(board)];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ List - POST\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPost('api/apps/scrumboard/board/list').reply(({\n      request\n    }) => {\n      // Get the list\n      const newList = cloneDeep(request.body.list);\n      // Generate a new GUID\n      newList.id = FuseMockApiUtils.guid();\n      // Store the new list\n      this._lists.push(newList);\n      return [200, newList];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ List - PATCH\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPatch('api/apps/scrumboard/board/list').reply(({\n      request\n    }) => {\n      // Get the list\n      const list = cloneDeep(request.body.list);\n      // Prepare the updated list\n      let updatedList = null;\n      // Find the list and update it\n      this._lists.forEach((item, index, lists) => {\n        if (item.id === list.id) {\n          // Update the list\n          lists[index] = assign({}, lists[index], list);\n          // Store the updated list\n          updatedList = lists[index];\n        }\n      });\n      return [200, updatedList];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lists - PATCH\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPatch('api/apps/scrumboard/board/lists').reply(({\n      request\n    }) => {\n      // Get the lists\n      const lists = cloneDeep(request.body.lists);\n      // Prepare the updated lists\n      const updatedLists = [];\n      // Go through the lists\n      lists.forEach(item => {\n        // Find the list\n        const index = this._lists.findIndex(list => item.id === list.id);\n        // Update the list\n        this._lists[index] = assign({}, this._lists[index], item);\n        // Store in the updated lists\n        updatedLists.push(item);\n      });\n      return [200, updatedLists];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ List - DELETE\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onDelete('api/apps/scrumboard/board/list').reply(({\n      request\n    }) => {\n      // Get the id\n      const id = request.params.get('id');\n      // Find the list and delete it\n      const index = this._lists.findIndex(item => item.id === id);\n      this._lists.splice(index, 1);\n      // Filter out the cards that belonged to the list to delete them\n      this._cards = this._cards.filter(card => card.listId !== id);\n      return [200, true];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Card - PUT\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPut('api/apps/scrumboard/board/card').reply(({\n      request\n    }) => {\n      // Get the card\n      const newCard = cloneDeep(request.body.card);\n      // Generate a new GUID\n      newCard.id = FuseMockApiUtils.guid();\n      // Unshift the new card\n      this._cards.push(newCard);\n      return [200, newCard];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Card - PATCH\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPatch('api/apps/scrumboard/board/card').reply(({\n      request\n    }) => {\n      // Get the id and card\n      const id = request.body.id;\n      const card = cloneDeep(request.body.card);\n      // Prepare the updated card\n      let updatedCard = null;\n      // Go through the labels and leave only ids of them\n      card.labels = card.labels.map(itemLabel => itemLabel.id);\n      // Find the card and update it\n      this._cards.forEach((item, index, cards) => {\n        if (item.id === id) {\n          // Update the card\n          cards[index] = assign({}, cards[index], card);\n          // Store the updated card\n          updatedCard = cloneDeep(cards[index]);\n        }\n      });\n      // Attach the labels of the card\n      updatedCard.labels = updatedCard.labels.map(cardLabelId => this._labels.find(label => label.id === cardLabelId));\n      return [200, updatedCard];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Cards - PATCH\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPatch('api/apps/scrumboard/board/cards').reply(({\n      request\n    }) => {\n      // Get the cards\n      const cards = cloneDeep(request.body.cards);\n      // Prepare the updated cards\n      const updatedCards = [];\n      // Go through the cards\n      cards.forEach(item => {\n        // Find the card\n        const index = this._cards.findIndex(card => item.id === card.id);\n        // Go through the labels and leave only ids of them\n        item.labels = item.labels.map(itemLabel => itemLabel.id);\n        // Update the card\n        this._cards[index] = assign({}, this._cards[index], item);\n        // Attach the labels of the card\n        item.labels = item.labels.map(cardLabelId => this._labels.find(label => label.id === cardLabelId));\n        // Store in the updated cards\n        updatedCards.push(item);\n      });\n      return [200, updatedCards];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Card - DELETE\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onDelete('api/apps/scrumboard/board/card').reply(({\n      request\n    }) => {\n      // Get the id\n      const id = request.params.get('id');\n      // Find the card and delete it\n      const index = this._cards.findIndex(item => item.id === id);\n      this._cards.splice(index, 1);\n      return [200, true];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Card Positions - PATCH\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPatch('api/apps/scrumboard/board/card/positions').reply(({\n      request\n    }) => {\n      // Get the cards\n      const cards = request.body.cards;\n      // Go through the cards\n      this._cards.forEach(card => {\n        // Find this card's index within the cards array that comes with the request\n        // and assign that index as the new position number for the card\n        card.position = cards.findIndex(item => item.id === card.id && item.listId === card.listId && item.boardId === card.boardId);\n      });\n      // Clone the cards\n      const updatedCards = cloneDeep(this._cards);\n      return [200, updatedCards];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Labels - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/scrumboard/board/labels').reply(({\n      request\n    }) => {\n      // Get the board id\n      const boardId = request.params.get('boardId');\n      // Filter the labels\n      const labels = this._labels.filter(item => item.boardId === boardId);\n      return [200, cloneDeep(labels)];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Label - PUT\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPut('api/apps/scrumboard/board/label').reply(({\n      request\n    }) => {\n      // Get the label\n      const newLabel = cloneDeep(request.body.label);\n      // Generate a new GUID\n      newLabel.id = FuseMockApiUtils.guid();\n      // Unshift the new label\n      this._labels.unshift(newLabel);\n      return [200, newLabel];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Label - PATCH\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPatch('api/apps/scrumboard/board/label').reply(({\n      request\n    }) => {\n      // Get the id and label\n      const id = request.body.id;\n      const label = cloneDeep(request.body.label);\n      // Prepare the updated label\n      let updatedLabel = null;\n      // Find the label and update it\n      this._labels.forEach((item, index, labels) => {\n        if (item.id === id) {\n          // Update the label\n          labels[index] = assign({}, labels[index], label);\n          // Store the updated label\n          updatedLabel = labels[index];\n        }\n      });\n      return [200, updatedLabel];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Label - DELETE\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onDelete('api/apps/scrumboard/board/label').reply(({\n      request\n    }) => {\n      // Get the id\n      const id = request.params.get('id');\n      // Find the label and delete it\n      const index = this._labels.findIndex(item => item.id === id);\n      this._labels.splice(index, 1);\n      // Get the cards that have the label\n      const cardsWithLabel = this._cards.filter(card => card.labels.indexOf(id) > -1);\n      // Iterate through them and remove the label\n      cardsWithLabel.forEach(card => {\n        card.tags.splice(card.tags.indexOf(id), 1);\n      });\n      return [200, true];\n    });\n  }\n  static #_ = this.ɵfac = function ScrumboardMockApi_Factory(t) {\n    return new (t || ScrumboardMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ScrumboardMockApi,\n    factory: ScrumboardMockApi.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["FuseMockApiUtils","boards","boardsData","cards","cardsData","labels","labelsData","lists","listsData","members","membersData","assign","cloneDeep","ScrumboardMockApi","constructor","_fuseMockApiService","_boards","_cards","_labels","_lists","_members","registerHandlers","onGet","reply","request","map","board","boardMember","find","member","id","params","get","item","filter","boardId","sort","a","b","position","card","cardLabelId","label","forEach","list","index","array","listId","onPost","newList","body","guid","push","onPatch","updatedList","updatedLists","findIndex","onDelete","splice","onPut","newCard","updatedCard","itemLabel","updatedCards","newLabel","unshift","updatedLabel","cardsWithLabel","indexOf","tags","_","i0","ɵɵinject","i1","FuseMockApiService","_2","factory","ɵfac","providedIn"],"sources":["/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/src/app/mock-api/apps/scrumboard/api.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { FuseMockApiService, FuseMockApiUtils } from '@fuse/lib/mock-api';\nimport { boards as boardsData, cards as cardsData, labels as labelsData, lists as listsData, members as membersData } from 'app/mock-api/apps/scrumboard/data';\nimport { assign, cloneDeep } from 'lodash-es';\n\n@Injectable({providedIn: 'root'})\nexport class ScrumboardMockApi\n{\n    // Private\n    private _boards: any[] = boardsData;\n    private _cards: any[] = cardsData;\n    private _labels: any[] = labelsData;\n    private _lists: any[] = listsData;\n    private _members: any[] = membersData;\n\n    /**\n     * Constructor\n     */\n    constructor(private _fuseMockApiService: FuseMockApiService)\n    {\n        // Register Mock API handlers\n        this.registerHandlers();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Register Mock API handlers\n     */\n    registerHandlers(): void\n    {\n        // -----------------------------------------------------------------------------------------------------\n        // @ Boards - GET\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onGet('api/apps/scrumboard/boards')\n            .reply(({request}) =>\n            {\n                // Clone the boards\n                let boards = cloneDeep(this._boards);\n\n                // Go through the boards and inject the members\n                boards = boards.map(board => ({\n                    ...board,\n                    members: board.members.map(boardMember => this._members.find(member => boardMember === member.id)),\n                }));\n\n                return [\n                    200,\n                    boards,\n                ];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Board - GET\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onGet('api/apps/scrumboard/board')\n            .reply(({request}) =>\n            {\n                // Get the id\n                const id = request.params.get('id');\n\n                // Find the board\n                const board = this._boards.find(item => item.id === id);\n\n                // Attach the board lists\n                board.lists = this._lists.filter(item => item.boardId === id).sort((a, b) => a.position - b.position);\n\n                // Grab all cards that belong to this board and attach labels to them\n                let cards = this._cards.filter(item => item.boardId === id);\n                cards = cards.map(card => (\n                    {\n                        ...card,\n                        labels: card.labels.map(cardLabelId => this._labels.find(label => label.id === cardLabelId)),\n                    }\n                ));\n\n                // Attach the board cards into corresponding lists\n                board.lists.forEach((list, index, array) =>\n                {\n                    array[index].cards = cards.filter(item => item.boardId === id && item.listId === list.id).sort((a, b) => a.position - b.position);\n                });\n\n                // Attach the board labels\n                board.labels = this._labels.filter(item => item.boardId === id);\n\n                return [\n                    200,\n                    cloneDeep(board),\n                ];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ List - POST\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPost('api/apps/scrumboard/board/list')\n            .reply(({request}) =>\n            {\n                // Get the list\n                const newList = cloneDeep(request.body.list);\n\n                // Generate a new GUID\n                newList.id = FuseMockApiUtils.guid();\n\n                // Store the new list\n                this._lists.push(newList);\n\n                return [\n                    200,\n                    newList,\n                ];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ List - PATCH\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPatch('api/apps/scrumboard/board/list')\n            .reply(({request}) =>\n            {\n                // Get the list\n                const list = cloneDeep(request.body.list);\n\n                // Prepare the updated list\n                let updatedList = null;\n\n                // Find the list and update it\n                this._lists.forEach((item, index, lists) =>\n                {\n                    if ( item.id === list.id )\n                    {\n                        // Update the list\n                        lists[index] = assign({}, lists[index], list);\n\n                        // Store the updated list\n                        updatedList = lists[index];\n                    }\n                });\n\n                return [\n                    200,\n                    updatedList,\n                ];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Lists - PATCH\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPatch('api/apps/scrumboard/board/lists')\n            .reply(({request}) =>\n            {\n                // Get the lists\n                const lists = cloneDeep(request.body.lists);\n\n                // Prepare the updated lists\n                const updatedLists = [];\n\n                // Go through the lists\n                lists.forEach((item) =>\n                {\n                    // Find the list\n                    const index = this._lists.findIndex(list => item.id === list.id);\n\n                    // Update the list\n                    this._lists[index] = assign({}, this._lists[index], item);\n\n                    // Store in the updated lists\n                    updatedLists.push(item);\n                });\n\n                return [\n                    200,\n                    updatedLists,\n                ];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ List - DELETE\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onDelete('api/apps/scrumboard/board/list')\n            .reply(({request}) =>\n            {\n                // Get the id\n                const id = request.params.get('id');\n\n                // Find the list and delete it\n                const index = this._lists.findIndex(item => item.id === id);\n                this._lists.splice(index, 1);\n\n                // Filter out the cards that belonged to the list to delete them\n                this._cards = this._cards.filter(card => card.listId !== id);\n\n                return [\n                    200,\n                    true,\n                ];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Card - PUT\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPut('api/apps/scrumboard/board/card')\n            .reply(({request}) =>\n            {\n                // Get the card\n                const newCard = cloneDeep(request.body.card);\n\n                // Generate a new GUID\n                newCard.id = FuseMockApiUtils.guid();\n\n                // Unshift the new card\n                this._cards.push(newCard);\n\n                return [\n                    200,\n                    newCard,\n                ];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Card - PATCH\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPatch('api/apps/scrumboard/board/card')\n            .reply(({request}) =>\n            {\n                // Get the id and card\n                const id = request.body.id;\n                const card = cloneDeep(request.body.card);\n\n                // Prepare the updated card\n                let updatedCard = null;\n\n                // Go through the labels and leave only ids of them\n                card.labels = card.labels.map(itemLabel => itemLabel.id);\n\n                // Find the card and update it\n                this._cards.forEach((item, index, cards) =>\n                {\n                    if ( item.id === id )\n                    {\n                        // Update the card\n                        cards[index] = assign({}, cards[index], card);\n\n                        // Store the updated card\n                        updatedCard = cloneDeep(cards[index]);\n                    }\n                });\n\n                // Attach the labels of the card\n                updatedCard.labels = updatedCard.labels.map(cardLabelId => this._labels.find(label => label.id === cardLabelId));\n\n                return [\n                    200,\n                    updatedCard,\n                ];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Cards - PATCH\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPatch('api/apps/scrumboard/board/cards')\n            .reply(({request}) =>\n            {\n                // Get the cards\n                const cards = cloneDeep(request.body.cards);\n\n                // Prepare the updated cards\n                const updatedCards = [];\n\n                // Go through the cards\n                cards.forEach((item) =>\n                {\n                    // Find the card\n                    const index = this._cards.findIndex(card => item.id === card.id);\n\n                    // Go through the labels and leave only ids of them\n                    item.labels = item.labels.map(itemLabel => itemLabel.id);\n\n                    // Update the card\n                    this._cards[index] = assign({}, this._cards[index], item);\n\n                    // Attach the labels of the card\n                    item.labels = item.labels.map(cardLabelId => this._labels.find(label => label.id === cardLabelId));\n\n                    // Store in the updated cards\n                    updatedCards.push(item);\n                });\n\n                return [\n                    200,\n                    updatedCards,\n                ];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Card - DELETE\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onDelete('api/apps/scrumboard/board/card')\n            .reply(({request}) =>\n            {\n                // Get the id\n                const id = request.params.get('id');\n\n                // Find the card and delete it\n                const index = this._cards.findIndex(item => item.id === id);\n                this._cards.splice(index, 1);\n\n                return [\n                    200,\n                    true,\n                ];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Card Positions - PATCH\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPatch('api/apps/scrumboard/board/card/positions')\n            .reply(({request}) =>\n            {\n                // Get the cards\n                const cards = request.body.cards;\n\n                // Go through the cards\n                this._cards.forEach((card) =>\n                {\n                    // Find this card's index within the cards array that comes with the request\n                    // and assign that index as the new position number for the card\n                    card.position = cards.findIndex(item => item.id === card.id && item.listId === card.listId && item.boardId === card.boardId);\n                });\n\n                // Clone the cards\n                const updatedCards = cloneDeep(this._cards);\n\n                return [\n                    200,\n                    updatedCards,\n                ];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Labels - GET\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onGet('api/apps/scrumboard/board/labels')\n            .reply(({request}) =>\n            {\n                // Get the board id\n                const boardId = request.params.get('boardId');\n\n                // Filter the labels\n                const labels = this._labels.filter(item => item.boardId === boardId);\n\n                return [\n                    200,\n                    cloneDeep(labels),\n                ];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Label - PUT\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPut('api/apps/scrumboard/board/label')\n            .reply(({request}) =>\n            {\n                // Get the label\n                const newLabel = cloneDeep(request.body.label);\n\n                // Generate a new GUID\n                newLabel.id = FuseMockApiUtils.guid();\n\n                // Unshift the new label\n                this._labels.unshift(newLabel);\n\n                return [\n                    200,\n                    newLabel,\n                ];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Label - PATCH\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPatch('api/apps/scrumboard/board/label')\n            .reply(({request}) =>\n            {\n                // Get the id and label\n                const id = request.body.id;\n                const label = cloneDeep(request.body.label);\n\n                // Prepare the updated label\n                let updatedLabel = null;\n\n                // Find the label and update it\n                this._labels.forEach((item, index, labels) =>\n                {\n                    if ( item.id === id )\n                    {\n                        // Update the label\n                        labels[index] = assign({}, labels[index], label);\n\n                        // Store the updated label\n                        updatedLabel = labels[index];\n                    }\n                });\n\n                return [\n                    200,\n                    updatedLabel,\n                ];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Label - DELETE\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onDelete('api/apps/scrumboard/board/label')\n            .reply(({request}) =>\n            {\n                // Get the id\n                const id = request.params.get('id');\n\n                // Find the label and delete it\n                const index = this._labels.findIndex(item => item.id === id);\n                this._labels.splice(index, 1);\n\n                // Get the cards that have the label\n                const cardsWithLabel = this._cards.filter(card => card.labels.indexOf(id) > -1);\n\n                // Iterate through them and remove the label\n                cardsWithLabel.forEach((card) =>\n                {\n                    card.tags.splice(card.tags.indexOf(id), 1);\n                });\n\n                return [\n                    200,\n                    true,\n                ];\n            });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}