{"ast":null,"code":"export class FuseValidators {\n  /**\n   * Check for empty (optional fields) values\n   *\n   * @param value\n   */\n  static isEmptyInputValue(value) {\n    return value == null || value.length === 0;\n  }\n  /**\n   * Must match validator\n   *\n   * @param controlPath A dot-delimited string values that define the path to the control.\n   * @param matchingControlPath A dot-delimited string values that define the path to the matching control.\n   */\n  static mustMatch(controlPath, matchingControlPath) {\n    return formGroup => {\n      // Get the control and matching control\n      const control = formGroup.get(controlPath);\n      const matchingControl = formGroup.get(matchingControlPath);\n      // Return if control or matching control doesn't exist\n      if (!control || !matchingControl) {\n        return null;\n      }\n      // Delete the mustMatch error to reset the error on the matching control\n      if (matchingControl.hasError('mustMatch')) {\n        delete matchingControl.errors.mustMatch;\n        matchingControl.updateValueAndValidity();\n      }\n      // Don't validate empty values on the matching control\n      // Don't validate if values are matching\n      if (this.isEmptyInputValue(matchingControl.value) || control.value === matchingControl.value) {\n        return null;\n      }\n      // Prepare the validation errors\n      const errors = {\n        mustMatch: true\n      };\n      // Set the validation error on the matching control\n      matchingControl.setErrors(errors);\n      // Return the errors\n      return errors;\n    };\n  }\n}","map":{"version":3,"names":["FuseValidators","isEmptyInputValue","value","length","mustMatch","controlPath","matchingControlPath","formGroup","control","get","matchingControl","hasError","errors","updateValueAndValidity","setErrors"],"sources":["/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/src/@fuse/validators/validators.ts"],"sourcesContent":["import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\n\nexport class FuseValidators\n{\n    /**\n     * Check for empty (optional fields) values\n     *\n     * @param value\n     */\n    static isEmptyInputValue(value: any): boolean\n    {\n        return value == null || value.length === 0;\n    }\n\n    /**\n     * Must match validator\n     *\n     * @param controlPath A dot-delimited string values that define the path to the control.\n     * @param matchingControlPath A dot-delimited string values that define the path to the matching control.\n     */\n    static mustMatch(controlPath: string, matchingControlPath: string): ValidatorFn\n    {\n        return (formGroup: AbstractControl): ValidationErrors | null =>\n        {\n            // Get the control and matching control\n            const control = formGroup.get(controlPath);\n            const matchingControl = formGroup.get(matchingControlPath);\n\n            // Return if control or matching control doesn't exist\n            if ( !control || !matchingControl )\n            {\n                return null;\n            }\n\n            // Delete the mustMatch error to reset the error on the matching control\n            if ( matchingControl.hasError('mustMatch') )\n            {\n                delete matchingControl.errors.mustMatch;\n                matchingControl.updateValueAndValidity();\n            }\n\n            // Don't validate empty values on the matching control\n            // Don't validate if values are matching\n            if ( this.isEmptyInputValue(matchingControl.value) || control.value === matchingControl.value )\n            {\n                return null;\n            }\n\n            // Prepare the validation errors\n            const errors = {mustMatch: true};\n\n            // Set the validation error on the matching control\n            matchingControl.setErrors(errors);\n\n            // Return the errors\n            return errors;\n        };\n    }\n}\n"],"mappings":"AAEA,OAAM,MAAOA,cAAc;EAEvB;;;;;EAKA,OAAOC,iBAAiBA,CAACC,KAAU;IAE/B,OAAOA,KAAK,IAAI,IAAI,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC;EAC9C;EAEA;;;;;;EAMA,OAAOC,SAASA,CAACC,WAAmB,EAAEC,mBAA2B;IAE7D,OAAQC,SAA0B,IAA6B;MAE3D;MACA,MAAMC,OAAO,GAAGD,SAAS,CAACE,GAAG,CAACJ,WAAW,CAAC;MAC1C,MAAMK,eAAe,GAAGH,SAAS,CAACE,GAAG,CAACH,mBAAmB,CAAC;MAE1D;MACA,IAAK,CAACE,OAAO,IAAI,CAACE,eAAe,EACjC;QACI,OAAO,IAAI;;MAGf;MACA,IAAKA,eAAe,CAACC,QAAQ,CAAC,WAAW,CAAC,EAC1C;QACI,OAAOD,eAAe,CAACE,MAAM,CAACR,SAAS;QACvCM,eAAe,CAACG,sBAAsB,EAAE;;MAG5C;MACA;MACA,IAAK,IAAI,CAACZ,iBAAiB,CAACS,eAAe,CAACR,KAAK,CAAC,IAAIM,OAAO,CAACN,KAAK,KAAKQ,eAAe,CAACR,KAAK,EAC7F;QACI,OAAO,IAAI;;MAGf;MACA,MAAMU,MAAM,GAAG;QAACR,SAAS,EAAE;MAAI,CAAC;MAEhC;MACAM,eAAe,CAACI,SAAS,CAACF,MAAM,CAAC;MAEjC;MACA,OAAOA,MAAM;IACjB,CAAC;EACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}