{"ast":null,"code":"import { faqCategories as faqCategoriesData, faqs as faqsData, guideCategories as guideCategoriesData, guideContent as guideContentData, guides as guidesData } from 'app/mock-api/apps/help-center/data';\nimport { cloneDeep } from 'lodash-es';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nexport class HelpCenterMockApi {\n  /**\n   * Constructor\n   */\n  constructor(_fuseMockApiService) {\n    this._fuseMockApiService = _fuseMockApiService;\n    this._faqCategories = faqCategoriesData;\n    this._faqs = faqsData;\n    this._guideCategories = guideCategoriesData;\n    this._guides = guidesData;\n    this._guideContent = guideContentData;\n    // Register Mock API handlers\n    this.registerHandlers();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Register Mock API handlers\n   */\n  registerHandlers() {\n    // -----------------------------------------------------------------------------------------------------\n    // @ FAQs - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/help-center/faqs').reply(({\n      request\n    }) => {\n      // Get the category slug\n      const slug = request.params.get('slug');\n      // Prepare the results\n      const results = [];\n      // Get FAQs\n      const faqs = cloneDeep(this._faqs);\n      // Get FAQ Categories\n      const categories = cloneDeep(this._faqCategories);\n      // If slug is not provided...\n      if (!slug) {\n        // Go through each category and set the results\n        categories.forEach(category => {\n          results.push({\n            ...category,\n            faqs: faqs.filter(faq => faq.categoryId === category.id)\n          });\n        });\n      }\n      // Otherwise...\n      else {\n        // Find the category by the slug\n        const category = categories.find(item => item.slug === slug);\n        // Set the results\n        results.push({\n          ...category,\n          faqs: faqs.filter(faq => faq.categoryId === category.id)\n        });\n      }\n      // Return the response\n      return [200, results];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Guides - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/help-center/guides').reply(({\n      request\n    }) => {\n      // Get the slug & limit\n      const slug = request.params.get('slug');\n      const limit = request.params.get('limit');\n      // Prepare the results\n      const results = [];\n      // Get all Guides\n      const guides = cloneDeep(this._guides);\n      // Get Guide categories\n      const categories = cloneDeep(this._guideCategories);\n      // If slug is not provided...\n      if (!slug) {\n        // Parse the limit as an integer\n        const limitNum = parseInt(limit ?? '5', 10);\n        // Go through each category and set the results\n        categories.forEach(category => {\n          results.push({\n            ...category,\n            visibleGuides: limitNum,\n            totalGuides: guides.filter(guide => guide.categoryId === category.id).length,\n            guides: guides.filter(guide => guide.categoryId === category.id).slice(0, limitNum)\n          });\n        });\n      }\n      // Otherwise...\n      else {\n        // Find the category by the slug\n        const category = categories.find(item => item.slug === slug);\n        // Set the results\n        results.push({\n          ...category,\n          guides: guides.filter(guide => guide.categoryId === category.id)\n        });\n      }\n      // Return the response\n      return [200, results];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Guide - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/help-center/guide').reply(({\n      request\n    }) => {\n      // Get the slugs\n      const categorySlug = request.params.get('categorySlug');\n      const guideSlug = request.params.get('guideSlug');\n      // Get all Guides and Guide Categories\n      const guides = cloneDeep(this._guides);\n      const categories = cloneDeep(this._guideCategories);\n      // Prepare the result\n      const result = {\n        ...categories.find(category => category.slug === categorySlug),\n        guides: [guides.find(guide => guide.slug === guideSlug)]\n      };\n      // Add the content to the guide\n      result.guides[0]['content'] = this._guideContent;\n      // Return the response\n      return [200, result];\n    });\n  }\n  static #_ = this.ɵfac = function HelpCenterMockApi_Factory(t) {\n    return new (t || HelpCenterMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HelpCenterMockApi,\n    factory: HelpCenterMockApi.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["faqCategories","faqCategoriesData","faqs","faqsData","guideCategories","guideCategoriesData","guideContent","guideContentData","guides","guidesData","cloneDeep","HelpCenterMockApi","constructor","_fuseMockApiService","_faqCategories","_faqs","_guideCategories","_guides","_guideContent","registerHandlers","onGet","reply","request","slug","params","get","results","categories","forEach","category","push","filter","faq","categoryId","id","find","item","limit","limitNum","parseInt","visibleGuides","totalGuides","guide","length","slice","categorySlug","guideSlug","result","_","i0","ɵɵinject","i1","FuseMockApiService","_2","factory","ɵfac","providedIn"],"sources":["/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/src/app/mock-api/apps/help-center/api.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { FuseMockApiService } from '@fuse/lib/mock-api';\nimport { faqCategories as faqCategoriesData, faqs as faqsData, guideCategories as guideCategoriesData, guideContent as guideContentData, guides as guidesData } from 'app/mock-api/apps/help-center/data';\nimport { cloneDeep } from 'lodash-es';\n\n@Injectable({providedIn: 'root'})\nexport class HelpCenterMockApi\n{\n    private _faqCategories: any[] = faqCategoriesData;\n    private _faqs: any[] = faqsData;\n    private _guideCategories: any[] = guideCategoriesData;\n    private _guides: any[] = guidesData;\n    private _guideContent: string = guideContentData;\n\n    /**\n     * Constructor\n     */\n    constructor(private _fuseMockApiService: FuseMockApiService)\n    {\n        // Register Mock API handlers\n        this.registerHandlers();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Register Mock API handlers\n     */\n    registerHandlers(): void\n    {\n        // -----------------------------------------------------------------------------------------------------\n        // @ FAQs - GET\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onGet('api/apps/help-center/faqs')\n            .reply(({request}) =>\n            {\n                // Get the category slug\n                const slug = request.params.get('slug');\n\n                // Prepare the results\n                const results = [];\n\n                // Get FAQs\n                const faqs = cloneDeep(this._faqs);\n\n                // Get FAQ Categories\n                const categories = cloneDeep(this._faqCategories);\n\n                // If slug is not provided...\n                if ( !slug )\n                {\n                    // Go through each category and set the results\n                    categories.forEach((category) =>\n                    {\n                        results.push(\n                            {\n                                ...category,\n                                faqs: faqs.filter(faq => faq.categoryId === category.id),\n                            },\n                        );\n                    });\n                }\n                // Otherwise...\n                else\n                {\n                    // Find the category by the slug\n                    const category = categories.find(item => item.slug === slug);\n\n                    // Set the results\n                    results.push(\n                        {\n                            ...category,\n                            faqs: faqs.filter(faq => faq.categoryId === category.id),\n                        },\n                    );\n                }\n\n                // Return the response\n                return [200, results];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Guides - GET\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onGet('api/apps/help-center/guides')\n            .reply(({request}) =>\n            {\n                // Get the slug & limit\n                const slug = request.params.get('slug');\n                const limit = request.params.get('limit');\n\n                // Prepare the results\n                const results = [];\n\n                // Get all Guides\n                const guides = cloneDeep(this._guides);\n\n                // Get Guide categories\n                const categories = cloneDeep(this._guideCategories);\n\n                // If slug is not provided...\n                if ( !slug )\n                {\n                    // Parse the limit as an integer\n                    const limitNum = parseInt(limit ?? '5', 10);\n\n                    // Go through each category and set the results\n                    categories.forEach((category) =>\n                    {\n                        results.push(\n                            {\n                                ...category,\n                                visibleGuides: limitNum,\n                                totalGuides  : guides.filter(guide => guide.categoryId === category.id).length,\n                                guides       : guides.filter(guide => guide.categoryId === category.id).slice(0, limitNum),\n                            },\n                        );\n                    });\n                }\n                // Otherwise...\n                else\n                {\n                    // Find the category by the slug\n                    const category = categories.find(item => item.slug === slug);\n\n                    // Set the results\n                    results.push(\n                        {\n                            ...category,\n                            guides: guides.filter(guide => guide.categoryId === category.id),\n                        },\n                    );\n                }\n\n                // Return the response\n                return [200, results];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Guide - GET\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onGet('api/apps/help-center/guide')\n            .reply(({request}) =>\n            {\n                // Get the slugs\n                const categorySlug = request.params.get('categorySlug');\n                const guideSlug = request.params.get('guideSlug');\n\n                // Get all Guides and Guide Categories\n                const guides = cloneDeep(this._guides);\n                const categories = cloneDeep(this._guideCategories);\n\n                // Prepare the result\n                const result = {\n                    ...categories.find(category => category.slug === categorySlug),\n                    guides: [guides.find(guide => guide.slug === guideSlug)],\n                };\n\n                // Add the content to the guide\n                result.guides[0]['content'] = this._guideContent;\n\n                // Return the response\n                return [200, result];\n            });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}