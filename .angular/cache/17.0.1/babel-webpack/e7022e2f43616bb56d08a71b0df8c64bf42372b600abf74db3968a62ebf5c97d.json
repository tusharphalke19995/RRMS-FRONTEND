{"ast":null,"code":"import { fromPairs } from 'lodash-es';\nimport { map, ReplaySubject, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/layout\";\nimport * as i2 from \"@fuse/services/config\";\nexport class FuseMediaWatcherService {\n  /**\n   * Constructor\n   */\n  constructor(_breakpointObserver, _fuseConfigService) {\n    this._breakpointObserver = _breakpointObserver;\n    this._fuseConfigService = _fuseConfigService;\n    this._onMediaChange = new ReplaySubject(1);\n    this._fuseConfigService.config$.pipe(map(config => fromPairs(Object.entries(config.screens).map(([alias, screen]) => [alias, `(min-width: ${screen})`]))), switchMap(screens => this._breakpointObserver.observe(Object.values(screens)).pipe(map(state => {\n      // Prepare the observable values and set their defaults\n      const matchingAliases = [];\n      const matchingQueries = {};\n      // Get the matching breakpoints and use them to fill the subject\n      const matchingBreakpoints = Object.entries(state.breakpoints).filter(([query, matches]) => matches) ?? [];\n      for (const [query] of matchingBreakpoints) {\n        // Find the alias of the matching query\n        const matchingAlias = Object.entries(screens).find(([alias, q]) => q === query)[0];\n        // Add the matching query to the observable values\n        if (matchingAlias) {\n          matchingAliases.push(matchingAlias);\n          matchingQueries[matchingAlias] = query;\n        }\n      }\n      // Execute the observable\n      this._onMediaChange.next({\n        matchingAliases,\n        matchingQueries\n      });\n    })))).subscribe();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Accessors\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Getter for _onMediaChange\n   */\n  get onMediaChange$() {\n    return this._onMediaChange.asObservable();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * On media query change\n   *\n   * @param query\n   */\n  onMediaQueryChange$(query) {\n    return this._breakpointObserver.observe(query);\n  }\n  static #_ = this.ɵfac = function FuseMediaWatcherService_Factory(t) {\n    return new (t || FuseMediaWatcherService)(i0.ɵɵinject(i1.BreakpointObserver), i0.ɵɵinject(i2.FuseConfigService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FuseMediaWatcherService,\n    factory: FuseMediaWatcherService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["fromPairs","map","ReplaySubject","switchMap","FuseMediaWatcherService","constructor","_breakpointObserver","_fuseConfigService","_onMediaChange","config$","pipe","config","Object","entries","screens","alias","screen","observe","values","state","matchingAliases","matchingQueries","matchingBreakpoints","breakpoints","filter","query","matches","matchingAlias","find","q","push","next","subscribe","onMediaChange$","asObservable","onMediaQueryChange$","_","i0","ɵɵinject","i1","BreakpointObserver","i2","FuseConfigService","_2","factory","ɵfac","providedIn"],"sources":["/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/src/@fuse/services/media-watcher/media-watcher.service.ts"],"sourcesContent":["import { BreakpointObserver, BreakpointState } from '@angular/cdk/layout';\nimport { Injectable } from '@angular/core';\nimport { FuseConfigService } from '@fuse/services/config';\nimport { fromPairs } from 'lodash-es';\nimport { map, Observable, ReplaySubject, switchMap } from 'rxjs';\n\n@Injectable({providedIn: 'root'})\nexport class FuseMediaWatcherService\n{\n    private _onMediaChange: ReplaySubject<{ matchingAliases: string[]; matchingQueries: any }> = new ReplaySubject<{ matchingAliases: string[]; matchingQueries: any }>(1);\n\n    /**\n     * Constructor\n     */\n    constructor(\n        private _breakpointObserver: BreakpointObserver,\n        private _fuseConfigService: FuseConfigService,\n    )\n    {\n        this._fuseConfigService.config$.pipe(\n            map(config => fromPairs(Object.entries(config.screens).map(([alias, screen]) => ([alias, `(min-width: ${screen})`])))),\n            switchMap(screens => this._breakpointObserver.observe(Object.values(screens)).pipe(\n                map((state) =>\n                {\n                    // Prepare the observable values and set their defaults\n                    const matchingAliases: string[] = [];\n                    const matchingQueries: any = {};\n\n                    // Get the matching breakpoints and use them to fill the subject\n                    const matchingBreakpoints = Object.entries(state.breakpoints).filter(([query, matches]) => matches) ?? [];\n                    for ( const [query] of matchingBreakpoints )\n                    {\n                        // Find the alias of the matching query\n                        const matchingAlias = Object.entries(screens).find(([alias, q]) => q === query)[0];\n\n                        // Add the matching query to the observable values\n                        if ( matchingAlias )\n                        {\n                            matchingAliases.push(matchingAlias);\n                            matchingQueries[matchingAlias] = query;\n                        }\n                    }\n\n                    // Execute the observable\n                    this._onMediaChange.next({\n                        matchingAliases,\n                        matchingQueries,\n                    });\n                }),\n            )),\n        ).subscribe();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Getter for _onMediaChange\n     */\n    get onMediaChange$(): Observable<{ matchingAliases: string[]; matchingQueries: any }>\n    {\n        return this._onMediaChange.asObservable();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On media query change\n     *\n     * @param query\n     */\n    onMediaQueryChange$(query: string | string[]): Observable<BreakpointState>\n    {\n        return this._breakpointObserver.observe(query);\n    }\n}\n"],"mappings":"AAGA,SAASA,SAAS,QAAQ,WAAW;AACrC,SAASC,GAAG,EAAcC,aAAa,EAAEC,SAAS,QAAQ,MAAM;;;;AAGhE,OAAM,MAAOC,uBAAuB;EAIhC;;;EAGAC,YACYC,mBAAuC,EACvCC,kBAAqC;IADrC,KAAAD,mBAAmB,GAAnBA,mBAAmB;IACnB,KAAAC,kBAAkB,GAAlBA,kBAAkB;IAPtB,KAAAC,cAAc,GAAuE,IAAIN,aAAa,CAAsD,CAAC,CAAC;IAUlK,IAAI,CAACK,kBAAkB,CAACE,OAAO,CAACC,IAAI,CAChCT,GAAG,CAACU,MAAM,IAAIX,SAAS,CAACY,MAAM,CAACC,OAAO,CAACF,MAAM,CAACG,OAAO,CAAC,CAACb,GAAG,CAAC,CAAC,CAACc,KAAK,EAAEC,MAAM,CAAC,KAAM,CAACD,KAAK,EAAE,eAAeC,MAAM,GAAG,CAAE,CAAC,CAAC,CAAC,EACtHb,SAAS,CAACW,OAAO,IAAI,IAAI,CAACR,mBAAmB,CAACW,OAAO,CAACL,MAAM,CAACM,MAAM,CAACJ,OAAO,CAAC,CAAC,CAACJ,IAAI,CAC9ET,GAAG,CAAEkB,KAAK,IAAI;MAEV;MACA,MAAMC,eAAe,GAAa,EAAE;MACpC,MAAMC,eAAe,GAAQ,EAAE;MAE/B;MACA,MAAMC,mBAAmB,GAAGV,MAAM,CAACC,OAAO,CAACM,KAAK,CAACI,WAAW,CAAC,CAACC,MAAM,CAAC,CAAC,CAACC,KAAK,EAAEC,OAAO,CAAC,KAAKA,OAAO,CAAC,IAAI,EAAE;MACzG,KAAM,MAAM,CAACD,KAAK,CAAC,IAAIH,mBAAmB,EAC1C;QACI;QACA,MAAMK,aAAa,GAAGf,MAAM,CAACC,OAAO,CAACC,OAAO,CAAC,CAACc,IAAI,CAAC,CAAC,CAACb,KAAK,EAAEc,CAAC,CAAC,KAAKA,CAAC,KAAKJ,KAAK,CAAC,CAAC,CAAC,CAAC;QAElF;QACA,IAAKE,aAAa,EAClB;UACIP,eAAe,CAACU,IAAI,CAACH,aAAa,CAAC;UACnCN,eAAe,CAACM,aAAa,CAAC,GAAGF,KAAK;;;MAI9C;MACA,IAAI,CAACjB,cAAc,CAACuB,IAAI,CAAC;QACrBX,eAAe;QACfC;OACH,CAAC;IACN,CAAC,CAAC,CACL,CAAC,CACL,CAACW,SAAS,EAAE;EACjB;EAEA;EACA;EACA;EAEA;;;EAGA,IAAIC,cAAcA,CAAA;IAEd,OAAO,IAAI,CAACzB,cAAc,CAAC0B,YAAY,EAAE;EAC7C;EAEA;EACA;EACA;EAEA;;;;;EAKAC,mBAAmBA,CAACV,KAAwB;IAExC,OAAO,IAAI,CAACnB,mBAAmB,CAACW,OAAO,CAACQ,KAAK,CAAC;EAClD;EAAC,QAAAW,CAAA,G;qBAtEQhC,uBAAuB,EAAAiC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,kBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,iBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAvBvC,uBAAuB;IAAAwC,OAAA,EAAvBxC,uBAAuB,CAAAyC,IAAA;IAAAC,UAAA,EADX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}