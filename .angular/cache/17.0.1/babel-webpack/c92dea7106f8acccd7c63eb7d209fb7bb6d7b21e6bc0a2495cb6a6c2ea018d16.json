{"ast":null,"code":"import { user as userData } from 'app/mock-api/common/user/data';\nimport Base64 from 'crypto-js/enc-base64';\nimport Utf8 from 'crypto-js/enc-utf8';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\nimport { cloneDeep } from 'lodash-es';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nexport class AuthMockApi {\n  /**\n   * Constructor\n   */\n  constructor(_fuseMockApiService) {\n    this._fuseMockApiService = _fuseMockApiService;\n    this._user = userData;\n    // Set the mock-api\n    this._secret = 'YOUR_VERY_CONFIDENTIAL_SECRET_FOR_SIGNING_JWT_TOKENS!!!';\n    // Register Mock API handlers\n    this.registerHandlers();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Register Mock API handlers\n   */\n  registerHandlers() {\n    // -----------------------------------------------------------------------------------------------------\n    // @ Forgot password - POST\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPost('api/auth/forgot-password', 1000).reply(() => [200, true]);\n    // -----------------------------------------------------------------------------------------------------\n    // @ Reset password - POST\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPost('api/auth/reset-password', 1000).reply(() => [200, true]);\n    // -----------------------------------------------------------------------------------------------------\n    // @ Sign in - POST\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPost('api/auth/sign-in', 1500).reply(({\n      request\n    }) => {\n      // Sign in successful\n      if (request.body.email === 'hughes.brian@company.com' && request.body.password === 'admin') {\n        return [200, {\n          user: cloneDeep(this._user),\n          accessToken: this._generateJWTToken(),\n          tokenType: 'bearer'\n        }];\n      }\n      // Invalid credentials\n      return [404, false];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Sign in using the access token - POST\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPost('api/auth/sign-in-with-token').reply(({\n      request\n    }) => {\n      // Get the access token\n      const accessToken = request.body.accessToken;\n      // Verify the token\n      if (this._verifyJWTToken(accessToken)) {\n        return [200, {\n          user: cloneDeep(this._user),\n          accessToken: this._generateJWTToken(),\n          tokenType: 'bearer'\n        }];\n      }\n      // Invalid token\n      return [401, {\n        error: 'Invalid token'\n      }];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Sign up - POST\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPost('api/auth/sign-up', 1500).reply(() =>\n    // Simply return true\n    [200, true]);\n    // -----------------------------------------------------------------------------------------------------\n    // @ Unlock session - POST\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPost('api/auth/unlock-session', 1500).reply(({\n      request\n    }) => {\n      // Sign in successful\n      if (request.body.email === 'hughes.brian@company.com' && request.body.password === 'admin') {\n        return [200, {\n          user: cloneDeep(this._user),\n          accessToken: this._generateJWTToken(),\n          tokenType: 'bearer'\n        }];\n      }\n      // Invalid credentials\n      return [404, false];\n    });\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Private methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Return base64 encoded version of the given string\n   *\n   * @param source\n   * @private\n   */\n  _base64url(source) {\n    // Encode in classical base64\n    let encodedSource = Base64.stringify(source);\n    // Remove padding equal characters\n    encodedSource = encodedSource.replace(/=+$/, '');\n    // Replace characters according to base64url specifications\n    encodedSource = encodedSource.replace(/\\+/g, '-');\n    encodedSource = encodedSource.replace(/\\//g, '_');\n    // Return the base64 encoded string\n    return encodedSource;\n  }\n  /**\n   * Generates a JWT token using CryptoJS library.\n   *\n   * This generator is for mocking purposes only and it is NOT\n   * safe to use it in production frontend applications!\n   *\n   * @private\n   */\n  _generateJWTToken() {\n    // Define token header\n    const header = {\n      alg: 'HS256',\n      typ: 'JWT'\n    };\n    // Calculate the issued at and expiration dates\n    const date = new Date();\n    const iat = Math.floor(date.getTime() / 1000);\n    const exp = Math.floor(date.setDate(date.getDate() + 7) / 1000);\n    // Define token payload\n    const payload = {\n      iat: iat,\n      iss: 'Fuse',\n      exp: exp\n    };\n    // Stringify and encode the header\n    const stringifiedHeader = Utf8.parse(JSON.stringify(header));\n    const encodedHeader = this._base64url(stringifiedHeader);\n    // Stringify and encode the payload\n    const stringifiedPayload = Utf8.parse(JSON.stringify(payload));\n    const encodedPayload = this._base64url(stringifiedPayload);\n    // Sign the encoded header and mock-api\n    let signature = encodedHeader + '.' + encodedPayload;\n    signature = HmacSHA256(signature, this._secret);\n    signature = this._base64url(signature);\n    // Build and return the token\n    return encodedHeader + '.' + encodedPayload + '.' + signature;\n  }\n  /**\n   * Verify the given token\n   *\n   * @param token\n   * @private\n   */\n  _verifyJWTToken(token) {\n    // Split the token into parts\n    const parts = token.split('.');\n    const header = parts[0];\n    const payload = parts[1];\n    const signature = parts[2];\n    // Re-sign and encode the header and payload using the secret\n    const signatureCheck = this._base64url(HmacSHA256(header + '.' + payload, this._secret));\n    // Verify that the resulting signature is valid\n    return signature === signatureCheck;\n  }\n  static #_ = this.ɵfac = function AuthMockApi_Factory(t) {\n    return new (t || AuthMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthMockApi,\n    factory: AuthMockApi.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["user","userData","Base64","Utf8","HmacSHA256","cloneDeep","AuthMockApi","constructor","_fuseMockApiService","_user","_secret","registerHandlers","onPost","reply","request","body","email","password","accessToken","_generateJWTToken","tokenType","_verifyJWTToken","error","_base64url","source","encodedSource","stringify","replace","header","alg","typ","date","Date","iat","Math","floor","getTime","exp","setDate","getDate","payload","iss","stringifiedHeader","parse","JSON","encodedHeader","stringifiedPayload","encodedPayload","signature","token","parts","split","signatureCheck","_","i0","ɵɵinject","i1","FuseMockApiService","_2","factory","ɵfac","providedIn"],"sources":["/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/src/app/mock-api/common/auth/api.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { FuseMockApiService } from '@fuse/lib/mock-api';\nimport { user as userData } from 'app/mock-api/common/user/data';\nimport Base64 from 'crypto-js/enc-base64';\nimport Utf8 from 'crypto-js/enc-utf8';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\nimport { cloneDeep } from 'lodash-es';\n\n@Injectable({providedIn: 'root'})\nexport class AuthMockApi\n{\n    private readonly _secret: any;\n    private _user: any = userData;\n\n    /**\n     * Constructor\n     */\n    constructor(private _fuseMockApiService: FuseMockApiService)\n    {\n        // Set the mock-api\n        this._secret = 'YOUR_VERY_CONFIDENTIAL_SECRET_FOR_SIGNING_JWT_TOKENS!!!';\n\n        // Register Mock API handlers\n        this.registerHandlers();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Register Mock API handlers\n     */\n    registerHandlers(): void\n    {\n        // -----------------------------------------------------------------------------------------------------\n        // @ Forgot password - POST\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPost('api/auth/forgot-password', 1000)\n            .reply(() =>\n                [\n                    200,\n                    true,\n                ],\n            );\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Reset password - POST\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPost('api/auth/reset-password', 1000)\n            .reply(() =>\n                [\n                    200,\n                    true,\n                ],\n            );\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Sign in - POST\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPost('api/auth/sign-in', 1500)\n            .reply(({request}) =>\n            {\n                // Sign in successful\n                if ( request.body.email === 'hughes.brian@company.com' && request.body.password === 'admin' )\n                {\n                    return [\n                        200,\n                        {\n                            user       : cloneDeep(this._user),\n                            accessToken: this._generateJWTToken(),\n                            tokenType  : 'bearer',\n                        },\n                    ];\n                }\n\n                // Invalid credentials\n                return [\n                    404,\n                    false,\n                ];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Sign in using the access token - POST\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPost('api/auth/sign-in-with-token')\n            .reply(({request}) =>\n            {\n                // Get the access token\n                const accessToken = request.body.accessToken;\n\n                // Verify the token\n                if ( this._verifyJWTToken(accessToken) )\n                {\n                    return [\n                        200,\n                        {\n                            user       : cloneDeep(this._user),\n                            accessToken: this._generateJWTToken(),\n                            tokenType  : 'bearer',\n                        },\n                    ];\n                }\n\n                // Invalid token\n                return [\n                    401,\n                    {\n                        error: 'Invalid token',\n                    },\n                ];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Sign up - POST\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPost('api/auth/sign-up', 1500)\n            .reply(() =>\n\n                // Simply return true\n                [\n                    200,\n                    true,\n                ],\n            );\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Unlock session - POST\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPost('api/auth/unlock-session', 1500)\n            .reply(({request}) =>\n            {\n                // Sign in successful\n                if ( request.body.email === 'hughes.brian@company.com' && request.body.password === 'admin' )\n                {\n                    return [\n                        200,\n                        {\n                            user       : cloneDeep(this._user),\n                            accessToken: this._generateJWTToken(),\n                            tokenType  : 'bearer',\n                        },\n                    ];\n                }\n\n                // Invalid credentials\n                return [\n                    404,\n                    false,\n                ];\n            });\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Private methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Return base64 encoded version of the given string\n     *\n     * @param source\n     * @private\n     */\n    private _base64url(source: any): string\n    {\n        // Encode in classical base64\n        let encodedSource = Base64.stringify(source);\n\n        // Remove padding equal characters\n        encodedSource = encodedSource.replace(/=+$/, '');\n\n        // Replace characters according to base64url specifications\n        encodedSource = encodedSource.replace(/\\+/g, '-');\n        encodedSource = encodedSource.replace(/\\//g, '_');\n\n        // Return the base64 encoded string\n        return encodedSource;\n    }\n\n    /**\n     * Generates a JWT token using CryptoJS library.\n     *\n     * This generator is for mocking purposes only and it is NOT\n     * safe to use it in production frontend applications!\n     *\n     * @private\n     */\n    private _generateJWTToken(): string\n    {\n        // Define token header\n        const header = {\n            alg: 'HS256',\n            typ: 'JWT',\n        };\n\n        // Calculate the issued at and expiration dates\n        const date = new Date();\n        const iat = Math.floor(date.getTime() / 1000);\n        const exp = Math.floor((date.setDate(date.getDate() + 7)) / 1000);\n\n        // Define token payload\n        const payload = {\n            iat: iat,\n            iss: 'Fuse',\n            exp: exp,\n        };\n\n        // Stringify and encode the header\n        const stringifiedHeader = Utf8.parse(JSON.stringify(header));\n        const encodedHeader = this._base64url(stringifiedHeader);\n\n        // Stringify and encode the payload\n        const stringifiedPayload = Utf8.parse(JSON.stringify(payload));\n        const encodedPayload = this._base64url(stringifiedPayload);\n\n        // Sign the encoded header and mock-api\n        let signature: any = encodedHeader + '.' + encodedPayload;\n        signature = HmacSHA256(signature, this._secret);\n        signature = this._base64url(signature);\n\n        // Build and return the token\n        return encodedHeader + '.' + encodedPayload + '.' + signature;\n    }\n\n    /**\n     * Verify the given token\n     *\n     * @param token\n     * @private\n     */\n    private _verifyJWTToken(token: string): boolean\n    {\n        // Split the token into parts\n        const parts = token.split('.');\n        const header = parts[0];\n        const payload = parts[1];\n        const signature = parts[2];\n\n        // Re-sign and encode the header and payload using the secret\n        const signatureCheck = this._base64url(HmacSHA256(header + '.' + payload, this._secret));\n\n        // Verify that the resulting signature is valid\n        return (signature === signatureCheck);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}