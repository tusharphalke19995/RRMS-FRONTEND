{"ast":null,"code":"import { FuseMockApiUtils } from '@fuse/lib/mock-api';\nimport { labels as labelsData, notes as notesData } from 'app/mock-api/apps/notes/data';\nimport { cloneDeep } from 'lodash-es';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api/mock-api.service\";\nexport class NotesMockApi {\n  /**\n   * Constructor\n   */\n  constructor(_fuseMockApiService) {\n    this._fuseMockApiService = _fuseMockApiService;\n    this._labels = labelsData;\n    this._notes = notesData;\n    // Register Mock API handlers\n    this.registerHandlers();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Register Mock API handlers\n   */\n  registerHandlers() {\n    // -----------------------------------------------------------------------------------------------------\n    // @ Labels - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/notes/labels').reply(() => [200, cloneDeep(this._labels)]);\n    // -----------------------------------------------------------------------------------------------------\n    // @ Labels - POST\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPost('api/apps/notes/labels').reply(({\n      request\n    }) => {\n      // Create a new label\n      const label = {\n        id: FuseMockApiUtils.guid(),\n        title: request.body.title\n      };\n      // Update the labels\n      this._labels.push(label);\n      return [200, cloneDeep(this._labels)];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Labels - PATCH\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPatch('api/apps/notes/labels').reply(({\n      request\n    }) => {\n      // Get label\n      const updatedLabel = request.body.label;\n      // Update the label\n      this._labels = this._labels.map(label => {\n        if (label.id === updatedLabel.id) {\n          return {\n            ...label,\n            title: updatedLabel.title\n          };\n        }\n        return label;\n      });\n      return [200, cloneDeep(this._labels)];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Labels - DELETE\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onDelete('api/apps/notes/labels').reply(({\n      request\n    }) => {\n      // Get label id\n      const id = request.params.get('id');\n      // Delete the label\n      this._labels = this._labels.filter(label => label.id !== id);\n      // Go through notes and delete the label\n      this._notes = this._notes.map(note => ({\n        ...note,\n        labels: note.labels.filter(item => item !== id)\n      }));\n      return [200, cloneDeep(this._labels)];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Note Tasks - POST\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPost('api/apps/notes/tasks').reply(({\n      request\n    }) => {\n      // Get note and task\n      let updatedNote = request.body.note;\n      const task = request.body.task;\n      // Update the note\n      this._notes = this._notes.map(note => {\n        if (note.id === updatedNote.id) {\n          // Update the tasks\n          if (!note.tasks) {\n            note.tasks = [];\n          }\n          note.tasks.push({\n            id: FuseMockApiUtils.guid(),\n            content: task,\n            completed: false\n          });\n          // Update the updatedNote with the new task\n          updatedNote = cloneDeep(note);\n          return {\n            ...note\n          };\n        }\n        return note;\n      });\n      return [200, updatedNote];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Notes - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/notes/all').reply(() => {\n      // Clone the labels and notes\n      const labels = cloneDeep(this._labels);\n      let notes = cloneDeep(this._notes);\n      // Attach the labels to the notes\n      notes = notes.map(note => ({\n        ...note,\n        labels: note.labels.map(labelId => labels.find(label => label.id === labelId))\n      }));\n      return [200, notes];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Notes - POST\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPost('api/apps/notes').reply(({\n      request\n    }) => {\n      // Get note\n      const note = request.body.note;\n      // Add an id\n      note.id = FuseMockApiUtils.guid();\n      // Push the note\n      this._notes.push(note);\n      return [200, note];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Notes - PATCH\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPatch('api/apps/notes').reply(({\n      request\n    }) => {\n      // Get note\n      const updatedNote = request.body.updatedNote;\n      // Update the note\n      this._notes = this._notes.map(note => {\n        if (note.id === updatedNote.id) {\n          return {\n            ...updatedNote\n          };\n        }\n        return note;\n      });\n      return [200, updatedNote];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Notes - DELETE\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onDelete('api/apps/notes').reply(({\n      request\n    }) => {\n      // Get the id\n      const id = request.params.get('id');\n      // Find the note and delete it\n      this._notes.forEach((item, index) => {\n        if (item.id === id) {\n          this._notes.splice(index, 1);\n        }\n      });\n      // Return the response\n      return [200, true];\n    });\n  }\n  static #_ = this.ɵfac = function NotesMockApi_Factory(t) {\n    return new (t || NotesMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotesMockApi,\n    factory: NotesMockApi.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["FuseMockApiUtils","labels","labelsData","notes","notesData","cloneDeep","NotesMockApi","constructor","_fuseMockApiService","_labels","_notes","registerHandlers","onGet","reply","onPost","request","label","id","guid","title","body","push","onPatch","updatedLabel","map","onDelete","params","get","filter","note","item","updatedNote","task","tasks","content","completed","labelId","find","forEach","index","splice","_","i0","ɵɵinject","i1","FuseMockApiService","_2","factory","ɵfac","providedIn"],"sources":["/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/src/app/mock-api/apps/notes/api.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { FuseMockApiUtils } from '@fuse/lib/mock-api';\nimport { FuseMockApiService } from '@fuse/lib/mock-api/mock-api.service';\nimport { labels as labelsData, notes as notesData } from 'app/mock-api/apps/notes/data';\nimport { cloneDeep } from 'lodash-es';\n\n@Injectable({providedIn: 'root'})\nexport class NotesMockApi\n{\n    private _labels: any[] = labelsData;\n    private _notes: any[] = notesData;\n\n    /**\n     * Constructor\n     */\n    constructor(private _fuseMockApiService: FuseMockApiService)\n    {\n        // Register Mock API handlers\n        this.registerHandlers();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Register Mock API handlers\n     */\n    registerHandlers(): void\n    {\n        // -----------------------------------------------------------------------------------------------------\n        // @ Labels - GET\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onGet('api/apps/notes/labels')\n            .reply(() => [\n                200,\n                cloneDeep(this._labels),\n            ]);\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Labels - POST\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPost('api/apps/notes/labels')\n            .reply(({request}) =>\n            {\n                // Create a new label\n                const label = {\n                    id   : FuseMockApiUtils.guid(),\n                    title: request.body.title,\n                };\n\n                // Update the labels\n                this._labels.push(label);\n\n                return [\n                    200,\n                    cloneDeep(this._labels),\n                ];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Labels - PATCH\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPatch('api/apps/notes/labels')\n            .reply(({request}) =>\n            {\n                // Get label\n                const updatedLabel = request.body.label;\n\n                // Update the label\n                this._labels = this._labels.map((label) =>\n                {\n                    if ( label.id === updatedLabel.id )\n                    {\n                        return {\n                            ...label,\n                            title: updatedLabel.title,\n                        };\n                    }\n\n                    return label;\n                });\n\n                return [\n                    200,\n                    cloneDeep(this._labels),\n                ];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Labels - DELETE\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onDelete('api/apps/notes/labels')\n            .reply(({request}) =>\n            {\n                // Get label id\n                const id = request.params.get('id');\n\n                // Delete the label\n                this._labels = this._labels.filter(label => label.id !== id);\n\n                // Go through notes and delete the label\n                this._notes = this._notes.map(note => ({\n                    ...note,\n                    labels: note.labels.filter(item => item !== id),\n                }));\n\n                return [\n                    200,\n                    cloneDeep(this._labels),\n                ];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Note Tasks - POST\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPost('api/apps/notes/tasks')\n            .reply(({request}) =>\n            {\n                // Get note and task\n                let updatedNote = request.body.note;\n                const task = request.body.task;\n\n                // Update the note\n                this._notes = this._notes.map((note) =>\n                {\n                    if ( note.id === updatedNote.id )\n                    {\n                        // Update the tasks\n                        if ( !note.tasks )\n                        {\n                            note.tasks = [];\n                        }\n\n                        note.tasks.push({\n                            id       : FuseMockApiUtils.guid(),\n                            content  : task,\n                            completed: false,\n                        });\n\n                        // Update the updatedNote with the new task\n                        updatedNote = cloneDeep(note);\n\n                        return {\n                            ...note,\n                        };\n                    }\n\n                    return note;\n                });\n\n                return [\n                    200,\n                    updatedNote,\n                ];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Notes - GET\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onGet('api/apps/notes/all')\n            .reply(() =>\n            {\n                // Clone the labels and notes\n                const labels = cloneDeep(this._labels);\n                let notes = cloneDeep(this._notes);\n\n                // Attach the labels to the notes\n                notes = notes.map(note => (\n                    {\n                        ...note,\n                        labels: note.labels.map(labelId => labels.find(label => label.id === labelId)),\n                    }\n                ));\n\n                return [\n                    200,\n                    notes,\n                ];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Notes - POST\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPost('api/apps/notes')\n            .reply(({request}) =>\n            {\n                // Get note\n                const note = request.body.note;\n\n                // Add an id\n                note.id = FuseMockApiUtils.guid();\n\n                // Push the note\n                this._notes.push(note);\n\n                return [\n                    200,\n                    note,\n                ];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Notes - PATCH\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPatch('api/apps/notes')\n            .reply(({request}) =>\n            {\n                // Get note\n                const updatedNote = request.body.updatedNote;\n\n                // Update the note\n                this._notes = this._notes.map((note) =>\n                {\n                    if ( note.id === updatedNote.id )\n                    {\n                        return {\n                            ...updatedNote,\n                        };\n                    }\n\n                    return note;\n                });\n\n                return [\n                    200,\n                    updatedNote,\n                ];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Notes - DELETE\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onDelete('api/apps/notes')\n            .reply(({request}) =>\n            {\n                // Get the id\n                const id = request.params.get('id');\n\n                // Find the note and delete it\n                this._notes.forEach((item, index) =>\n                {\n                    if ( item.id === id )\n                    {\n                        this._notes.splice(index, 1);\n                    }\n                });\n\n                // Return the response\n                return [200, true];\n            });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}