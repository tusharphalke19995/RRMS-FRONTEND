{"ast":null,"code":"import { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'app/core/auth/auth.service';\nimport { of, switchMap } from 'rxjs';\nexport const NoAuthGuard = (route, state) => {\n  const router = inject(Router);\n  // Check the authentication status\n  return inject(AuthService).check().pipe(switchMap(authenticated => {\n    // If the user is authenticated...\n    if (authenticated) {\n      return of(router.parseUrl(''));\n    }\n    // Allow the access\n    return of(true);\n  }));\n};","map":{"version":3,"names":["inject","Router","AuthService","of","switchMap","NoAuthGuard","route","state","router","check","pipe","authenticated","parseUrl"],"sources":["/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/src/app/core/auth/guards/noAuth.guard.ts"],"sourcesContent":["import { inject } from '@angular/core';\nimport { CanActivateChildFn, CanActivateFn, Router } from '@angular/router';\nimport { AuthService } from 'app/core/auth/auth.service';\nimport { of, switchMap } from 'rxjs';\n\nexport const NoAuthGuard: CanActivateFn | CanActivateChildFn = (route, state) =>\n{\n    const router: Router = inject(Router);\n\n    // Check the authentication status\n    return inject(AuthService).check().pipe(\n        switchMap((authenticated) =>\n        {\n            // If the user is authenticated...\n            if ( authenticated )\n            {\n                return of(router.parseUrl(''));\n            }\n\n            // Allow the access\n            return of(true);\n        }),\n    );\n};\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,eAAe;AACtC,SAA4CC,MAAM,QAAQ,iBAAiB;AAC3E,SAASC,WAAW,QAAQ,4BAA4B;AACxD,SAASC,EAAE,EAAEC,SAAS,QAAQ,MAAM;AAEpC,OAAO,MAAMC,WAAW,GAAuCA,CAACC,KAAK,EAAEC,KAAK,KAAI;EAE5E,MAAMC,MAAM,GAAWR,MAAM,CAACC,MAAM,CAAC;EAErC;EACA,OAAOD,MAAM,CAACE,WAAW,CAAC,CAACO,KAAK,EAAE,CAACC,IAAI,CACnCN,SAAS,CAAEO,aAAa,IAAI;IAExB;IACA,IAAKA,aAAa,EAClB;MACI,OAAOR,EAAE,CAACK,MAAM,CAACI,QAAQ,CAAC,EAAE,CAAC,CAAC;;IAGlC;IACA,OAAOT,EAAE,CAAC,IAAI,CAAC;EACnB,CAAC,CAAC,CACL;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}