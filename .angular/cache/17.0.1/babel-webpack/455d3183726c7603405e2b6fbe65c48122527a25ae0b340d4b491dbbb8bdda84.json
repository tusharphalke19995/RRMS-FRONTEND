{"ast":null,"code":"import { provideHttpClient, withInterceptors } from '@angular/common/http';\nimport { APP_INITIALIZER, ENVIRONMENT_INITIALIZER, importProvidersFrom, inject } from '@angular/core';\nimport { MATERIAL_SANITY_CHECKS } from '@angular/material/core';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS } from '@angular/material/form-field';\nimport { FUSE_MOCK_API_DEFAULT_DELAY, mockApiInterceptor } from '@fuse/lib/mock-api';\nimport { FUSE_CONFIG } from '@fuse/services/config/config.constants';\nimport { FuseConfirmationService } from '@fuse/services/confirmation';\nimport { fuseLoadingInterceptor, FuseLoadingService } from '@fuse/services/loading';\nimport { FuseMediaWatcherService } from '@fuse/services/media-watcher';\nimport { FusePlatformService } from '@fuse/services/platform';\nimport { FuseSplashScreenService } from '@fuse/services/splash-screen';\nimport { FuseUtilsService } from '@fuse/services/utils';\n/**\n * Fuse provider\n */\nexport const provideFuse = config => {\n  // Base providers\n  const providers = [{\n    // Disable 'theme' sanity check\n    provide: MATERIAL_SANITY_CHECKS,\n    useValue: {\n      doctype: true,\n      theme: false,\n      version: true\n    }\n  }, {\n    // Use the 'fill' appearance on Angular Material form fields by default\n    provide: MAT_FORM_FIELD_DEFAULT_OPTIONS,\n    useValue: {\n      appearance: 'fill'\n    }\n  }, {\n    provide: FUSE_MOCK_API_DEFAULT_DELAY,\n    useValue: config?.mockApi?.delay ?? 0\n  }, {\n    provide: FUSE_CONFIG,\n    useValue: config?.fuse ?? {}\n  }, importProvidersFrom(MatDialogModule), {\n    provide: ENVIRONMENT_INITIALIZER,\n    useValue: () => inject(FuseConfirmationService),\n    multi: true\n  }, provideHttpClient(withInterceptors([fuseLoadingInterceptor])), {\n    provide: ENVIRONMENT_INITIALIZER,\n    useValue: () => inject(FuseLoadingService),\n    multi: true\n  }, {\n    provide: ENVIRONMENT_INITIALIZER,\n    useValue: () => inject(FuseMediaWatcherService),\n    multi: true\n  }, {\n    provide: ENVIRONMENT_INITIALIZER,\n    useValue: () => inject(FusePlatformService),\n    multi: true\n  }, {\n    provide: ENVIRONMENT_INITIALIZER,\n    useValue: () => inject(FuseSplashScreenService),\n    multi: true\n  }, {\n    provide: ENVIRONMENT_INITIALIZER,\n    useValue: () => inject(FuseUtilsService),\n    multi: true\n  }];\n  // Mock Api services\n  if (config?.mockApi?.services) {\n    providers.push(provideHttpClient(withInterceptors([mockApiInterceptor])), {\n      provide: APP_INITIALIZER,\n      deps: [...config.mockApi.services],\n      useFactory: () => () => null,\n      multi: true\n    });\n  }\n  // Return the providers\n  return providers;\n};","map":{"version":3,"names":["provideHttpClient","withInterceptors","APP_INITIALIZER","ENVIRONMENT_INITIALIZER","importProvidersFrom","inject","MATERIAL_SANITY_CHECKS","MatDialogModule","MAT_FORM_FIELD_DEFAULT_OPTIONS","FUSE_MOCK_API_DEFAULT_DELAY","mockApiInterceptor","FUSE_CONFIG","FuseConfirmationService","fuseLoadingInterceptor","FuseLoadingService","FuseMediaWatcherService","FusePlatformService","FuseSplashScreenService","FuseUtilsService","provideFuse","config","providers","provide","useValue","doctype","theme","version","appearance","mockApi","delay","fuse","multi","services","push","deps","useFactory"],"sources":["/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/src/@fuse/fuse.provider.ts"],"sourcesContent":["import { provideHttpClient, withInterceptors } from '@angular/common/http';\nimport { APP_INITIALIZER, ENVIRONMENT_INITIALIZER, EnvironmentProviders, importProvidersFrom, inject, Provider } from '@angular/core';\nimport { MATERIAL_SANITY_CHECKS } from '@angular/material/core';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS } from '@angular/material/form-field';\nimport { FUSE_MOCK_API_DEFAULT_DELAY, mockApiInterceptor } from '@fuse/lib/mock-api';\nimport { FuseConfig } from '@fuse/services/config';\nimport { FUSE_CONFIG } from '@fuse/services/config/config.constants';\nimport { FuseConfirmationService } from '@fuse/services/confirmation';\nimport { fuseLoadingInterceptor, FuseLoadingService } from '@fuse/services/loading';\nimport { FuseMediaWatcherService } from '@fuse/services/media-watcher';\nimport { FusePlatformService } from '@fuse/services/platform';\nimport { FuseSplashScreenService } from '@fuse/services/splash-screen';\nimport { FuseUtilsService } from '@fuse/services/utils';\n\nexport type FuseProviderConfig = {\n    mockApi?: {\n        delay?: number;\n        services?: any[];\n    },\n    fuse?: FuseConfig\n}\n\n/**\n * Fuse provider\n */\nexport const provideFuse = (config: FuseProviderConfig): Array<Provider | EnvironmentProviders> =>\n{\n    // Base providers\n    const providers: Array<Provider | EnvironmentProviders> = [\n        {\n            // Disable 'theme' sanity check\n            provide : MATERIAL_SANITY_CHECKS,\n            useValue: {\n                doctype: true,\n                theme  : false,\n                version: true,\n            },\n        },\n        {\n            // Use the 'fill' appearance on Angular Material form fields by default\n            provide : MAT_FORM_FIELD_DEFAULT_OPTIONS,\n            useValue: {\n                appearance: 'fill',\n            },\n        },\n        {\n            provide : FUSE_MOCK_API_DEFAULT_DELAY,\n            useValue: config?.mockApi?.delay ?? 0,\n        },\n        {\n            provide : FUSE_CONFIG,\n            useValue: config?.fuse ?? {},\n        },\n\n        importProvidersFrom(MatDialogModule),\n        {\n            provide : ENVIRONMENT_INITIALIZER,\n            useValue: () => inject(FuseConfirmationService),\n            multi   : true,\n        },\n\n        provideHttpClient(withInterceptors([fuseLoadingInterceptor])),\n        {\n            provide : ENVIRONMENT_INITIALIZER,\n            useValue: () => inject(FuseLoadingService),\n            multi   : true,\n        },\n\n        {\n            provide : ENVIRONMENT_INITIALIZER,\n            useValue: () => inject(FuseMediaWatcherService),\n            multi   : true,\n        },\n        {\n            provide : ENVIRONMENT_INITIALIZER,\n            useValue: () => inject(FusePlatformService),\n            multi   : true,\n        },\n        {\n            provide : ENVIRONMENT_INITIALIZER,\n            useValue: () => inject(FuseSplashScreenService),\n            multi   : true,\n        },\n        {\n            provide : ENVIRONMENT_INITIALIZER,\n            useValue: () => inject(FuseUtilsService),\n            multi   : true,\n        },\n    ];\n\n    // Mock Api services\n    if ( config?.mockApi?.services )\n    {\n        providers.push(\n            provideHttpClient(withInterceptors([mockApiInterceptor])),\n            {\n                provide   : APP_INITIALIZER,\n                deps      : [...config.mockApi.services],\n                useFactory: () => (): any => null,\n                multi     : true,\n            },\n        );\n    }\n\n    // Return the providers\n    return providers;\n};\n"],"mappings":"AAAA,SAASA,iBAAiB,EAAEC,gBAAgB,QAAQ,sBAAsB;AAC1E,SAASC,eAAe,EAAEC,uBAAuB,EAAwBC,mBAAmB,EAAEC,MAAM,QAAkB,eAAe;AACrI,SAASC,sBAAsB,QAAQ,wBAAwB;AAC/D,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,8BAA8B,QAAQ,8BAA8B;AAC7E,SAASC,2BAA2B,EAAEC,kBAAkB,QAAQ,oBAAoB;AAEpF,SAASC,WAAW,QAAQ,wCAAwC;AACpE,SAASC,uBAAuB,QAAQ,6BAA6B;AACrE,SAASC,sBAAsB,EAAEC,kBAAkB,QAAQ,wBAAwB;AACnF,SAASC,uBAAuB,QAAQ,8BAA8B;AACtE,SAASC,mBAAmB,QAAQ,yBAAyB;AAC7D,SAASC,uBAAuB,QAAQ,8BAA8B;AACtE,SAASC,gBAAgB,QAAQ,sBAAsB;AAUvD;;;AAGA,OAAO,MAAMC,WAAW,GAAIC,MAA0B,IAA4C;EAE9F;EACA,MAAMC,SAAS,GAA2C,CACtD;IACI;IACAC,OAAO,EAAGhB,sBAAsB;IAChCiB,QAAQ,EAAE;MACNC,OAAO,EAAE,IAAI;MACbC,KAAK,EAAI,KAAK;MACdC,OAAO,EAAE;;GAEhB,EACD;IACI;IACAJ,OAAO,EAAGd,8BAA8B;IACxCe,QAAQ,EAAE;MACNI,UAAU,EAAE;;GAEnB,EACD;IACIL,OAAO,EAAGb,2BAA2B;IACrCc,QAAQ,EAAEH,MAAM,EAAEQ,OAAO,EAAEC,KAAK,IAAI;GACvC,EACD;IACIP,OAAO,EAAGX,WAAW;IACrBY,QAAQ,EAAEH,MAAM,EAAEU,IAAI,IAAI;GAC7B,EAED1B,mBAAmB,CAACG,eAAe,CAAC,EACpC;IACIe,OAAO,EAAGnB,uBAAuB;IACjCoB,QAAQ,EAAEA,CAAA,KAAMlB,MAAM,CAACO,uBAAuB,CAAC;IAC/CmB,KAAK,EAAK;GACb,EAED/B,iBAAiB,CAACC,gBAAgB,CAAC,CAACY,sBAAsB,CAAC,CAAC,CAAC,EAC7D;IACIS,OAAO,EAAGnB,uBAAuB;IACjCoB,QAAQ,EAAEA,CAAA,KAAMlB,MAAM,CAACS,kBAAkB,CAAC;IAC1CiB,KAAK,EAAK;GACb,EAED;IACIT,OAAO,EAAGnB,uBAAuB;IACjCoB,QAAQ,EAAEA,CAAA,KAAMlB,MAAM,CAACU,uBAAuB,CAAC;IAC/CgB,KAAK,EAAK;GACb,EACD;IACIT,OAAO,EAAGnB,uBAAuB;IACjCoB,QAAQ,EAAEA,CAAA,KAAMlB,MAAM,CAACW,mBAAmB,CAAC;IAC3Ce,KAAK,EAAK;GACb,EACD;IACIT,OAAO,EAAGnB,uBAAuB;IACjCoB,QAAQ,EAAEA,CAAA,KAAMlB,MAAM,CAACY,uBAAuB,CAAC;IAC/Cc,KAAK,EAAK;GACb,EACD;IACIT,OAAO,EAAGnB,uBAAuB;IACjCoB,QAAQ,EAAEA,CAAA,KAAMlB,MAAM,CAACa,gBAAgB,CAAC;IACxCa,KAAK,EAAK;GACb,CACJ;EAED;EACA,IAAKX,MAAM,EAAEQ,OAAO,EAAEI,QAAQ,EAC9B;IACIX,SAAS,CAACY,IAAI,CACVjC,iBAAiB,CAACC,gBAAgB,CAAC,CAACS,kBAAkB,CAAC,CAAC,CAAC,EACzD;MACIY,OAAO,EAAKpB,eAAe;MAC3BgC,IAAI,EAAQ,CAAC,GAAGd,MAAM,CAACQ,OAAO,CAACI,QAAQ,CAAC;MACxCG,UAAU,EAAEA,CAAA,KAAM,MAAW,IAAI;MACjCJ,KAAK,EAAO;KACf,CACJ;;EAGL;EACA,OAAOV,SAAS;AACpB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}