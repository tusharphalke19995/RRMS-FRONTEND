{"ast":null,"code":"import { FuseMockApiUtils } from '@fuse/lib/mock-api';\nimport { filters as filtersData, folders as foldersData, labels as labelsData, mails as mailsData, settings as settingsData } from 'app/mock-api/apps/mailbox/data';\nimport { assign, cloneDeep } from 'lodash-es';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nexport class MailboxMockApi {\n  /**\n   * Constructor\n   */\n  constructor(_fuseMockApiService) {\n    this._fuseMockApiService = _fuseMockApiService;\n    this._filters = filtersData;\n    this._folders = foldersData;\n    this._mails = mailsData;\n    this._labels = labelsData;\n    this._settings = settingsData;\n    // Register Mock API handlers\n    this.registerHandlers();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Register Mock API handlers\n   */\n  registerHandlers() {\n    // -----------------------------------------------------------------------------------------------------\n    // @ Settings - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/mailbox/settings').reply(() => [200, cloneDeep(this._settings)]);\n    // -----------------------------------------------------------------------------------------------------\n    // @ Settings - PATCH\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPatch('api/apps/mailbox/settings').reply(({\n      request\n    }) => {\n      // Get the settings\n      const settings = cloneDeep(request.body.settings);\n      // Update the settings\n      this._settings = assign({}, this._settings, settings);\n      // Return the response\n      return [200, cloneDeep(this._settings)];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Folders - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/mailbox/folders').reply(() => {\n      let count = 0;\n      // Iterate through the folders\n      this._folders.forEach(folder => {\n        // Get the mails of this folder\n        const mails = this._mails.filter(mail => mail.folder === folder.id);\n        // If we are counting the 'sent' or the 'trash' folder...\n        if (folder.slug === 'sent' || folder.slug === 'trash') {\n          // Always set the count to 0\n          count = 0;\n        }\n        // If we are counting the 'drafts' or the 'spam' folder...\n        else if (folder.slug === 'drafts' || folder.slug === 'trash' || folder.slug === 'spam') {\n          // Set the count to the count of all mails\n          count = mails.length;\n        }\n        // Otherwise ('inbox')...\n        else {\n          // Go through the mails and count the unread ones\n          mails.forEach(mail => {\n            if (mail.unread) {\n              count++;\n            }\n          });\n        }\n        // Append the count to the folder mock-api\n        folder.count = count;\n        // Reset the count\n        count = 0;\n      });\n      // Return the response\n      return [200, cloneDeep(this._folders)];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Filters - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/mailbox/filters').reply(() => [200, cloneDeep(this._filters)]);\n    // -----------------------------------------------------------------------------------------------------\n    // @ Labels - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/mailbox/labels').reply(() => [200, cloneDeep(this._labels)]);\n    // -----------------------------------------------------------------------------------------------------\n    // @ Labels - POST\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPost('api/apps/mailbox/label').reply(({\n      request\n    }) => {\n      // Get the label\n      const label = cloneDeep(request.body.label);\n      // Generate an id\n      label.id = FuseMockApiUtils.guid();\n      // Generate a slug\n      label.slug = label.title.toLowerCase().replace(/ /g, '-').replace(/[-]+/g, '-').replace(/[^\\w-]+/g, '');\n      // Check if the slug is being used and update it if necessary\n      const originalSlug = label.slug;\n      let sameSlug;\n      let slugSuffix = 1;\n      do {\n        sameSlug = this._labels.filter(item => item.slug === label.slug);\n        if (sameSlug.length > 0) {\n          label.slug = originalSlug + '-' + slugSuffix;\n          slugSuffix++;\n        }\n      } while (sameSlug.length > 0);\n      // Add the label\n      this._labels.push(label);\n      // Return the response\n      return [200, label];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Labels - PATCH\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPatch('api/apps/mailbox/label').reply(({\n      request\n    }) => {\n      // Get the id and label\n      const id = request.body.id;\n      const label = cloneDeep(request.body.label);\n      // Prepare the updated label\n      let updatedLabel = null;\n      // Find the label and update it\n      this._labels.forEach((item, index, labels) => {\n        if (item.id === id) {\n          // Update the slug\n          label.slug = label.title.toLowerCase().replace(/ /g, '-').replace(/[-]+/g, '-').replace(/[^\\w-]+/g, '');\n          // Update the label\n          labels[index] = assign({}, labels[index], label);\n          // Store the updated label\n          updatedLabel = labels[index];\n        }\n      });\n      // Return the response\n      return [200, updatedLabel];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Labels - DELETE\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onDelete('api/apps/mailbox/label').reply(({\n      request\n    }) => {\n      // Get the id\n      const id = request.params.get('id');\n      // Find the label and delete it\n      const index = this._labels.findIndex(item => item.id === id);\n      this._labels.splice(index, 1);\n      // Get all the mails that have the label\n      const mailsWithLabel = this._mails.filter(mail => mail.labels.indexOf(id) > -1);\n      // Iterate through them and remove the label\n      mailsWithLabel.forEach(mail => {\n        mail.labels.splice(mail.labels.indexOf(id), 1);\n      });\n      // Return the response\n      return [200, true];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Mails - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/mailbox/mails', 625).reply(({\n      request\n    }) => {\n      // First, decide if mails are requested by folder, filter or label\n      const byFolder = request.params.get('folder');\n      const byFilter = request.params.get('filter');\n      const byLabel = request.params.get('label');\n      // Clone the mails mock-api to prevent accidental mock-api updates\n      let mails = cloneDeep(this._mails);\n      // Filter the mails depending on the requested by type\n      mails = mails.filter(mail => {\n        if (byFolder) {\n          return mail.folder === this._folders.find(folder => folder.slug === byFolder).id;\n        }\n        if (byFilter) {\n          return mail[byFilter] === true;\n        }\n        if (byLabel) {\n          return mail.labels.includes(this._labels.find(label => label.slug === byLabel).id);\n        }\n      });\n      // Sort by date - descending\n      mails.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n      // Figure out the cc and bcc counts\n      mails.forEach(mail => {\n        mail.ccCount = mail.cc ? mail.cc.length : 0;\n        mail.bccCount = mail.bcc ? mail.bcc.length : 0;\n      });\n      // Paginate - Start\n      const mailsLength = mails.length;\n      const resultsPerPage = 10;\n      // Get the requested page number\n      const page = parseInt(request.params.get('page') ?? '1', 10);\n      // Calculate pagination details\n      const begin = (page - 1) * resultsPerPage;\n      const end = Math.min(resultsPerPage * page, mailsLength);\n      const lastPage = Math.max(Math.ceil(mailsLength / resultsPerPage), 1);\n      // Prepare the pagination object\n      let pagination = {};\n      // If the requested page number is bigger than\n      // the last possible page number, return null for\n      // mails but also send the last possible page so\n      // the app can navigate to there\n      if (page > lastPage) {\n        mails = null;\n        pagination = {\n          lastPage\n        };\n      } else {\n        // Paginate the results by 10\n        mails = mails.slice(begin, end);\n        // Prepare the pagination mock-api\n        pagination = {\n          totalResults: mailsLength,\n          resultsPerPage: resultsPerPage,\n          currentPage: page,\n          lastPage: lastPage,\n          startIndex: begin,\n          endIndex: end - 1\n        };\n      }\n      // Return the response\n      return [200, {\n        mails,\n        pagination\n      }];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Mail - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/mailbox/mail').reply(({\n      request\n    }) => {\n      // Get the id from the params\n      const id = request.params.get('id');\n      // Clone the mails mock-api to prevent accidental mock-api updates\n      const mails = cloneDeep(this._mails);\n      // Find the mail\n      const mail = mails.find(item => item.id === id);\n      return [200, mail];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Mail - PATCH\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPatch('api/apps/mailbox/mail').reply(({\n      request\n    }) => {\n      // Get the id and mail\n      const id = request.body.id;\n      const mail = cloneDeep(request.body.mail);\n      // Prepare the updated mail\n      let updatedMail = null;\n      // Find the mail and update it\n      this._mails.forEach((item, index, mails) => {\n        if (item.id === id) {\n          // Update the mail\n          mails[index] = assign({}, mails[index], mail);\n          // Store the updated mail\n          updatedMail = mails[index];\n        }\n      });\n      // Return the response\n      return [200, updatedMail];\n    });\n  }\n  static #_ = this.ɵfac = function MailboxMockApi_Factory(t) {\n    return new (t || MailboxMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MailboxMockApi,\n    factory: MailboxMockApi.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["FuseMockApiUtils","filters","filtersData","folders","foldersData","labels","labelsData","mails","mailsData","settings","settingsData","assign","cloneDeep","MailboxMockApi","constructor","_fuseMockApiService","_filters","_folders","_mails","_labels","_settings","registerHandlers","onGet","reply","onPatch","request","body","count","forEach","folder","filter","mail","id","slug","length","unread","onPost","label","guid","title","toLowerCase","replace","originalSlug","sameSlug","slugSuffix","item","push","updatedLabel","index","onDelete","params","get","findIndex","splice","mailsWithLabel","indexOf","byFolder","byFilter","byLabel","find","includes","sort","a","b","Date","date","getTime","ccCount","cc","bccCount","bcc","mailsLength","resultsPerPage","page","parseInt","begin","end","Math","min","lastPage","max","ceil","pagination","slice","totalResults","currentPage","startIndex","endIndex","updatedMail","_","i0","ɵɵinject","i1","FuseMockApiService","_2","factory","ɵfac","providedIn"],"sources":["/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/src/app/mock-api/apps/mailbox/api.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { FuseMockApiService, FuseMockApiUtils } from '@fuse/lib/mock-api';\nimport { filters as filtersData, folders as foldersData, labels as labelsData, mails as mailsData, settings as settingsData } from 'app/mock-api/apps/mailbox/data';\nimport { assign, cloneDeep } from 'lodash-es';\n\n@Injectable({providedIn: 'root'})\nexport class MailboxMockApi\n{\n    private _filters: any[] = filtersData;\n    private _folders: any[] = foldersData;\n    private _mails: any[] = mailsData;\n    private _labels: any[] = labelsData;\n    private _settings: any = settingsData;\n\n    /**\n     * Constructor\n     */\n    constructor(private _fuseMockApiService: FuseMockApiService)\n    {\n        // Register Mock API handlers\n        this.registerHandlers();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Register Mock API handlers\n     */\n    registerHandlers(): void\n    {\n        // -----------------------------------------------------------------------------------------------------\n        // @ Settings - GET\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onGet('api/apps/mailbox/settings')\n            .reply(() => [200, cloneDeep(this._settings)]);\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Settings - PATCH\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPatch('api/apps/mailbox/settings')\n            .reply(({request}) =>\n            {\n                // Get the settings\n                const settings = cloneDeep(request.body.settings);\n\n                // Update the settings\n                this._settings = assign({}, this._settings, settings);\n\n                // Return the response\n                return [200, cloneDeep(this._settings)];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Folders - GET\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onGet('api/apps/mailbox/folders')\n            .reply(() =>\n            {\n                let count = 0;\n\n                // Iterate through the folders\n                this._folders.forEach((folder) =>\n                {\n                    // Get the mails of this folder\n                    const mails = this._mails.filter(mail => mail.folder === folder.id);\n\n                    // If we are counting the 'sent' or the 'trash' folder...\n                    if ( folder.slug === 'sent' || folder.slug === 'trash' )\n                    {\n                        // Always set the count to 0\n                        count = 0;\n                    }\n                    // If we are counting the 'drafts' or the 'spam' folder...\n                    else if ( folder.slug === 'drafts' || folder.slug === 'trash' || folder.slug === 'spam' )\n                    {\n                        // Set the count to the count of all mails\n                        count = mails.length;\n                    }\n                    // Otherwise ('inbox')...\n                    else\n                    {\n                        // Go through the mails and count the unread ones\n                        mails.forEach((mail) =>\n                        {\n                            if ( mail.unread )\n                            {\n                                count++;\n                            }\n                        });\n                    }\n\n                    // Append the count to the folder mock-api\n                    folder.count = count;\n\n                    // Reset the count\n                    count = 0;\n                });\n\n                // Return the response\n                return [200, cloneDeep(this._folders)];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Filters - GET\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onGet('api/apps/mailbox/filters')\n            .reply(() => [200, cloneDeep(this._filters)]);\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Labels - GET\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onGet('api/apps/mailbox/labels')\n            .reply(() => [200, cloneDeep(this._labels)]);\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Labels - POST\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPost('api/apps/mailbox/label')\n            .reply(({request}) =>\n            {\n                // Get the label\n                const label = cloneDeep(request.body.label);\n\n                // Generate an id\n                label.id = FuseMockApiUtils.guid();\n\n                // Generate a slug\n                label.slug = label.title.toLowerCase()\n                    .replace(/ /g, '-')\n                    .replace(/[-]+/g, '-')\n                    .replace(/[^\\w-]+/g, '');\n\n                // Check if the slug is being used and update it if necessary\n                const originalSlug = label.slug;\n\n                let sameSlug;\n                let slugSuffix = 1;\n\n                do\n                {\n                    sameSlug = this._labels.filter(item => item.slug === label.slug);\n\n                    if ( sameSlug.length > 0 )\n                    {\n                        label.slug = originalSlug + '-' + slugSuffix;\n                        slugSuffix++;\n                    }\n                }\n                while ( sameSlug.length > 0 );\n\n                // Add the label\n                this._labels.push(label);\n\n                // Return the response\n                return [200, label];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Labels - PATCH\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPatch('api/apps/mailbox/label')\n            .reply(({request}) =>\n            {\n                // Get the id and label\n                const id = request.body.id;\n                const label = cloneDeep(request.body.label);\n\n                // Prepare the updated label\n                let updatedLabel = null;\n\n                // Find the label and update it\n                this._labels.forEach((item, index, labels) =>\n                {\n                    if ( item.id === id )\n                    {\n                        // Update the slug\n                        label.slug = label.title.toLowerCase()\n                            .replace(/ /g, '-')\n                            .replace(/[-]+/g, '-')\n                            .replace(/[^\\w-]+/g, '');\n\n                        // Update the label\n                        labels[index] = assign({}, labels[index], label);\n\n                        // Store the updated label\n                        updatedLabel = labels[index];\n                    }\n                });\n\n                // Return the response\n                return [200, updatedLabel];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Labels - DELETE\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onDelete('api/apps/mailbox/label')\n            .reply(({request}) =>\n            {\n                // Get the id\n                const id = request.params.get('id');\n\n                // Find the label and delete it\n                const index = this._labels.findIndex(item => item.id === id);\n                this._labels.splice(index, 1);\n\n                // Get all the mails that have the label\n                const mailsWithLabel = this._mails.filter(mail => mail.labels.indexOf(id) > -1);\n\n                // Iterate through them and remove the label\n                mailsWithLabel.forEach((mail) =>\n                {\n                    mail.labels.splice(mail.labels.indexOf(id), 1);\n                });\n\n                // Return the response\n                return [200, true];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Mails - GET\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onGet('api/apps/mailbox/mails', 625)\n            .reply(({request}) =>\n            {\n                // First, decide if mails are requested by folder, filter or label\n                const byFolder = request.params.get('folder');\n                const byFilter = request.params.get('filter');\n                const byLabel = request.params.get('label');\n\n                // Clone the mails mock-api to prevent accidental mock-api updates\n                let mails: any[] | null = cloneDeep(this._mails);\n\n                // Filter the mails depending on the requested by type\n                mails = mails.filter((mail) =>\n                {\n                    if ( byFolder )\n                    {\n                        return mail.folder === this._folders.find(folder => folder.slug === byFolder).id;\n                    }\n\n                    if ( byFilter )\n                    {\n                        return mail[byFilter] === true;\n                    }\n\n                    if ( byLabel )\n                    {\n                        return mail.labels.includes(this._labels.find(label => label.slug === byLabel).id);\n                    }\n                });\n\n                // Sort by date - descending\n                mails.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n\n                // Figure out the cc and bcc counts\n                mails.forEach((mail) =>\n                {\n                    mail.ccCount = mail.cc ? mail.cc.length : 0;\n                    mail.bccCount = mail.bcc ? mail.bcc.length : 0;\n                });\n\n                // Paginate - Start\n                const mailsLength = mails.length;\n                const resultsPerPage = 10;\n\n                // Get the requested page number\n                const page = parseInt(request.params.get('page') ?? '1', 10);\n\n                // Calculate pagination details\n                const begin = (page - 1) * resultsPerPage;\n                const end = Math.min((resultsPerPage * page), mailsLength);\n                const lastPage = Math.max(Math.ceil(mailsLength / resultsPerPage), 1);\n\n                // Prepare the pagination object\n                let pagination = {};\n\n                // If the requested page number is bigger than\n                // the last possible page number, return null for\n                // mails but also send the last possible page so\n                // the app can navigate to there\n                if ( page > lastPage )\n                {\n                    mails = null;\n                    pagination = {\n                        lastPage,\n                    };\n                }\n                else\n                {\n                    // Paginate the results by 10\n                    mails = mails.slice(begin, end);\n\n                    // Prepare the pagination mock-api\n                    pagination = {\n                        totalResults  : mailsLength,\n                        resultsPerPage: resultsPerPage,\n                        currentPage   : page,\n                        lastPage      : lastPage,\n                        startIndex    : begin,\n                        endIndex      : end - 1,\n                    };\n                }\n\n                // Return the response\n                return [\n                    200,\n                    {\n                        mails,\n                        pagination,\n                    },\n                ];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Mail - GET\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onGet('api/apps/mailbox/mail')\n            .reply(({request}) =>\n            {\n                // Get the id from the params\n                const id = request.params.get('id');\n\n                // Clone the mails mock-api to prevent accidental mock-api updates\n                const mails = cloneDeep(this._mails);\n\n                // Find the mail\n                const mail = mails.find(item => item.id === id);\n\n                return [\n                    200,\n                    mail,\n                ];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Mail - PATCH\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPatch('api/apps/mailbox/mail')\n            .reply(({request}) =>\n            {\n                // Get the id and mail\n                const id = request.body.id;\n                const mail = cloneDeep(request.body.mail);\n\n                // Prepare the updated mail\n                let updatedMail = null;\n\n                // Find the mail and update it\n                this._mails.forEach((item, index, mails) =>\n                {\n                    if ( item.id === id )\n                    {\n                        // Update the mail\n                        mails[index] = assign({}, mails[index], mail);\n\n                        // Store the updated mail\n                        updatedMail = mails[index];\n                    }\n                });\n\n                // Return the response\n                return [200, updatedMail];\n            });\n    }\n}\n"],"mappings":"AACA,SAA6BA,gBAAgB,QAAQ,oBAAoB;AACzE,SAASC,OAAO,IAAIC,WAAW,EAAEC,OAAO,IAAIC,WAAW,EAAEC,MAAM,IAAIC,UAAU,EAAEC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,IAAIC,YAAY,QAAQ,gCAAgC;AACnK,SAASC,MAAM,EAAEC,SAAS,QAAQ,WAAW;;;AAG7C,OAAM,MAAOC,cAAc;EAQvB;;;EAGAC,YAAoBC,mBAAuC;IAAvC,KAAAA,mBAAmB,GAAnBA,mBAAmB;IAT/B,KAAAC,QAAQ,GAAUd,WAAW;IAC7B,KAAAe,QAAQ,GAAUb,WAAW;IAC7B,KAAAc,MAAM,GAAUV,SAAS;IACzB,KAAAW,OAAO,GAAUb,UAAU;IAC3B,KAAAc,SAAS,GAAQV,YAAY;IAOjC;IACA,IAAI,CAACW,gBAAgB,EAAE;EAC3B;EAEA;EACA;EACA;EAEA;;;EAGAA,gBAAgBA,CAAA;IAEZ;IACA;IACA;IACA,IAAI,CAACN,mBAAmB,CACnBO,KAAK,CAAC,2BAA2B,CAAC,CAClCC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAEX,SAAS,CAAC,IAAI,CAACQ,SAAS,CAAC,CAAC,CAAC;IAElD;IACA;IACA;IACA,IAAI,CAACL,mBAAmB,CACnBS,OAAO,CAAC,2BAA2B,CAAC,CACpCD,KAAK,CAAC,CAAC;MAACE;IAAO,CAAC,KAAI;MAEjB;MACA,MAAMhB,QAAQ,GAAGG,SAAS,CAACa,OAAO,CAACC,IAAI,CAACjB,QAAQ,CAAC;MAEjD;MACA,IAAI,CAACW,SAAS,GAAGT,MAAM,CAAC,EAAE,EAAE,IAAI,CAACS,SAAS,EAAEX,QAAQ,CAAC;MAErD;MACA,OAAO,CAAC,GAAG,EAAEG,SAAS,CAAC,IAAI,CAACQ,SAAS,CAAC,CAAC;IAC3C,CAAC,CAAC;IAEN;IACA;IACA;IACA,IAAI,CAACL,mBAAmB,CACnBO,KAAK,CAAC,0BAA0B,CAAC,CACjCC,KAAK,CAAC,MAAK;MAER,IAAII,KAAK,GAAG,CAAC;MAEb;MACA,IAAI,CAACV,QAAQ,CAACW,OAAO,CAAEC,MAAM,IAAI;QAE7B;QACA,MAAMtB,KAAK,GAAG,IAAI,CAACW,MAAM,CAACY,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACF,MAAM,KAAKA,MAAM,CAACG,EAAE,CAAC;QAEnE;QACA,IAAKH,MAAM,CAACI,IAAI,KAAK,MAAM,IAAIJ,MAAM,CAACI,IAAI,KAAK,OAAO,EACtD;UACI;UACAN,KAAK,GAAG,CAAC;;QAEb;QAAA,KACK,IAAKE,MAAM,CAACI,IAAI,KAAK,QAAQ,IAAIJ,MAAM,CAACI,IAAI,KAAK,OAAO,IAAIJ,MAAM,CAACI,IAAI,KAAK,MAAM,EACvF;UACI;UACAN,KAAK,GAAGpB,KAAK,CAAC2B,MAAM;;QAExB;QAAA,KAEA;UACI;UACA3B,KAAK,CAACqB,OAAO,CAAEG,IAAI,IAAI;YAEnB,IAAKA,IAAI,CAACI,MAAM,EAChB;cACIR,KAAK,EAAE;;UAEf,CAAC,CAAC;;QAGN;QACAE,MAAM,CAACF,KAAK,GAAGA,KAAK;QAEpB;QACAA,KAAK,GAAG,CAAC;MACb,CAAC,CAAC;MAEF;MACA,OAAO,CAAC,GAAG,EAAEf,SAAS,CAAC,IAAI,CAACK,QAAQ,CAAC,CAAC;IAC1C,CAAC,CAAC;IAEN;IACA;IACA;IACA,IAAI,CAACF,mBAAmB,CACnBO,KAAK,CAAC,0BAA0B,CAAC,CACjCC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAEX,SAAS,CAAC,IAAI,CAACI,QAAQ,CAAC,CAAC,CAAC;IAEjD;IACA;IACA;IACA,IAAI,CAACD,mBAAmB,CACnBO,KAAK,CAAC,yBAAyB,CAAC,CAChCC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAEX,SAAS,CAAC,IAAI,CAACO,OAAO,CAAC,CAAC,CAAC;IAEhD;IACA;IACA;IACA,IAAI,CAACJ,mBAAmB,CACnBqB,MAAM,CAAC,wBAAwB,CAAC,CAChCb,KAAK,CAAC,CAAC;MAACE;IAAO,CAAC,KAAI;MAEjB;MACA,MAAMY,KAAK,GAAGzB,SAAS,CAACa,OAAO,CAACC,IAAI,CAACW,KAAK,CAAC;MAE3C;MACAA,KAAK,CAACL,EAAE,GAAGhC,gBAAgB,CAACsC,IAAI,EAAE;MAElC;MACAD,KAAK,CAACJ,IAAI,GAAGI,KAAK,CAACE,KAAK,CAACC,WAAW,EAAE,CACjCC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAClBA,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CACrBA,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;MAE5B;MACA,MAAMC,YAAY,GAAGL,KAAK,CAACJ,IAAI;MAE/B,IAAIU,QAAQ;MACZ,IAAIC,UAAU,GAAG,CAAC;MAElB,GACA;QACID,QAAQ,GAAG,IAAI,CAACxB,OAAO,CAACW,MAAM,CAACe,IAAI,IAAIA,IAAI,CAACZ,IAAI,KAAKI,KAAK,CAACJ,IAAI,CAAC;QAEhE,IAAKU,QAAQ,CAACT,MAAM,GAAG,CAAC,EACxB;UACIG,KAAK,CAACJ,IAAI,GAAGS,YAAY,GAAG,GAAG,GAAGE,UAAU;UAC5CA,UAAU,EAAE;;OAEnB,QACOD,QAAQ,CAACT,MAAM,GAAG,CAAC;MAE3B;MACA,IAAI,CAACf,OAAO,CAAC2B,IAAI,CAACT,KAAK,CAAC;MAExB;MACA,OAAO,CAAC,GAAG,EAAEA,KAAK,CAAC;IACvB,CAAC,CAAC;IAEN;IACA;IACA;IACA,IAAI,CAACtB,mBAAmB,CACnBS,OAAO,CAAC,wBAAwB,CAAC,CACjCD,KAAK,CAAC,CAAC;MAACE;IAAO,CAAC,KAAI;MAEjB;MACA,MAAMO,EAAE,GAAGP,OAAO,CAACC,IAAI,CAACM,EAAE;MAC1B,MAAMK,KAAK,GAAGzB,SAAS,CAACa,OAAO,CAACC,IAAI,CAACW,KAAK,CAAC;MAE3C;MACA,IAAIU,YAAY,GAAG,IAAI;MAEvB;MACA,IAAI,CAAC5B,OAAO,CAACS,OAAO,CAAC,CAACiB,IAAI,EAAEG,KAAK,EAAE3C,MAAM,KAAI;QAEzC,IAAKwC,IAAI,CAACb,EAAE,KAAKA,EAAE,EACnB;UACI;UACAK,KAAK,CAACJ,IAAI,GAAGI,KAAK,CAACE,KAAK,CAACC,WAAW,EAAE,CACjCC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAClBA,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CACrBA,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;UAE5B;UACApC,MAAM,CAAC2C,KAAK,CAAC,GAAGrC,MAAM,CAAC,EAAE,EAAEN,MAAM,CAAC2C,KAAK,CAAC,EAAEX,KAAK,CAAC;UAEhD;UACAU,YAAY,GAAG1C,MAAM,CAAC2C,KAAK,CAAC;;MAEpC,CAAC,CAAC;MAEF;MACA,OAAO,CAAC,GAAG,EAAED,YAAY,CAAC;IAC9B,CAAC,CAAC;IAEN;IACA;IACA;IACA,IAAI,CAAChC,mBAAmB,CACnBkC,QAAQ,CAAC,wBAAwB,CAAC,CAClC1B,KAAK,CAAC,CAAC;MAACE;IAAO,CAAC,KAAI;MAEjB;MACA,MAAMO,EAAE,GAAGP,OAAO,CAACyB,MAAM,CAACC,GAAG,CAAC,IAAI,CAAC;MAEnC;MACA,MAAMH,KAAK,GAAG,IAAI,CAAC7B,OAAO,CAACiC,SAAS,CAACP,IAAI,IAAIA,IAAI,CAACb,EAAE,KAAKA,EAAE,CAAC;MAC5D,IAAI,CAACb,OAAO,CAACkC,MAAM,CAACL,KAAK,EAAE,CAAC,CAAC;MAE7B;MACA,MAAMM,cAAc,GAAG,IAAI,CAACpC,MAAM,CAACY,MAAM,CAACC,IAAI,IAAIA,IAAI,CAAC1B,MAAM,CAACkD,OAAO,CAACvB,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;MAE/E;MACAsB,cAAc,CAAC1B,OAAO,CAAEG,IAAI,IAAI;QAE5BA,IAAI,CAAC1B,MAAM,CAACgD,MAAM,CAACtB,IAAI,CAAC1B,MAAM,CAACkD,OAAO,CAACvB,EAAE,CAAC,EAAE,CAAC,CAAC;MAClD,CAAC,CAAC;MAEF;MACA,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC;IACtB,CAAC,CAAC;IAEN;IACA;IACA;IACA,IAAI,CAACjB,mBAAmB,CACnBO,KAAK,CAAC,wBAAwB,EAAE,GAAG,CAAC,CACpCC,KAAK,CAAC,CAAC;MAACE;IAAO,CAAC,KAAI;MAEjB;MACA,MAAM+B,QAAQ,GAAG/B,OAAO,CAACyB,MAAM,CAACC,GAAG,CAAC,QAAQ,CAAC;MAC7C,MAAMM,QAAQ,GAAGhC,OAAO,CAACyB,MAAM,CAACC,GAAG,CAAC,QAAQ,CAAC;MAC7C,MAAMO,OAAO,GAAGjC,OAAO,CAACyB,MAAM,CAACC,GAAG,CAAC,OAAO,CAAC;MAE3C;MACA,IAAI5C,KAAK,GAAiBK,SAAS,CAAC,IAAI,CAACM,MAAM,CAAC;MAEhD;MACAX,KAAK,GAAGA,KAAK,CAACuB,MAAM,CAAEC,IAAI,IAAI;QAE1B,IAAKyB,QAAQ,EACb;UACI,OAAOzB,IAAI,CAACF,MAAM,KAAK,IAAI,CAACZ,QAAQ,CAAC0C,IAAI,CAAC9B,MAAM,IAAIA,MAAM,CAACI,IAAI,KAAKuB,QAAQ,CAAC,CAACxB,EAAE;;QAGpF,IAAKyB,QAAQ,EACb;UACI,OAAO1B,IAAI,CAAC0B,QAAQ,CAAC,KAAK,IAAI;;QAGlC,IAAKC,OAAO,EACZ;UACI,OAAO3B,IAAI,CAAC1B,MAAM,CAACuD,QAAQ,CAAC,IAAI,CAACzC,OAAO,CAACwC,IAAI,CAACtB,KAAK,IAAIA,KAAK,CAACJ,IAAI,KAAKyB,OAAO,CAAC,CAAC1B,EAAE,CAAC;;MAE1F,CAAC,CAAC;MAEF;MACAzB,KAAK,CAACsD,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACD,CAAC,CAACE,IAAI,CAAC,CAACC,OAAO,EAAE,GAAG,IAAIF,IAAI,CAACF,CAAC,CAACG,IAAI,CAAC,CAACC,OAAO,EAAE,CAAC;MAE7E;MACA3D,KAAK,CAACqB,OAAO,CAAEG,IAAI,IAAI;QAEnBA,IAAI,CAACoC,OAAO,GAAGpC,IAAI,CAACqC,EAAE,GAAGrC,IAAI,CAACqC,EAAE,CAAClC,MAAM,GAAG,CAAC;QAC3CH,IAAI,CAACsC,QAAQ,GAAGtC,IAAI,CAACuC,GAAG,GAAGvC,IAAI,CAACuC,GAAG,CAACpC,MAAM,GAAG,CAAC;MAClD,CAAC,CAAC;MAEF;MACA,MAAMqC,WAAW,GAAGhE,KAAK,CAAC2B,MAAM;MAChC,MAAMsC,cAAc,GAAG,EAAE;MAEzB;MACA,MAAMC,IAAI,GAAGC,QAAQ,CAACjD,OAAO,CAACyB,MAAM,CAACC,GAAG,CAAC,MAAM,CAAC,IAAI,GAAG,EAAE,EAAE,CAAC;MAE5D;MACA,MAAMwB,KAAK,GAAG,CAACF,IAAI,GAAG,CAAC,IAAID,cAAc;MACzC,MAAMI,GAAG,GAAGC,IAAI,CAACC,GAAG,CAAEN,cAAc,GAAGC,IAAI,EAAGF,WAAW,CAAC;MAC1D,MAAMQ,QAAQ,GAAGF,IAAI,CAACG,GAAG,CAACH,IAAI,CAACI,IAAI,CAACV,WAAW,GAAGC,cAAc,CAAC,EAAE,CAAC,CAAC;MAErE;MACA,IAAIU,UAAU,GAAG,EAAE;MAEnB;MACA;MACA;MACA;MACA,IAAKT,IAAI,GAAGM,QAAQ,EACpB;QACIxE,KAAK,GAAG,IAAI;QACZ2E,UAAU,GAAG;UACTH;SACH;OACJ,MAED;QACI;QACAxE,KAAK,GAAGA,KAAK,CAAC4E,KAAK,CAACR,KAAK,EAAEC,GAAG,CAAC;QAE/B;QACAM,UAAU,GAAG;UACTE,YAAY,EAAIb,WAAW;UAC3BC,cAAc,EAAEA,cAAc;UAC9Ba,WAAW,EAAKZ,IAAI;UACpBM,QAAQ,EAAQA,QAAQ;UACxBO,UAAU,EAAMX,KAAK;UACrBY,QAAQ,EAAQX,GAAG,GAAG;SACzB;;MAGL;MACA,OAAO,CACH,GAAG,EACH;QACIrE,KAAK;QACL2E;OACH,CACJ;IACL,CAAC,CAAC;IAEN;IACA;IACA;IACA,IAAI,CAACnE,mBAAmB,CACnBO,KAAK,CAAC,uBAAuB,CAAC,CAC9BC,KAAK,CAAC,CAAC;MAACE;IAAO,CAAC,KAAI;MAEjB;MACA,MAAMO,EAAE,GAAGP,OAAO,CAACyB,MAAM,CAACC,GAAG,CAAC,IAAI,CAAC;MAEnC;MACA,MAAM5C,KAAK,GAAGK,SAAS,CAAC,IAAI,CAACM,MAAM,CAAC;MAEpC;MACA,MAAMa,IAAI,GAAGxB,KAAK,CAACoD,IAAI,CAACd,IAAI,IAAIA,IAAI,CAACb,EAAE,KAAKA,EAAE,CAAC;MAE/C,OAAO,CACH,GAAG,EACHD,IAAI,CACP;IACL,CAAC,CAAC;IAEN;IACA;IACA;IACA,IAAI,CAAChB,mBAAmB,CACnBS,OAAO,CAAC,uBAAuB,CAAC,CAChCD,KAAK,CAAC,CAAC;MAACE;IAAO,CAAC,KAAI;MAEjB;MACA,MAAMO,EAAE,GAAGP,OAAO,CAACC,IAAI,CAACM,EAAE;MAC1B,MAAMD,IAAI,GAAGnB,SAAS,CAACa,OAAO,CAACC,IAAI,CAACK,IAAI,CAAC;MAEzC;MACA,IAAIyD,WAAW,GAAG,IAAI;MAEtB;MACA,IAAI,CAACtE,MAAM,CAACU,OAAO,CAAC,CAACiB,IAAI,EAAEG,KAAK,EAAEzC,KAAK,KAAI;QAEvC,IAAKsC,IAAI,CAACb,EAAE,KAAKA,EAAE,EACnB;UACI;UACAzB,KAAK,CAACyC,KAAK,CAAC,GAAGrC,MAAM,CAAC,EAAE,EAAEJ,KAAK,CAACyC,KAAK,CAAC,EAAEjB,IAAI,CAAC;UAE7C;UACAyD,WAAW,GAAGjF,KAAK,CAACyC,KAAK,CAAC;;MAElC,CAAC,CAAC;MAEF;MACA,OAAO,CAAC,GAAG,EAAEwC,WAAW,CAAC;IAC7B,CAAC,CAAC;EACV;EAAC,QAAAC,CAAA,G;qBAnXQ5E,cAAc,EAAA6E,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,kBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdjF,cAAc;IAAAkF,OAAA,EAAdlF,cAAc,CAAAmF,IAAA;IAAAC,UAAA,EADF;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}