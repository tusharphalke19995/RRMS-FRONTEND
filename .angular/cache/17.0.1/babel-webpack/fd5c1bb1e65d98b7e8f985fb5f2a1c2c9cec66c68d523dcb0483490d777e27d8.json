{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, booleanAttribute, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, ViewChild, ContentChildren, Input, Output, Directive, forwardRef, Optional, Host, NgModule } from '@angular/core';\nimport { MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ActiveDescendantKeyManager, addAriaReferencedId, removeAriaReferencedId } from '@angular/cdk/a11y';\nimport { coerceStringArray } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getEventTarget } from '@angular/cdk/platform';\nimport { trigger, state, style, transition, group, animate } from '@angular/animations';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { ESCAPE, hasModifierKey, UP_ARROW, ENTER, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i4 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { startWith, switchMap, take, filter, map, tap, delay } from 'rxjs/operators';\nimport * as i2$1 from '@angular/cdk/bidi';\n\n// Animation values come from\n// https://github.com/material-components/material-components-web/blob/master/packages/mdc-menu-surface/_mixins.scss\n// TODO(mmalerba): Ideally find a way to import the values from MDC's code.\nconst _c0 = [\"panel\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 0, 1);\n    i0.ɵɵlistener(\"@panelAnimation.done\", function MatAutocomplete_ng_template_0_Template_div_animation_panelAnimation_done_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3._animationDone.next($event));\n    });\n    i0.ɵɵprojection(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const formFieldId_r1 = ctx.id;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList)(\"@panelAnimation\", ctx_r0.isOpen ? \"visible\" : \"hidden\");\n    i0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0._getPanelAriaLabelledby(formFieldId_r1));\n  }\n}\nconst _c1 = [\"*\"];\nconst panelAnimation = trigger('panelAnimation', [state('void, hidden', style({\n  opacity: 0,\n  transform: 'scaleY(0.8)'\n})), transition(':enter, hidden => visible', [group([animate('0.03s linear', style({\n  opacity: 1\n})), animate('0.12s cubic-bezier(0, 0, 0.2, 1)', style({\n  transform: 'scaleY(1)'\n}))])]), transition(':leave, visible => hidden', [animate('0.075s linear', style({\n  opacity: 0\n}))])]);\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n  constructor( /** Reference to the autocomplete panel that emitted the event. */\n  source, /** Option that was selected. */\n  option) {\n    this.source = source;\n    this.option = option;\n  }\n}\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n  providedIn: 'root',\n  factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    autoActiveFirstOption: false,\n    autoSelectActiveOption: false,\n    hideSingleSelectionIndicator: false,\n    requireSelection: false\n  };\n}\n/** Autocomplete component. */\nclass MatAutocomplete {\n  /** Whether the autocomplete panel is open. */\n  get isOpen() {\n    return this._isOpen && this.showPanel;\n  }\n  /** @docs-private Sets the theme color of the panel. */\n  _setColor(value) {\n    this._color = value;\n    this._setThemeClasses(this._classList);\n  }\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  set classList(value) {\n    if (value && value.length) {\n      this._classList = coerceStringArray(value).reduce((classList, className) => {\n        classList[className] = true;\n        return classList;\n      }, {});\n    } else {\n      this._classList = {};\n    }\n    this._setVisibilityClasses(this._classList);\n    this._setThemeClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  /** Whether checkmark indicator for single-selection options is hidden. */\n  get hideSingleSelectionIndicator() {\n    return this._hideSingleSelectionIndicator;\n  }\n  set hideSingleSelectionIndicator(value) {\n    this._hideSingleSelectionIndicator = value;\n    this._syncParentProperties();\n  }\n  /** Syncs the parent state with the individual options. */\n  _syncParentProperties() {\n    if (this.options) {\n      for (const option of this.options) {\n        option._changeDetectorRef.markForCheck();\n      }\n    }\n  }\n  constructor(_changeDetectorRef, _elementRef, _defaults, platform) {\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    this._defaults = _defaults;\n    this._activeOptionChanges = Subscription.EMPTY;\n    /** Class to apply to the panel when it's visible. */\n    this._visibleClass = 'mat-mdc-autocomplete-visible';\n    /** Class to apply to the panel when it's hidden. */\n    this._hiddenClass = 'mat-mdc-autocomplete-hidden';\n    /** Emits when the panel animation is done. Null if the panel doesn't animate. */\n    this._animationDone = new EventEmitter();\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    this.showPanel = false;\n    this._isOpen = false;\n    /** Function that maps an option's control value to its display value in the trigger. */\n    this.displayWith = null;\n    /** Event that is emitted whenever an option from the list is selected. */\n    this.optionSelected = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is opened. */\n    this.opened = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is closed. */\n    this.closed = new EventEmitter();\n    /** Emits whenever an option is activated. */\n    this.optionActivated = new EventEmitter();\n    this._classList = {};\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n    // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n    // Safari using VoiceOver. We should occasionally check back to see whether the bug\n    // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n    // option altogether.\n    this.inertGroups = platform?.SAFARI || false;\n    this.autoActiveFirstOption = !!_defaults.autoActiveFirstOption;\n    this.autoSelectActiveOption = !!_defaults.autoSelectActiveOption;\n    this.requireSelection = !!_defaults.requireSelection;\n    this._hideSingleSelectionIndicator = this._defaults.hideSingleSelectionIndicator ?? false;\n  }\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap().skipPredicate(this._skipPredicate);\n    this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n      if (this.isOpen) {\n        this.optionActivated.emit({\n          source: this,\n          option: this.options.toArray()[index] || null\n        });\n      }\n    });\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n  ngOnDestroy() {\n    this._keyManager?.destroy();\n    this._activeOptionChanges.unsubscribe();\n    this._animationDone.complete();\n  }\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop) {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n  /** Returns the panel's scrollTop. */\n  _getScrollTop() {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Emits the `select` event. */\n  _emitSelectEvent(option) {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n  /** Gets the aria-labelledby for the autocomplete panel. */\n  _getPanelAriaLabelledby(labelId) {\n    if (this.ariaLabel) {\n      return null;\n    }\n    const labelExpression = labelId ? labelId + ' ' : '';\n    return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n  }\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  _setVisibilityClasses(classList) {\n    classList[this._visibleClass] = this.showPanel;\n    classList[this._hiddenClass] = !this.showPanel;\n  }\n  /** Sets the theming classes on a classlist based on the theme of the panel. */\n  _setThemeClasses(classList) {\n    classList['mat-primary'] = this._color === 'primary';\n    classList['mat-warn'] = this._color === 'warn';\n    classList['mat-accent'] = this._color === 'accent';\n  }\n  // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n  // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n  // recommendation.\n  //\n  // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n  // makes a few exceptions for compound widgets.\n  //\n  // From [Developing a Keyboard Interface](\n  // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n  //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n  //   Listbox...\"\n  //\n  // The user can focus disabled options using the keyboard, but the user cannot click disabled\n  // options.\n  _skipPredicate() {\n    return false;\n  }\n  static #_ = this.ɵfac = function MatAutocomplete_Factory(t) {\n    return new (t || MatAutocomplete)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS), i0.ɵɵdirectiveInject(i1.Platform));\n  };\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatAutocomplete,\n    selectors: [[\"mat-autocomplete\"]],\n    contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n        i0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.options = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n      }\n    },\n    viewQuery: function MatAutocomplete_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TemplateRef, 7);\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n      }\n    },\n    hostAttrs: [\"ngSkipHydration\", \"\", 1, \"mat-mdc-autocomplete\"],\n    inputs: {\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n      displayWith: \"displayWith\",\n      autoActiveFirstOption: [\"autoActiveFirstOption\", \"autoActiveFirstOption\", booleanAttribute],\n      autoSelectActiveOption: [\"autoSelectActiveOption\", \"autoSelectActiveOption\", booleanAttribute],\n      requireSelection: [\"requireSelection\", \"requireSelection\", booleanAttribute],\n      panelWidth: \"panelWidth\",\n      disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute],\n      classList: [\"class\", \"classList\"],\n      hideSingleSelectionIndicator: [\"hideSingleSelectionIndicator\", \"hideSingleSelectionIndicator\", booleanAttribute]\n    },\n    outputs: {\n      optionSelected: \"optionSelected\",\n      opened: \"opened\",\n      closed: \"closed\",\n      optionActivated: \"optionActivated\"\n    },\n    exportAs: [\"matAutocomplete\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MAT_OPTION_PARENT_COMPONENT,\n      useExisting: MatAutocomplete\n    }]), i0.ɵɵInputTransformsFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    consts: [[\"role\", \"listbox\", 1, \"mat-mdc-autocomplete-panel\", \"mdc-menu-surface\", \"mdc-menu-surface--open\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]],\n    template: function MatAutocomplete_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 5, \"ng-template\");\n      }\n    },\n    dependencies: [i2.NgClass],\n    styles: [\"div.mat-mdc-autocomplete-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-autocomplete-background-color)}.cdk-high-contrast-active div.mat-mdc-autocomplete-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden}mat-autocomplete{display:none}\"],\n    encapsulation: 2,\n    data: {\n      animation: [panelAnimation]\n    },\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatAutocomplete, [{\n    type: Component,\n    args: [{\n      selector: 'mat-autocomplete',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      exportAs: 'matAutocomplete',\n      host: {\n        'class': 'mat-mdc-autocomplete',\n        'ngSkipHydration': ''\n      },\n      providers: [{\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatAutocomplete\n      }],\n      animations: [panelAnimation],\n      template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div\\n    class=\\\"mat-mdc-autocomplete-panel mdc-menu-surface mdc-menu-surface--open\\\"\\n    role=\\\"listbox\\\"\\n    [id]=\\\"id\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n    [@panelAnimation]=\\\"isOpen ? 'visible' : 'hidden'\\\"\\n    (@panelAnimation.done)=\\\"_animationDone.next($event)\\\"\\n    #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n      styles: [\"div.mat-mdc-autocomplete-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-autocomplete-background-color)}.cdk-high-contrast-active div.mat-mdc-autocomplete-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden}mat-autocomplete{display:none}\"]\n    }]\n  }], () => [{\n    type: i0.ChangeDetectorRef\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n    }]\n  }, {\n    type: i1.Platform\n  }], {\n    template: [{\n      type: ViewChild,\n      args: [TemplateRef, {\n        static: true\n      }]\n    }],\n    panel: [{\n      type: ViewChild,\n      args: ['panel']\n    }],\n    options: [{\n      type: ContentChildren,\n      args: [MatOption, {\n        descendants: true\n      }]\n    }],\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MAT_OPTGROUP, {\n        descendants: true\n      }]\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    displayWith: [{\n      type: Input\n    }],\n    autoActiveFirstOption: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    autoSelectActiveOption: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    requireSelection: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    panelWidth: [{\n      type: Input\n    }],\n    disableRipple: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    optionSelected: [{\n      type: Output\n    }],\n    opened: [{\n      type: Output\n    }],\n    closed: [{\n      type: Output\n    }],\n    optionActivated: [{\n      type: Output\n    }],\n    classList: [{\n      type: Input,\n      args: ['class']\n    }],\n    hideSingleSelectionIndicator: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }]\n  });\n})();\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin {\n  constructor( /** Reference to the element on which the directive is applied. */\n  elementRef) {\n    this.elementRef = elementRef;\n  }\n  static #_ = this.ɵfac = function MatAutocompleteOrigin_Factory(t) {\n    return new (t || MatAutocompleteOrigin)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatAutocompleteOrigin,\n    selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]],\n    exportAs: [\"matAutocompleteOrigin\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n    type: Directive,\n    args: [{\n      selector: '[matAutocompleteOrigin]',\n      exportAs: 'matAutocompleteOrigin'\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }], null);\n})();\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' + 'Make sure that the id passed to the `matAutocomplete` is correct and that ' + \"you're attempting to open it after the ngAfterContentInit hook.\");\n}\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass MatAutocompleteTrigger {\n  constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n    this._element = _element;\n    this._overlay = _overlay;\n    this._viewContainerRef = _viewContainerRef;\n    this._zone = _zone;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    this._formField = _formField;\n    this._document = _document;\n    this._viewportRuler = _viewportRuler;\n    this._defaults = _defaults;\n    this._componentDestroyed = false;\n    /** Whether or not the label state is being overridden. */\n    this._manuallyFloatingLabel = false;\n    /** Subscription to viewport size changes. */\n    this._viewportSubscription = Subscription.EMPTY;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    this._canOpenOnNextFocus = true;\n    /** Stream of keyboard events that can close the panel. */\n    this._closeKeyEventStream = new Subject();\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    this._windowBlurHandler = () => {\n      // If the user blurred the window while the autocomplete is focused, it means that it'll be\n      // refocused when they come back. In this case we want to skip the first focus event, if the\n      // pane was closed, in order to avoid reopening it unintentionally.\n      this._canOpenOnNextFocus = this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n    };\n    /** `View -> model callback called when value changes` */\n    this._onChange = () => {};\n    /** `View -> model callback called when autocomplete has been touched` */\n    this._onTouched = () => {};\n    /**\n     * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n     * will render the panel underneath the trigger if there is enough space for it to fit in\n     * the viewport, otherwise the panel will be shown above it. If the position is set to\n     * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n     * whether it fits completely in the viewport.\n     */\n    this.position = 'auto';\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    this.autocompleteAttribute = 'off';\n    /** Class to apply to the panel when it's above the input. */\n    this._aboveClass = 'mat-mdc-autocomplete-panel-above';\n    this._overlayAttached = false;\n    /** Stream of changes to the selection state of the autocomplete options. */\n    this.optionSelections = defer(() => {\n      const options = this.autocomplete ? this.autocomplete.options : null;\n      if (options) {\n        return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n      }\n      // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n      // Return a stream that we'll replace with the real one once everything is in place.\n      return this._zone.onStable.pipe(take(1), switchMap(() => this.optionSelections));\n    });\n    /** Handles keyboard events coming from the overlay panel. */\n    this._handlePanelKeydown = event => {\n      // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n      // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n      if (event.keyCode === ESCAPE && !hasModifierKey(event) || event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey')) {\n        // If the user had typed something in before we autoselected an option, and they decided\n        // to cancel the selection, restore the input value to the one they had typed in.\n        if (this._pendingAutoselectedOption) {\n          this._updateNativeInputValue(this._valueBeforeAutoSelection ?? '');\n          this._pendingAutoselectedOption = null;\n        }\n        this._closeKeyEventStream.next();\n        this._resetActiveItem();\n        // We need to stop propagation, otherwise the event will eventually\n        // reach the input itself and cause the overlay to be reopened.\n        event.stopPropagation();\n        event.preventDefault();\n      }\n    };\n    /**\n     * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n     * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n     * panel. Track the modal we have changed so we can undo the changes on destroy.\n     */\n    this._trackedModal = null;\n    this._scrollStrategy = scrollStrategy;\n  }\n  ngAfterViewInit() {\n    const window = this._getWindow();\n    if (typeof window !== 'undefined') {\n      this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n    }\n  }\n  ngOnChanges(changes) {\n    if (changes['position'] && this._positionStrategy) {\n      this._setStrategyPositions(this._positionStrategy);\n      if (this.panelOpen) {\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n  ngOnDestroy() {\n    const window = this._getWindow();\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n    this._clearFromModal();\n  }\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen() {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  /** Opens the autocomplete suggestion panel. */\n  openPanel() {\n    this._attachOverlay();\n    this._floatLabel();\n    // Add aria-owns attribute when the autocomplete becomes visible.\n    if (this._trackedModal) {\n      const panelId = this.autocomplete.id;\n      addAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n    }\n  }\n  /** Closes the autocomplete suggestion panel. */\n  closePanel() {\n    this._resetLabel();\n    if (!this._overlayAttached) {\n      return;\n    }\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      // The `NgZone.onStable` always emits outside of the Angular zone,\n      // so all the subscriptions from `_subscribeToClosingActions()` are also outside of the Angular zone.\n      // We should manually run in Angular zone to update UI after panel closing.\n      this._zone.run(() => {\n        this.autocomplete.closed.emit();\n      });\n    }\n    this.autocomplete._isOpen = this._overlayAttached = false;\n    this._pendingAutoselectedOption = null;\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n    this._updatePanelState();\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n    // Remove aria-owns attribute when the autocomplete is no longer visible.\n    if (this._trackedModal) {\n      const panelId = this.autocomplete.id;\n      removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n    }\n  }\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition() {\n    if (this._overlayAttached) {\n      this._overlayRef.updatePosition();\n    }\n  }\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions() {\n    return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) : of()).pipe(\n    // Normalize the output so we return a consistent type.\n    map(event => event instanceof MatOptionSelectionChange ? event : null));\n  }\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption() {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n    return null;\n  }\n  /** Stream of clicks outside of the autocomplete panel. */\n  _getOutsideClickStream() {\n    return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend')).pipe(filter(event => {\n      // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n      // fall back to check the first element in the path of the click event.\n      const clickTarget = _getEventTarget(event);\n      const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n      const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n      return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n      // Normally focus moves inside `mousedown` so this condition will almost always be\n      // true. Its main purpose is to handle the case where the input is focused from an\n      // outside click which propagates up to the `body` listener within the same sequence\n      // and causes the panel to close immediately (see #3106).\n      this._document.activeElement !== this._element.nativeElement && (!formField || !formField.contains(clickTarget)) && (!customOrigin || !customOrigin.contains(clickTarget)) && !!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget);\n    }));\n  }\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value) {\n    Promise.resolve(null).then(() => this._assignOptionValue(value));\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n  _handleKeydown(event) {\n    const keyCode = event.keyCode;\n    const hasModifier = hasModifierKey(event);\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE && !hasModifier) {\n      event.preventDefault();\n    }\n    if (this.activeOption && keyCode === ENTER && this.panelOpen && !hasModifier) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n      if (keyCode === TAB || isArrowKey && !hasModifier && this.panelOpen) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n        if (this.autocomplete.autoSelectActiveOption && this.activeOption) {\n          if (!this._pendingAutoselectedOption) {\n            this._valueBeforeAutoSelection = this._element.nativeElement.value;\n          }\n          this._pendingAutoselectedOption = this.activeOption;\n          this._assignOptionValue(this.activeOption.value);\n        }\n      }\n    }\n  }\n  _handleInput(event) {\n    let target = event.target;\n    let value = target.value;\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._pendingAutoselectedOption = null;\n      // If selection is required we don't write to the CVA while the user is typing.\n      // At the end of the selection either the user will have picked something\n      // or we'll reset the value back to null.\n      if (!this.autocomplete || !this.autocomplete.requireSelection) {\n        this._onChange(value);\n      }\n      if (!value) {\n        this._clearPreviousSelectedOption(null, false);\n      }\n      if (this._canOpen() && this._document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n  _handleFocus() {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n  _handleClick() {\n    if (this._canOpen() && !this.panelOpen) {\n      this.openPanel();\n    }\n  }\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  _floatLabel(shouldAnimate = false) {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n      this._manuallyFloatingLabel = true;\n    }\n  }\n  /** If the label has been manually elevated, return it to its normal state. */\n  _resetLabel() {\n    if (this._manuallyFloatingLabel) {\n      if (this._formField) {\n        this._formField.floatLabel = 'auto';\n      }\n      this._manuallyFloatingLabel = false;\n    }\n  }\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  _subscribeToClosingActions() {\n    const firstStable = this._zone.onStable.pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()),\n    // Defer emitting to the stream until the next tick, because changing\n    // bindings in here will cause \"changed after checked\" errors.\n    delay(0));\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges).pipe(\n    // create a new stream of panelClosingActions, replacing any previous streams\n    // that were created, and flatten it so our stream only emits closing events...\n    switchMap(() => {\n      // The `NgZone.onStable` always emits outside of the Angular zone, thus we have to re-enter\n      // the Angular zone. This will lead to change detection being called outside of the Angular\n      // zone and the `autocomplete.opened` will also emit outside of the Angular.\n      this._zone.run(() => {\n        const wasOpen = this.panelOpen;\n        this._resetActiveItem();\n        this._updatePanelState();\n        this._changeDetectorRef.detectChanges();\n        if (this.panelOpen) {\n          this._overlayRef.updatePosition();\n        }\n        if (wasOpen !== this.panelOpen) {\n          // If the `panelOpen` state changed, we need to make sure to emit the `opened` or\n          // `closed` event, because we may not have emitted it. This can happen\n          // - if the users opens the panel and there are no options, but the\n          //   options come in slightly later or as a result of the value changing,\n          // - if the panel is closed after the user entered a string that did not match any\n          //   of the available options,\n          // - if a valid string is entered after an invalid one.\n          if (this.panelOpen) {\n            this._emitOpened();\n          } else {\n            this.autocomplete.closed.emit();\n          }\n        }\n      });\n      return this.panelClosingActions;\n    }),\n    // when the first closing event occurs...\n    take(1))\n    // set the value, close the panel, and complete.\n    .subscribe(event => this._setValueAndClose(event));\n  }\n  /**\n   * Emits the opened event once it's known that the panel will be shown and stores\n   * the state of the trigger right before the opening sequence was finished.\n   */\n  _emitOpened() {\n    this.autocomplete.opened.emit();\n  }\n  /** Destroys the autocomplete suggestion panel. */\n  _destroyPanel() {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n  _assignOptionValue(value) {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    this._updateNativeInputValue(toDisplay != null ? toDisplay : '');\n  }\n  _updateNativeInputValue(value) {\n    // We want to clear the previous selection if our new value is falsy. e.g: reactive form field\n    // being reset.\n    if (!value) {\n      this._clearPreviousSelectedOption(null, false);\n    }\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = value;\n    } else {\n      this._element.nativeElement.value = value;\n    }\n    this._previousValue = value;\n  }\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  _setValueAndClose(event) {\n    const panel = this.autocomplete;\n    const toSelect = event ? event.source : this._pendingAutoselectedOption;\n    if (toSelect) {\n      this._clearPreviousSelectedOption(toSelect);\n      this._assignOptionValue(toSelect.value);\n      // TODO(crisbeto): this should wait until the animation is done, otherwise the value\n      // gets reset while the panel is still animating which looks glitchy. It'll likely break\n      // some tests to change it at this point.\n      this._onChange(toSelect.value);\n      panel._emitSelectEvent(toSelect);\n      this._element.nativeElement.focus();\n    } else if (panel.requireSelection && this._element.nativeElement.value !== this._valueOnAttach) {\n      this._clearPreviousSelectedOption(null);\n      this._assignOptionValue(null);\n      // Wait for the animation to finish before clearing the form control value, otherwise\n      // the options might change while the animation is running which looks glitchy.\n      if (panel._animationDone) {\n        panel._animationDone.pipe(take(1)).subscribe(() => this._onChange(null));\n      } else {\n        this._onChange(null);\n      }\n    }\n    this.closePanel();\n  }\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  _clearPreviousSelectedOption(skip, emitEvent) {\n    // Null checks are necessary here, because the autocomplete\n    // or its options may not have been assigned yet.\n    this.autocomplete?.options?.forEach(option => {\n      if (option !== skip && option.selected) {\n        option.deselect(emitEvent);\n      }\n    });\n  }\n  _attachOverlay() {\n    if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n    let overlayRef = this._overlayRef;\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n        id: this._formField?.getLabelId()\n      });\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n      this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n        if (this.panelOpen && overlayRef) {\n          overlayRef.updateSize({\n            width: this._getPanelWidth()\n          });\n        }\n      });\n    } else {\n      // Update the trigger, panel width and direction, in case anything has changed.\n      this._positionStrategy.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({\n        width: this._getPanelWidth()\n      });\n    }\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._valueOnAttach = this._element.nativeElement.value;\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n    const wasOpen = this.panelOpen;\n    this.autocomplete._isOpen = this._overlayAttached = true;\n    this.autocomplete._setColor(this._formField?.color);\n    this._updatePanelState();\n    this._applyModalPanelOwnership();\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this._emitOpened();\n    }\n  }\n  /** Updates the panel's visibility state and any trigger state tied to id. */\n  _updatePanelState() {\n    this.autocomplete._setVisibility();\n    // Note that here we subscribe and unsubscribe based on the panel's visiblity state,\n    // because the act of subscribing will prevent events from reaching other overlays and\n    // we don't want to block the events if there are no options.\n    if (this.panelOpen) {\n      const overlayRef = this._overlayRef;\n      if (!this._keydownSubscription) {\n        // Use the `keydownEvents` in order to take advantage of\n        // the overlay event targeting provided by the CDK overlay.\n        this._keydownSubscription = overlayRef.keydownEvents().subscribe(this._handlePanelKeydown);\n      }\n      if (!this._outsideClickSubscription) {\n        // Subscribe to the pointer events stream so that it doesn't get picked up by other overlays.\n        // TODO(crisbeto): we should switch `_getOutsideClickStream` eventually to use this stream,\n        // but the behvior isn't exactly the same and it ends up breaking some internal tests.\n        this._outsideClickSubscription = overlayRef.outsidePointerEvents().subscribe();\n      }\n    } else {\n      this._keydownSubscription?.unsubscribe();\n      this._outsideClickSubscription?.unsubscribe();\n      this._keydownSubscription = this._outsideClickSubscription = null;\n    }\n  }\n  _getOverlayConfig() {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir ?? undefined,\n      panelClass: this._defaults?.overlayPanelClass\n    });\n  }\n  _getOverlayPosition() {\n    const strategy = this._overlay.position().flexibleConnectedTo(this._getConnectedElement()).withFlexibleDimensions(false).withPush(false);\n    this._setStrategyPositions(strategy);\n    this._positionStrategy = strategy;\n    return strategy;\n  }\n  /** Sets the positions on a position strategy based on the directive's input state. */\n  _setStrategyPositions(positionStrategy) {\n    // Note that we provide horizontal fallback positions, even though by default the dropdown\n    // width matches the input, because consumers can override the width. See #18854.\n    const belowPositions = [{\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'end',\n      originY: 'bottom',\n      overlayX: 'end',\n      overlayY: 'top'\n    }];\n    // The overlay edge connected to the trigger should have squared corners, while\n    // the opposite end has rounded corners. We apply a CSS class to swap the\n    // border-radius based on the overlay position.\n    const panelClass = this._aboveClass;\n    const abovePositions = [{\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n      panelClass\n    }, {\n      originX: 'end',\n      originY: 'top',\n      overlayX: 'end',\n      overlayY: 'bottom',\n      panelClass\n    }];\n    let positions;\n    if (this.position === 'above') {\n      positions = abovePositions;\n    } else if (this.position === 'below') {\n      positions = belowPositions;\n    } else {\n      positions = [...belowPositions, ...abovePositions];\n    }\n    positionStrategy.withPositions(positions);\n  }\n  _getConnectedElement() {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n  _getPanelWidth() {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n  /** Returns the width of the input element, so the panel width can match it. */\n  _getHostWidth() {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n  /**\n   * Reset the active item to -1. This is so that pressing arrow keys will activate the correct\n   * option.\n   *\n   * If the consumer opted-in to automatically activatating the first option, activate the first\n   * *enabled* option.\n   */\n  _resetActiveItem() {\n    const autocomplete = this.autocomplete;\n    if (autocomplete.autoActiveFirstOption) {\n      // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n      // because it activates the first option that passes the skip predicate, rather than the\n      // first *enabled* option.\n      let firstEnabledOptionIndex = -1;\n      for (let index = 0; index < autocomplete.options.length; index++) {\n        const option = autocomplete.options.get(index);\n        if (!option.disabled) {\n          firstEnabledOptionIndex = index;\n          break;\n        }\n      }\n      autocomplete._keyManager.setActiveItem(firstEnabledOptionIndex);\n    } else {\n      autocomplete._keyManager.setActiveItem(-1);\n    }\n  }\n  /** Determines whether the panel can be opened. */\n  _canOpen() {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this.autocompleteDisabled;\n  }\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  _getWindow() {\n    return this._document?.defaultView || window;\n  }\n  /** Scrolls to a particular option in the list. */\n  _scrollToOption(index) {\n    // Given that we are not actually focusing active options, we must manually adjust scroll\n    // to reveal options below the fold. First, we find the offset of the option from the top\n    // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n    // the panel height + the option height, so the active option will be just visible at the\n    // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n    // will become the offset. If that offset is visible within the panel already, the scrollTop is\n    // not adjusted.\n    const autocomplete = this.autocomplete;\n    const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n    if (index === 0 && labelCount === 1) {\n      // If we've got one group label before the option and we're at the top option,\n      // scroll the list to the top. This is better UX than scrolling the list to the\n      // top of the option, because it allows the user to read the top group's label.\n      autocomplete._setScrollTop(0);\n    } else if (autocomplete.panel) {\n      const option = autocomplete.options.toArray()[index];\n      if (option) {\n        const element = option._getHostElement();\n        const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n        autocomplete._setScrollTop(newScrollPosition);\n      }\n    }\n  }\n  /**\n   * If the autocomplete trigger is inside of an `aria-modal` element, connect\n   * that modal to the options panel with `aria-owns`.\n   *\n   * For some browser + screen reader combinations, when navigation is inside\n   * of an `aria-modal` element, the screen reader treats everything outside\n   * of that modal as hidden or invisible.\n   *\n   * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n   * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n   * from reaching the panel.\n   *\n   * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n   * the options panel. This effectively communicates to assistive technology that the\n   * options panel is part of the same interaction as the modal.\n   *\n   * At time of this writing, this issue is present in VoiceOver.\n   * See https://github.com/angular/components/issues/20694\n   */\n  _applyModalPanelOwnership() {\n    // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n    // the `LiveAnnouncer` and any other usages.\n    //\n    // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n    // section of the DOM we need to look through. This should cover all the cases we support, but\n    // the selector can be expanded if it turns out to be too narrow.\n    const modal = this._element.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n    if (!modal) {\n      // Most commonly, the autocomplete trigger is not inside a modal.\n      return;\n    }\n    const panelId = this.autocomplete.id;\n    if (this._trackedModal) {\n      removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n    }\n    addAriaReferencedId(modal, 'aria-owns', panelId);\n    this._trackedModal = modal;\n  }\n  /** Clears the references to the listbox overlay element from the modal it was added to. */\n  _clearFromModal() {\n    if (this._trackedModal) {\n      const panelId = this.autocomplete.id;\n      removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n      this._trackedModal = null;\n    }\n  }\n  static #_ = this.ɵfac = function MatAutocompleteTrigger_Factory(t) {\n    return new (t || MatAutocompleteTrigger)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1$1.Overlay), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(i2$1.Directionality, 8), i0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(i3.ViewportRuler), i0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, 8));\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatAutocompleteTrigger,\n    selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]],\n    hostAttrs: [1, \"mat-mdc-autocomplete-trigger\"],\n    hostVars: 7,\n    hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() {\n          return ctx._handleFocus();\n        })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() {\n          return ctx._onTouched();\n        })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) {\n          return ctx._handleInput($event);\n        })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) {\n          return ctx._handleKeydown($event);\n        })(\"click\", function MatAutocompleteTrigger_click_HostBindingHandler() {\n          return ctx._handleClick();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-controls\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", ctx.autocompleteDisabled ? null : \"listbox\");\n      }\n    },\n    inputs: {\n      autocomplete: [\"matAutocomplete\", \"autocomplete\"],\n      position: [\"matAutocompletePosition\", \"position\"],\n      connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"],\n      autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"],\n      autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\", booleanAttribute]\n    },\n    exportAs: [\"matAutocompleteTrigger\"],\n    features: [i0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), i0.ɵɵInputTransformsFeature, i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n    type: Directive,\n    args: [{\n      selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n      host: {\n        'class': 'mat-mdc-autocomplete-trigger',\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n        '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n        '[attr.aria-controls]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n        '[attr.aria-haspopup]': 'autocompleteDisabled ? null : \"listbox\"',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': '_handleFocus()',\n        '(blur)': '_onTouched()',\n        '(input)': '_handleInput($event)',\n        '(keydown)': '_handleKeydown($event)',\n        '(click)': '_handleClick()'\n      },\n      exportAs: 'matAutocompleteTrigger',\n      providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: i1$1.Overlay\n  }, {\n    type: i0.ViewContainerRef\n  }, {\n    type: i0.NgZone\n  }, {\n    type: i0.ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n    }]\n  }, {\n    type: i2$1.Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: i4.MatFormField,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_FORM_FIELD]\n    }, {\n      type: Host\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: i3.ViewportRuler\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n    }]\n  }], {\n    autocomplete: [{\n      type: Input,\n      args: ['matAutocomplete']\n    }],\n    position: [{\n      type: Input,\n      args: ['matAutocompletePosition']\n    }],\n    connectedTo: [{\n      type: Input,\n      args: ['matAutocompleteConnectedTo']\n    }],\n    autocompleteAttribute: [{\n      type: Input,\n      args: ['autocomplete']\n    }],\n    autocompleteDisabled: [{\n      type: Input,\n      args: [{\n        alias: 'matAutocompleteDisabled',\n        transform: booleanAttribute\n      }]\n    }]\n  });\n})();\nclass MatAutocompleteModule {\n  static #_ = this.ɵfac = function MatAutocompleteModule_Factory(t) {\n    return new (t || MatAutocompleteModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatAutocompleteModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule, CdkScrollableModule, MatOptionModule, MatCommonModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatAutocompleteModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule],\n      exports: [CdkScrollableModule, MatAutocomplete, MatOptionModule, MatCommonModule, MatAutocompleteTrigger, MatAutocompleteOrigin],\n      declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n      providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, getMatAutocompleteMissingPanelError };","map":{"version":3,"names":["i0","InjectionToken","EventEmitter","booleanAttribute","TemplateRef","Component","ViewEncapsulation","ChangeDetectionStrategy","Inject","ViewChild","ContentChildren","Input","Output","Directive","forwardRef","Optional","Host","NgModule","MAT_OPTION_PARENT_COMPONENT","MatOption","MAT_OPTGROUP","MatOptionSelectionChange","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MatOptionModule","MatCommonModule","i2","DOCUMENT","CommonModule","i3","CdkScrollableModule","i1$1","Overlay","OverlayConfig","OverlayModule","ActiveDescendantKeyManager","addAriaReferencedId","removeAriaReferencedId","coerceStringArray","i1","_getEventTarget","trigger","state","style","transition","group","animate","Subscription","Subject","defer","merge","of","fromEvent","ESCAPE","hasModifierKey","UP_ARROW","ENTER","DOWN_ARROW","TAB","TemplatePortal","NG_VALUE_ACCESSOR","i4","MAT_FORM_FIELD","startWith","switchMap","take","filter","map","tap","delay","i2$1","_c0","MatAutocomplete_ng_template_0_Template","rf","ctx","_r4","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","MatAutocomplete_ng_template_0_Template_div_animation_panelAnimation_done_0_listener","$event","ɵɵrestoreView","ctx_r3","ɵɵnextContext","ɵɵresetView","_animationDone","next","ɵɵprojection","ɵɵelementEnd","formFieldId_r1","id","ctx_r0","ɵɵproperty","_classList","isOpen","ɵɵattribute","ariaLabel","_getPanelAriaLabelledby","_c1","panelAnimation","opacity","transform","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","constructor","source","option","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","autoSelectActiveOption","hideSingleSelectionIndicator","requireSelection","MatAutocomplete","_isOpen","showPanel","_setColor","value","_color","_setThemeClasses","classList","length","reduce","className","_setVisibilityClasses","_elementRef","nativeElement","_hideSingleSelectionIndicator","_syncParentProperties","options","_changeDetectorRef","markForCheck","_defaults","platform","_activeOptionChanges","EMPTY","_visibleClass","_hiddenClass","displayWith","optionSelected","opened","closed","optionActivated","inertGroups","SAFARI","ngAfterContentInit","_keyManager","withWrap","skipPredicate","_skipPredicate","change","subscribe","index","emit","toArray","_setVisibility","ngOnDestroy","destroy","unsubscribe","complete","_setScrollTop","scrollTop","panel","_getScrollTop","_emitSelectEvent","event","labelId","labelExpression","ariaLabelledby","_","ɵfac","MatAutocomplete_Factory","t","ɵɵdirectiveInject","ChangeDetectorRef","ElementRef","Platform","_2","ɵcmp","ɵɵdefineComponent","type","selectors","contentQueries","MatAutocomplete_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","optionGroups","viewQuery","MatAutocomplete_Query","ɵɵviewQuery","template","first","hostAttrs","inputs","panelWidth","disableRipple","outputs","exportAs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInputTransformsFeature","ngContentSelectors","decls","vars","consts","MatAutocomplete_Template","ɵɵprojectionDef","ɵɵtemplate","dependencies","NgClass","styles","encapsulation","data","animation","changeDetection","ngDevMode","ɵsetClassMetadata","args","selector","None","OnPush","host","providers","animations","undefined","decorators","static","descendants","MatAutocompleteOrigin","elementRef","MatAutocompleteOrigin_Factory","ɵdir","ɵɵdefineDirective","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","multi","getMatAutocompleteMissingPanelError","Error","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_componentDestroyed","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_aboveClass","_overlayAttached","optionSelections","autocomplete","changes","pipe","onSelectionChange","onStable","_handlePanelKeydown","keyCode","_pendingAutoselectedOption","_updateNativeInputValue","_valueBeforeAutoSelection","_resetActiveItem","stopPropagation","preventDefault","_trackedModal","_scrollStrategy","ngAfterViewInit","window","_getWindow","runOutsideAngular","addEventListener","ngOnChanges","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","_clearFromModal","openPanel","_attachOverlay","_floatLabel","panelId","closePanel","_resetLabel","run","hasAttached","detach","_closingActionsSubscription","_updatePanelState","detectChanges","panelClosingActions","tabOut","_getOutsideClickStream","detachments","activeOption","activeItem","clickTarget","formField","customOrigin","connectedTo","contains","overlayElement","writeValue","Promise","resolve","then","_assignOptionValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_handleKeydown","hasModifier","_selectViaInteraction","prevActiveItem","isArrowKey","onKeydown","_canOpen","_scrollToOption","activeItemIndex","_handleInput","target","parseFloat","_previousValue","_clearPreviousSelectedOption","_handleFocus","_handleClick","shouldAnimate","floatLabel","_animateAndLockLabel","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","_emitOpened","_setValueAndClose","dispose","toDisplay","_control","toSelect","focus","_valueOnAttach","skip","emitEvent","forEach","selected","deselect","overlayRef","_portal","getLabelId","create","_getOverlayConfig","updateSize","width","_getPanelWidth","setOrigin","_getConnectedElement","attach","color","_applyModalPanelOwnership","_keydownSubscription","keydownEvents","_outsideClickSubscription","outsidePointerEvents","positionStrategy","_getOverlayPosition","direction","panelClass","overlayPanelClass","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPositions","originX","originY","overlayX","overlayY","abovePositions","positions","withPositions","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","firstEnabledOptionIndex","get","setActiveItem","element","readOnly","autocompleteDisabled","defaultView","labelCount","_getHostElement","newScrollPosition","offsetTop","offsetHeight","modal","closest","MatAutocompleteTrigger_Factory","ViewContainerRef","NgZone","Directionality","ViewportRuler","hostVars","hostBindings","MatAutocompleteTrigger_HostBindings","MatAutocompleteTrigger_focusin_HostBindingHandler","MatAutocompleteTrigger_blur_HostBindingHandler","MatAutocompleteTrigger_input_HostBindingHandler","MatAutocompleteTrigger_keydown_HostBindingHandler","MatAutocompleteTrigger_click_HostBindingHandler","toString","ɵɵNgOnChangesFeature","MatFormField","alias","MatAutocompleteModule","MatAutocompleteModule_Factory","ɵmod","ɵɵdefineNgModule","_3","ɵinj","ɵɵdefineInjector","imports","exports","declarations"],"sources":["/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/node_modules/@angular/material/fesm2022/autocomplete.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, booleanAttribute, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, ViewChild, ContentChildren, Input, Output, Directive, forwardRef, Optional, Host, NgModule } from '@angular/core';\nimport { MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ActiveDescendantKeyManager, addAriaReferencedId, removeAriaReferencedId } from '@angular/cdk/a11y';\nimport { coerceStringArray } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getEventTarget } from '@angular/cdk/platform';\nimport { trigger, state, style, transition, group, animate } from '@angular/animations';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { ESCAPE, hasModifierKey, UP_ARROW, ENTER, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i4 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { startWith, switchMap, take, filter, map, tap, delay } from 'rxjs/operators';\nimport * as i2$1 from '@angular/cdk/bidi';\n\n// Animation values come from\n// https://github.com/material-components/material-components-web/blob/master/packages/mdc-menu-surface/_mixins.scss\n// TODO(mmalerba): Ideally find a way to import the values from MDC's code.\nconst panelAnimation = trigger('panelAnimation', [\n    state('void, hidden', style({\n        opacity: 0,\n        transform: 'scaleY(0.8)',\n    })),\n    transition(':enter, hidden => visible', [\n        group([\n            animate('0.03s linear', style({ opacity: 1 })),\n            animate('0.12s cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'scaleY(1)' })),\n        ]),\n    ]),\n    transition(':leave, visible => hidden', [animate('0.075s linear', style({ opacity: 0 }))]),\n]);\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        autoActiveFirstOption: false,\n        autoSelectActiveOption: false,\n        hideSingleSelectionIndicator: false,\n        requireSelection: false,\n    };\n}\n/** Autocomplete component. */\nclass MatAutocomplete {\n    /** Whether the autocomplete panel is open. */\n    get isOpen() {\n        return this._isOpen && this.showPanel;\n    }\n    /** @docs-private Sets the theme color of the panel. */\n    _setColor(value) {\n        this._color = value;\n        this._setThemeClasses(this._classList);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = coerceStringArray(value).reduce((classList, className) => {\n                classList[className] = true;\n                return classList;\n            }, {});\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._setThemeClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = value;\n        this._syncParentProperties();\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n    constructor(_changeDetectorRef, _elementRef, _defaults, platform) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._defaults = _defaults;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /** Class to apply to the panel when it's visible. */\n        this._visibleClass = 'mat-mdc-autocomplete-visible';\n        /** Class to apply to the panel when it's hidden. */\n        this._hiddenClass = 'mat-mdc-autocomplete-hidden';\n        /** Emits when the panel animation is done. Null if the panel doesn't animate. */\n        this._animationDone = new EventEmitter();\n        /** Whether the autocomplete panel should be visible, depending on option length. */\n        this.showPanel = false;\n        this._isOpen = false;\n        /** Function that maps an option's control value to its display value in the trigger. */\n        this.displayWith = null;\n        /** Event that is emitted whenever an option from the list is selected. */\n        this.optionSelected = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is opened. */\n        this.opened = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is closed. */\n        this.closed = new EventEmitter();\n        /** Emits whenever an option is activated. */\n        this.optionActivated = new EventEmitter();\n        this._classList = {};\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n        // Safari using VoiceOver. We should occasionally check back to see whether the bug\n        // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n        // option altogether.\n        this.inertGroups = platform?.SAFARI || false;\n        this.autoActiveFirstOption = !!_defaults.autoActiveFirstOption;\n        this.autoSelectActiveOption = !!_defaults.autoSelectActiveOption;\n        this.requireSelection = !!_defaults.requireSelection;\n        this._hideSingleSelectionIndicator = this._defaults.hideSingleSelectionIndicator ?? false;\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withWrap()\n            .skipPredicate(this._skipPredicate);\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            if (this.isOpen) {\n                this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n            }\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._activeOptionChanges.unsubscribe();\n        this._animationDone.complete();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n    _setVisibilityClasses(classList) {\n        classList[this._visibleClass] = this.showPanel;\n        classList[this._hiddenClass] = !this.showPanel;\n    }\n    /** Sets the theming classes on a classlist based on the theme of the panel. */\n    _setThemeClasses(classList) {\n        classList['mat-primary'] = this._color === 'primary';\n        classList['mat-warn'] = this._color === 'warn';\n        classList['mat-accent'] = this._color === 'accent';\n    }\n    // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n    // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n    // recommendation.\n    //\n    // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n    // makes a few exceptions for compound widgets.\n    //\n    // From [Developing a Keyboard Interface](\n    // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n    //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n    //   Listbox...\"\n    //\n    // The user can focus disabled options using the keyboard, but the user cannot click disabled\n    // options.\n    _skipPredicate() {\n        return false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatAutocomplete, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS }, { token: i1.Platform }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"17.0.0\", type: MatAutocomplete, selector: \"mat-autocomplete\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], displayWith: \"displayWith\", autoActiveFirstOption: [\"autoActiveFirstOption\", \"autoActiveFirstOption\", booleanAttribute], autoSelectActiveOption: [\"autoSelectActiveOption\", \"autoSelectActiveOption\", booleanAttribute], requireSelection: [\"requireSelection\", \"requireSelection\", booleanAttribute], panelWidth: \"panelWidth\", disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute], classList: [\"class\", \"classList\"], hideSingleSelectionIndicator: [\"hideSingleSelectionIndicator\", \"hideSingleSelectionIndicator\", booleanAttribute] }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, host: { attributes: { \"ngSkipHydration\": \"\" }, classAttribute: \"mat-mdc-autocomplete\" }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], queries: [{ propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], viewQueries: [{ propertyName: \"template\", first: true, predicate: TemplateRef, descendants: true, static: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }], exportAs: [\"matAutocomplete\"], ngImport: i0, template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div\\n    class=\\\"mat-mdc-autocomplete-panel mdc-menu-surface mdc-menu-surface--open\\\"\\n    role=\\\"listbox\\\"\\n    [id]=\\\"id\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n    [@panelAnimation]=\\\"isOpen ? 'visible' : 'hidden'\\\"\\n    (@panelAnimation.done)=\\\"_animationDone.next($event)\\\"\\n    #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"div.mat-mdc-autocomplete-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-autocomplete-background-color)}.cdk-high-contrast-active div.mat-mdc-autocomplete-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden}mat-autocomplete{display:none}\"], dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [panelAnimation], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatAutocomplete, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-autocomplete', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'matAutocomplete', host: {\n                        'class': 'mat-mdc-autocomplete',\n                        'ngSkipHydration': '',\n                    }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], animations: [panelAnimation], template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div\\n    class=\\\"mat-mdc-autocomplete-panel mdc-menu-surface mdc-menu-surface--open\\\"\\n    role=\\\"listbox\\\"\\n    [id]=\\\"id\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n    [@panelAnimation]=\\\"isOpen ? 'visible' : 'hidden'\\\"\\n    (@panelAnimation.done)=\\\"_animationDone.next($event)\\\"\\n    #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"div.mat-mdc-autocomplete-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-autocomplete-background-color)}.cdk-high-contrast-active div.mat-mdc-autocomplete-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden}mat-autocomplete{display:none}\"] }]\n        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n                }] }, { type: i1.Platform }], propDecorators: { template: [{\n                type: ViewChild,\n                args: [TemplateRef, { static: true }]\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], displayWith: [{\n                type: Input\n            }], autoActiveFirstOption: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], autoSelectActiveOption: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], requireSelection: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], panelWidth: [{\n                type: Input\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], optionSelected: [{\n                type: Output\n            }], opened: [{\n                type: Output\n            }], closed: [{\n                type: Output\n            }], optionActivated: [{\n                type: Output\n            }], classList: [{\n                type: Input,\n                args: ['class']\n            }], hideSingleSelectionIndicator: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatAutocompleteOrigin, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.0\", type: MatAutocompleteOrigin, selector: \"[matAutocompleteOrigin]\", exportAs: [\"matAutocompleteOrigin\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatAutocompleteOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matAutocompleteOrigin]',\n                    exportAs: 'matAutocompleteOrigin',\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }] });\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true,\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        \"you're attempting to open it after the ngAfterContentInit hook.\");\n}\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass MatAutocompleteTrigger {\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._defaults = _defaults;\n        this._componentDestroyed = false;\n        /** Whether or not the label state is being overridden. */\n        this._manuallyFloatingLabel = false;\n        /** Subscription to viewport size changes. */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /** Stream of keyboard events that can close the panel. */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when autocomplete has been touched` */\n        this._onTouched = () => { };\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * @docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        /** Class to apply to the panel when it's above the input. */\n        this._aboveClass = 'mat-mdc-autocomplete-panel-above';\n        this._overlayAttached = false;\n        /** Stream of changes to the selection state of the autocomplete options. */\n        this.optionSelections = defer(() => {\n            const options = this.autocomplete ? this.autocomplete.options : null;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable.pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        /** Handles keyboard events coming from the overlay panel. */\n        this._handlePanelKeydown = (event) => {\n            // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n            // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n            if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n                (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n                // If the user had typed something in before we autoselected an option, and they decided\n                // to cancel the selection, restore the input value to the one they had typed in.\n                if (this._pendingAutoselectedOption) {\n                    this._updateNativeInputValue(this._valueBeforeAutoSelection ?? '');\n                    this._pendingAutoselectedOption = null;\n                }\n                this._closeKeyEventStream.next();\n                this._resetActiveItem();\n                // We need to stop propagation, otherwise the event will eventually\n                // reach the input itself and cause the overlay to be reopened.\n                event.stopPropagation();\n                event.preventDefault();\n            }\n        };\n        /**\n         * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n         * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n         * panel. Track the modal we have changed so we can undo the changes on destroy.\n         */\n        this._trackedModal = null;\n        this._scrollStrategy = scrollStrategy;\n    }\n    ngAfterViewInit() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n        this._clearFromModal();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n        // Add aria-owns attribute when the autocomplete becomes visible.\n        if (this._trackedModal) {\n            const panelId = this.autocomplete.id;\n            addAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            // The `NgZone.onStable` always emits outside of the Angular zone,\n            // so all the subscriptions from `_subscribeToClosingActions()` are also outside of the Angular zone.\n            // We should manually run in Angular zone to update UI after panel closing.\n            this._zone.run(() => {\n                this.autocomplete.closed.emit();\n            });\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        this._pendingAutoselectedOption = null;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        this._updatePanelState();\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n        // Remove aria-owns attribute when the autocomplete is no longer visible.\n        if (this._trackedModal) {\n            const panelId = this.autocomplete.id;\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef\n            ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached))\n            : of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => (event instanceof MatOptionSelectionChange ? event : null)));\n    }\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend')).pipe(filter(event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            const clickTarget = _getEventTarget(event);\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n            return (this._overlayAttached &&\n                clickTarget !== this._element.nativeElement &&\n                // Normally focus moves inside `mousedown` so this condition will almost always be\n                // true. Its main purpose is to handle the case where the input is focused from an\n                // outside click which propagates up to the `body` listener within the same sequence\n                // and causes the panel to close immediately (see #3106).\n                this._document.activeElement !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                !!this._overlayRef &&\n                !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._assignOptionValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const hasModifier = hasModifierKey(event);\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE && !hasModifier) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen && !hasModifier) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (keyCode === TAB || (isArrowKey && !hasModifier && this.panelOpen)) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n                if (this.autocomplete.autoSelectActiveOption && this.activeOption) {\n                    if (!this._pendingAutoselectedOption) {\n                        this._valueBeforeAutoSelection = this._element.nativeElement.value;\n                    }\n                    this._pendingAutoselectedOption = this.activeOption;\n                    this._assignOptionValue(this.activeOption.value);\n                }\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._pendingAutoselectedOption = null;\n            // If selection is required we don't write to the CVA while the user is typing.\n            // At the end of the selection either the user will have picked something\n            // or we'll reset the value back to null.\n            if (!this.autocomplete || !this.autocomplete.requireSelection) {\n                this._onChange(value);\n            }\n            if (!value) {\n                this._clearPreviousSelectedOption(null, false);\n            }\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    _handleClick() {\n        if (this._canOpen() && !this.panelOpen) {\n            this.openPanel();\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            if (this._formField) {\n                this._formField.floatLabel = 'auto';\n            }\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const firstStable = this._zone.onStable.pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return (merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n            // The `NgZone.onStable` always emits outside of the Angular zone, thus we have to re-enter\n            // the Angular zone. This will lead to change detection being called outside of the Angular\n            // zone and the `autocomplete.opened` will also emit outside of the Angular.\n            this._zone.run(() => {\n                const wasOpen = this.panelOpen;\n                this._resetActiveItem();\n                this._updatePanelState();\n                this._changeDetectorRef.detectChanges();\n                if (this.panelOpen) {\n                    this._overlayRef.updatePosition();\n                }\n                if (wasOpen !== this.panelOpen) {\n                    // If the `panelOpen` state changed, we need to make sure to emit the `opened` or\n                    // `closed` event, because we may not have emitted it. This can happen\n                    // - if the users opens the panel and there are no options, but the\n                    //   options come in slightly later or as a result of the value changing,\n                    // - if the panel is closed after the user entered a string that did not match any\n                    //   of the available options,\n                    // - if a valid string is entered after an invalid one.\n                    if (this.panelOpen) {\n                        this._emitOpened();\n                    }\n                    else {\n                        this.autocomplete.closed.emit();\n                    }\n                }\n            });\n            return this.panelClosingActions;\n        }), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event)));\n    }\n    /**\n     * Emits the opened event once it's known that the panel will be shown and stores\n     * the state of the trigger right before the opening sequence was finished.\n     */\n    _emitOpened() {\n        this.autocomplete.opened.emit();\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    _assignOptionValue(value) {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith\n            ? this.autocomplete.displayWith(value)\n            : value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        this._updateNativeInputValue(toDisplay != null ? toDisplay : '');\n    }\n    _updateNativeInputValue(value) {\n        // We want to clear the previous selection if our new value is falsy. e.g: reactive form field\n        // being reset.\n        if (!value) {\n            this._clearPreviousSelectedOption(null, false);\n        }\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = value;\n        }\n        else {\n            this._element.nativeElement.value = value;\n        }\n        this._previousValue = value;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        const panel = this.autocomplete;\n        const toSelect = event ? event.source : this._pendingAutoselectedOption;\n        if (toSelect) {\n            this._clearPreviousSelectedOption(toSelect);\n            this._assignOptionValue(toSelect.value);\n            // TODO(crisbeto): this should wait until the animation is done, otherwise the value\n            // gets reset while the panel is still animating which looks glitchy. It'll likely break\n            // some tests to change it at this point.\n            this._onChange(toSelect.value);\n            panel._emitSelectEvent(toSelect);\n            this._element.nativeElement.focus();\n        }\n        else if (panel.requireSelection &&\n            this._element.nativeElement.value !== this._valueOnAttach) {\n            this._clearPreviousSelectedOption(null);\n            this._assignOptionValue(null);\n            // Wait for the animation to finish before clearing the form control value, otherwise\n            // the options might change while the animation is running which looks glitchy.\n            if (panel._animationDone) {\n                panel._animationDone.pipe(take(1)).subscribe(() => this._onChange(null));\n            }\n            else {\n                this._onChange(null);\n            }\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip, emitEvent) {\n        // Null checks are necessary here, because the autocomplete\n        // or its options may not have been assigned yet.\n        this.autocomplete?.options?.forEach(option => {\n            if (option !== skip && option.selected) {\n                option.deselect(emitEvent);\n            }\n        });\n    }\n    _attachOverlay() {\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n                id: this._formField?.getLabelId(),\n            });\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._valueOnAttach = this._element.nativeElement.value;\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        this.autocomplete._setColor(this._formField?.color);\n        this._updatePanelState();\n        this._applyModalPanelOwnership();\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this._emitOpened();\n        }\n    }\n    /** Updates the panel's visibility state and any trigger state tied to id. */\n    _updatePanelState() {\n        this.autocomplete._setVisibility();\n        // Note that here we subscribe and unsubscribe based on the panel's visiblity state,\n        // because the act of subscribing will prevent events from reaching other overlays and\n        // we don't want to block the events if there are no options.\n        if (this.panelOpen) {\n            const overlayRef = this._overlayRef;\n            if (!this._keydownSubscription) {\n                // Use the `keydownEvents` in order to take advantage of\n                // the overlay event targeting provided by the CDK overlay.\n                this._keydownSubscription = overlayRef.keydownEvents().subscribe(this._handlePanelKeydown);\n            }\n            if (!this._outsideClickSubscription) {\n                // Subscribe to the pointer events stream so that it doesn't get picked up by other overlays.\n                // TODO(crisbeto): we should switch `_getOutsideClickStream` eventually to use this stream,\n                // but the behvior isn't exactly the same and it ends up breaking some internal tests.\n                this._outsideClickSubscription = overlayRef.outsidePointerEvents().subscribe();\n            }\n        }\n        else {\n            this._keydownSubscription?.unsubscribe();\n            this._outsideClickSubscription?.unsubscribe();\n            this._keydownSubscription = this._outsideClickSubscription = null;\n        }\n    }\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir ?? undefined,\n            panelClass: this._defaults?.overlayPanelClass,\n        });\n    }\n    _getOverlayPosition() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = this._aboveClass;\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass },\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Reset the active item to -1. This is so that pressing arrow keys will activate the correct\n     * option.\n     *\n     * If the consumer opted-in to automatically activatating the first option, activate the first\n     * *enabled* option.\n     */\n    _resetActiveItem() {\n        const autocomplete = this.autocomplete;\n        if (autocomplete.autoActiveFirstOption) {\n            // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n            // because it activates the first option that passes the skip predicate, rather than the\n            // first *enabled* option.\n            let firstEnabledOptionIndex = -1;\n            for (let index = 0; index < autocomplete.options.length; index++) {\n                const option = autocomplete.options.get(index);\n                if (!option.disabled) {\n                    firstEnabledOptionIndex = index;\n                    break;\n                }\n            }\n            autocomplete._keyManager.setActiveItem(firstEnabledOptionIndex);\n        }\n        else {\n            autocomplete._keyManager.setActiveItem(-1);\n        }\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this.autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document?.defaultView || window;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        const autocomplete = this.autocomplete;\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            autocomplete._setScrollTop(0);\n        }\n        else if (autocomplete.panel) {\n            const option = autocomplete.options.toArray()[index];\n            if (option) {\n                const element = option._getHostElement();\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n                autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n    }\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n        // the `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modal = this._element.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        if (!modal) {\n            // Most commonly, the autocomplete trigger is not inside a modal.\n            return;\n        }\n        const panelId = this.autocomplete.id;\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n        addAriaReferencedId(modal, 'aria-owns', panelId);\n        this._trackedModal = modal;\n    }\n    /** Clears the references to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n        if (this._trackedModal) {\n            const panelId = this.autocomplete.id;\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n            this._trackedModal = null;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatAutocompleteTrigger, deps: [{ token: i0.ElementRef }, { token: i1$1.Overlay }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: MAT_AUTOCOMPLETE_SCROLL_STRATEGY }, { token: i2$1.Directionality, optional: true }, { token: MAT_FORM_FIELD, host: true, optional: true }, { token: DOCUMENT, optional: true }, { token: i3.ViewportRuler }, { token: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.0.0\", type: MatAutocompleteTrigger, selector: \"input[matAutocomplete], textarea[matAutocomplete]\", inputs: { autocomplete: [\"matAutocomplete\", \"autocomplete\"], position: [\"matAutocompletePosition\", \"position\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\", booleanAttribute] }, host: { listeners: { \"focusin\": \"_handleFocus()\", \"blur\": \"_onTouched()\", \"input\": \"_handleInput($event)\", \"keydown\": \"_handleKeydown($event)\", \"click\": \"_handleClick()\" }, properties: { \"attr.autocomplete\": \"autocompleteAttribute\", \"attr.role\": \"autocompleteDisabled ? null : \\\"combobox\\\"\", \"attr.aria-autocomplete\": \"autocompleteDisabled ? null : \\\"list\\\"\", \"attr.aria-activedescendant\": \"(panelOpen && activeOption) ? activeOption.id : null\", \"attr.aria-expanded\": \"autocompleteDisabled ? null : panelOpen.toString()\", \"attr.aria-controls\": \"(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id\", \"attr.aria-haspopup\": \"autocompleteDisabled ? null : \\\"listbox\\\"\" }, classAttribute: \"mat-mdc-autocomplete-trigger\" }, providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR], exportAs: [\"matAutocompleteTrigger\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatAutocompleteTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                    host: {\n                        'class': 'mat-mdc-autocomplete-trigger',\n                        '[attr.autocomplete]': 'autocompleteAttribute',\n                        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                        '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                        '[attr.aria-controls]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                        '[attr.aria-haspopup]': 'autocompleteDisabled ? null : \"listbox\"',\n                        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                        // a little earlier. This avoids issues where IE delays the focusing of the input.\n                        '(focusin)': '_handleFocus()',\n                        '(blur)': '_onTouched()',\n                        '(input)': '_handleInput($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(click)': '_handleClick()',\n                    },\n                    exportAs: 'matAutocompleteTrigger',\n                    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR],\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1$1.Overlay }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n                }] }, { type: i2$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i4.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }, {\n                    type: Host\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i3.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n                }] }], propDecorators: { autocomplete: [{\n                type: Input,\n                args: ['matAutocomplete']\n            }], position: [{\n                type: Input,\n                args: ['matAutocompletePosition']\n            }], connectedTo: [{\n                type: Input,\n                args: ['matAutocompleteConnectedTo']\n            }], autocompleteAttribute: [{\n                type: Input,\n                args: ['autocomplete']\n            }], autocompleteDisabled: [{\n                type: Input,\n                args: [{ alias: 'matAutocompleteDisabled', transform: booleanAttribute }]\n            }] } });\n\nclass MatAutocompleteModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatAutocompleteModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.0\", ngImport: i0, type: MatAutocompleteModule, declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin], imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule], exports: [CdkScrollableModule,\n            MatAutocomplete,\n            MatOptionModule,\n            MatCommonModule,\n            MatAutocompleteTrigger,\n            MatAutocompleteOrigin] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatAutocompleteModule, providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule, CdkScrollableModule,\n            MatOptionModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MatAutocompleteModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatAutocomplete,\n                        MatOptionModule,\n                        MatCommonModule,\n                        MatAutocompleteTrigger,\n                        MatAutocompleteOrigin,\n                    ],\n                    declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                    providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, getMatAutocompleteMissingPanelError };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}