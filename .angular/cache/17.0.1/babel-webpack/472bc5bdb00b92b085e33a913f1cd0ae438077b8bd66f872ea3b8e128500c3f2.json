{"ast":null,"code":"import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NgIf } from '@angular/common';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { Subject, takeUntil } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/services/loading\";\nimport * as i2 from \"@angular/material/progress-bar\";\nfunction FuseLoadingBarComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"mat-progress-bar\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"mode\", ctx_r0.mode)(\"value\", ctx_r0.progress);\n  }\n}\nexport class FuseLoadingBarComponent {\n  /**\n   * Constructor\n   */\n  constructor(_fuseLoadingService) {\n    this._fuseLoadingService = _fuseLoadingService;\n    this.autoMode = true;\n    this.progress = 0;\n    this.show = false;\n    this._unsubscribeAll = new Subject();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Lifecycle hooks\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * On changes\n   *\n   * @param changes\n   */\n  ngOnChanges(changes) {\n    // Auto mode\n    if ('autoMode' in changes) {\n      // Set the auto mode in the service\n      this._fuseLoadingService.setAutoMode(coerceBooleanProperty(changes.autoMode.currentValue));\n    }\n  }\n  /**\n   * On init\n   */\n  ngOnInit() {\n    // Subscribe to the service\n    this._fuseLoadingService.mode$.pipe(takeUntil(this._unsubscribeAll)).subscribe(value => {\n      this.mode = value;\n    });\n    this._fuseLoadingService.progress$.pipe(takeUntil(this._unsubscribeAll)).subscribe(value => {\n      this.progress = value;\n    });\n    this._fuseLoadingService.show$.pipe(takeUntil(this._unsubscribeAll)).subscribe(value => {\n      this.show = value;\n    });\n  }\n  /**\n   * On destroy\n   */\n  ngOnDestroy() {\n    // Unsubscribe from all subscriptions\n    this._unsubscribeAll.next(null);\n    this._unsubscribeAll.complete();\n  }\n  static #_ = this.ɵfac = function FuseLoadingBarComponent_Factory(t) {\n    return new (t || FuseLoadingBarComponent)(i0.ɵɵdirectiveInject(i1.FuseLoadingService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FuseLoadingBarComponent,\n    selectors: [[\"fuse-loading-bar\"]],\n    inputs: {\n      autoMode: \"autoMode\"\n    },\n    exportAs: [\"fuseLoadingBar\"],\n    standalone: true,\n    features: [i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [3, \"mode\", \"value\"]],\n    template: function FuseLoadingBarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, FuseLoadingBarComponent_ng_container_0_Template, 2, 2, \"ng-container\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.show);\n      }\n    },\n    dependencies: [NgIf, MatProgressBarModule, i2.MatProgressBar],\n    styles: [\"fuse-loading-bar {\\n  position: fixed;\\n  top: 0;\\n  z-index: 999;\\n  width: 100%;\\n  height: 6px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9AZnVzZS9jb21wb25lbnRzL2xvYWRpbmctYmFyL2xvYWRpbmctYmFyLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksZUFBQTtFQUNBLE1BQUE7RUFDQSxZQUFBO0VBQ0EsV0FBQTtFQUNBLFdBQUE7QUFDSiIsInNvdXJjZXNDb250ZW50IjpbImZ1c2UtbG9hZGluZy1iYXIge1xuICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICB0b3A6IDA7XG4gICAgei1pbmRleDogOTk5O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogNnB4O1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"],\n    encapsulation: 2\n  });\n}","map":{"version":3,"names":["coerceBooleanProperty","NgIf","MatProgressBarModule","Subject","takeUntil","i0","ɵɵelementContainerStart","ɵɵelement","ɵɵelementContainerEnd","ɵɵadvance","ɵɵproperty","ctx_r0","mode","progress","FuseLoadingBarComponent","constructor","_fuseLoadingService","autoMode","show","_unsubscribeAll","ngOnChanges","changes","setAutoMode","currentValue","ngOnInit","mode$","pipe","subscribe","value","progress$","show$","ngOnDestroy","next","complete","_","ɵɵdirectiveInject","i1","FuseLoadingService","_2","selectors","inputs","exportAs","standalone","features","ɵɵNgOnChangesFeature","ɵɵStandaloneFeature","decls","vars","consts","template","FuseLoadingBarComponent_Template","rf","ctx","ɵɵtemplate","FuseLoadingBarComponent_ng_container_0_Template","i2","MatProgressBar","styles","encapsulation"],"sources":["/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/src/@fuse/components/loading-bar/loading-bar.component.ts","/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/src/@fuse/components/loading-bar/loading-bar.component.html"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NgIf } from '@angular/common';\nimport { Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { FuseLoadingService } from '@fuse/services/loading';\nimport { Subject, takeUntil } from 'rxjs';\n\n@Component({\n    selector     : 'fuse-loading-bar',\n    templateUrl  : './loading-bar.component.html',\n    styleUrls    : ['./loading-bar.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    exportAs     : 'fuseLoadingBar',\n    standalone   : true,\n    imports      : [NgIf, MatProgressBarModule],\n})\nexport class FuseLoadingBarComponent implements OnChanges, OnInit, OnDestroy\n{\n    @Input() autoMode: boolean = true;\n    mode: 'determinate' | 'indeterminate';\n    progress: number = 0;\n    show: boolean = false;\n    private _unsubscribeAll: Subject<any> = new Subject<any>();\n\n    /**\n     * Constructor\n     */\n    constructor(private _fuseLoadingService: FuseLoadingService)\n    {\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On changes\n     *\n     * @param changes\n     */\n    ngOnChanges(changes: SimpleChanges): void\n    {\n        // Auto mode\n        if ( 'autoMode' in changes )\n        {\n            // Set the auto mode in the service\n            this._fuseLoadingService.setAutoMode(coerceBooleanProperty(changes.autoMode.currentValue));\n        }\n    }\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        // Subscribe to the service\n        this._fuseLoadingService.mode$\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe((value) =>\n            {\n                this.mode = value;\n            });\n\n        this._fuseLoadingService.progress$\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe((value) =>\n            {\n                this.progress = value;\n            });\n\n        this._fuseLoadingService.show$\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe((value) =>\n            {\n                this.show = value;\n            });\n\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next(null);\n        this._unsubscribeAll.complete();\n    }\n}\n","<ng-container *ngIf=\"show\">\n    <mat-progress-bar\n        [mode]=\"mode\"\n        [value]=\"progress\"></mat-progress-bar>\n</ng-container>\n"],"mappings":"AAAA,SAASA,qBAAqB,QAAQ,uBAAuB;AAC7D,SAASC,IAAI,QAAQ,iBAAiB;AAEtC,SAASC,oBAAoB,QAAQ,gCAAgC;AAErE,SAASC,OAAO,EAAEC,SAAS,QAAQ,MAAM;;;;;;ICLzCC,EAAA,CAAAC,uBAAA,GAA2B;IACvBD,EAAA,CAAAE,SAAA,0BAE0C;IAC9CF,EAAA,CAAAG,qBAAA,EAAe;;;;IAFPH,EAAA,CAAAI,SAAA,GAAa;IAAbJ,EAAA,CAAAK,UAAA,SAAAC,MAAA,CAAAC,IAAA,CAAa,UAAAD,MAAA,CAAAE,QAAA;;;ADcrB,OAAM,MAAOC,uBAAuB;EAQhC;;;EAGAC,YAAoBC,mBAAuC;IAAvC,KAAAA,mBAAmB,GAAnBA,mBAAmB;IAT9B,KAAAC,QAAQ,GAAY,IAAI;IAEjC,KAAAJ,QAAQ,GAAW,CAAC;IACpB,KAAAK,IAAI,GAAY,KAAK;IACb,KAAAC,eAAe,GAAiB,IAAIhB,OAAO,EAAO;EAO1D;EAEA;EACA;EACA;EAEA;;;;;EAKAiB,WAAWA,CAACC,OAAsB;IAE9B;IACA,IAAK,UAAU,IAAIA,OAAO,EAC1B;MACI;MACA,IAAI,CAACL,mBAAmB,CAACM,WAAW,CAACtB,qBAAqB,CAACqB,OAAO,CAACJ,QAAQ,CAACM,YAAY,CAAC,CAAC;;EAElG;EAEA;;;EAGAC,QAAQA,CAAA;IAEJ;IACA,IAAI,CAACR,mBAAmB,CAACS,KAAK,CACzBC,IAAI,CAACtB,SAAS,CAAC,IAAI,CAACe,eAAe,CAAC,CAAC,CACrCQ,SAAS,CAAEC,KAAK,IAAI;MAEjB,IAAI,CAAChB,IAAI,GAAGgB,KAAK;IACrB,CAAC,CAAC;IAEN,IAAI,CAACZ,mBAAmB,CAACa,SAAS,CAC7BH,IAAI,CAACtB,SAAS,CAAC,IAAI,CAACe,eAAe,CAAC,CAAC,CACrCQ,SAAS,CAAEC,KAAK,IAAI;MAEjB,IAAI,CAACf,QAAQ,GAAGe,KAAK;IACzB,CAAC,CAAC;IAEN,IAAI,CAACZ,mBAAmB,CAACc,KAAK,CACzBJ,IAAI,CAACtB,SAAS,CAAC,IAAI,CAACe,eAAe,CAAC,CAAC,CACrCQ,SAAS,CAAEC,KAAK,IAAI;MAEjB,IAAI,CAACV,IAAI,GAAGU,KAAK;IACrB,CAAC,CAAC;EAEV;EAEA;;;EAGAG,WAAWA,CAAA;IAEP;IACA,IAAI,CAACZ,eAAe,CAACa,IAAI,CAAC,IAAI,CAAC;IAC/B,IAAI,CAACb,eAAe,CAACc,QAAQ,EAAE;EACnC;EAAC,QAAAC,CAAA,G;qBAvEQpB,uBAAuB,EAAAT,EAAA,CAAA8B,iBAAA,CAAAC,EAAA,CAAAC,kBAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAvBxB,uBAAuB;IAAAyB,SAAA;IAAAC,MAAA;MAAAvB,QAAA;IAAA;IAAAwB,QAAA;IAAAC,UAAA;IAAAC,QAAA,GAAAtC,EAAA,CAAAuC,oBAAA,EAAAvC,EAAA,CAAAwC,mBAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,iCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QChBpC9C,EAAA,CAAAgD,UAAA,IAAAC,+CAAA,0BAIe;;;QAJAjD,EAAA,CAAAK,UAAA,SAAA0C,GAAA,CAAAlC,IAAA,CAAU;;;mBDcLjB,IAAI,EAAEC,oBAAoB,EAAAqD,EAAA,CAAAC,cAAA;IAAAC,MAAA;IAAAC,aAAA;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}