{"ast":null,"code":"import { Observable, of, take, throwError } from 'rxjs';\nexport class FuseMockApiHandler {\n  /**\n   * Constructor\n   */\n  constructor(url, delay) {\n    this.url = url;\n    this.delay = delay;\n    // Private\n    this._reply = undefined;\n    this._replyCount = 0;\n    this._replied = 0;\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Accessors\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Getter for response callback\n   */\n  get response() {\n    // If the execution limit has been reached, throw an error\n    if (this._replyCount > 0 && this._replyCount <= this._replied) {\n      return throwError('Execution limit has been reached!');\n    }\n    // If the response callback has not been set, throw an error\n    if (!this._reply) {\n      return throwError('Response callback function does not exist!');\n    }\n    // If the request has not been set, throw an error\n    if (!this.request) {\n      return throwError('Request does not exist!');\n    }\n    // Increase the replied count\n    this._replied++;\n    // Execute the reply callback\n    const replyResult = this._reply({\n      request: this.request,\n      urlParams: this.urlParams\n    });\n    // If the result of the reply callback is an observable...\n    if (replyResult instanceof Observable) {\n      // Return the result as it is\n      return replyResult.pipe(take(1));\n    }\n    // Otherwise, return the result as an observable\n    return of(replyResult).pipe(take(1));\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Reply\n   *\n   * @param callback\n   */\n  reply(callback) {\n    // Store the reply\n    this._reply = callback;\n  }\n  /**\n   * Reply count\n   *\n   * @param count\n   */\n  replyCount(count) {\n    // Store the reply count\n    this._replyCount = count;\n  }\n}","map":{"version":3,"names":["Observable","of","take","throwError","FuseMockApiHandler","constructor","url","delay","_reply","undefined","_replyCount","_replied","response","request","replyResult","urlParams","pipe","reply","callback","replyCount","count"],"sources":["/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/src/@fuse/lib/mock-api/mock-api.request-handler.ts"],"sourcesContent":["import { HttpRequest } from '@angular/common/http';\nimport { FuseMockApiReplyCallback } from '@fuse/lib/mock-api/mock-api.types';\nimport { Observable, of, take, throwError } from 'rxjs';\n\nexport class FuseMockApiHandler\n{\n    request!: HttpRequest<any>;\n    urlParams!: { [key: string]: string };\n\n    // Private\n    private _reply: FuseMockApiReplyCallback = undefined;\n    private _replyCount = 0;\n    private _replied = 0;\n\n    /**\n     * Constructor\n     */\n    constructor(\n        public url: string,\n        public delay?: number,\n    )\n    {\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Getter for response callback\n     */\n    get response(): Observable<any>\n    {\n        // If the execution limit has been reached, throw an error\n        if ( this._replyCount > 0 && this._replyCount <= this._replied )\n        {\n            return throwError('Execution limit has been reached!');\n        }\n\n        // If the response callback has not been set, throw an error\n        if ( !this._reply )\n        {\n            return throwError('Response callback function does not exist!');\n        }\n\n        // If the request has not been set, throw an error\n        if ( !this.request )\n        {\n            return throwError('Request does not exist!');\n        }\n\n        // Increase the replied count\n        this._replied++;\n\n        // Execute the reply callback\n        const replyResult = this._reply({\n            request  : this.request,\n            urlParams: this.urlParams,\n        });\n\n        // If the result of the reply callback is an observable...\n        if ( replyResult instanceof Observable )\n        {\n            // Return the result as it is\n            return replyResult.pipe(take(1));\n        }\n\n        // Otherwise, return the result as an observable\n        return of(replyResult).pipe(take(1));\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Reply\n     *\n     * @param callback\n     */\n    reply(callback: FuseMockApiReplyCallback): void\n    {\n        // Store the reply\n        this._reply = callback;\n    }\n\n    /**\n     * Reply count\n     *\n     * @param count\n     */\n    replyCount(count: number): void\n    {\n        // Store the reply count\n        this._replyCount = count;\n    }\n}\n\n\n"],"mappings":"AAEA,SAASA,UAAU,EAAEC,EAAE,EAAEC,IAAI,EAAEC,UAAU,QAAQ,MAAM;AAEvD,OAAM,MAAOC,kBAAkB;EAU3B;;;EAGAC,YACWC,GAAW,EACXC,KAAc;IADd,KAAAD,GAAG,GAAHA,GAAG;IACH,KAAAC,KAAK,GAALA,KAAK;IAVhB;IACQ,KAAAC,MAAM,GAA6BC,SAAS;IAC5C,KAAAC,WAAW,GAAG,CAAC;IACf,KAAAC,QAAQ,GAAG,CAAC;EAUpB;EAEA;EACA;EACA;EAEA;;;EAGA,IAAIC,QAAQA,CAAA;IAER;IACA,IAAK,IAAI,CAACF,WAAW,GAAG,CAAC,IAAI,IAAI,CAACA,WAAW,IAAI,IAAI,CAACC,QAAQ,EAC9D;MACI,OAAOR,UAAU,CAAC,mCAAmC,CAAC;;IAG1D;IACA,IAAK,CAAC,IAAI,CAACK,MAAM,EACjB;MACI,OAAOL,UAAU,CAAC,4CAA4C,CAAC;;IAGnE;IACA,IAAK,CAAC,IAAI,CAACU,OAAO,EAClB;MACI,OAAOV,UAAU,CAAC,yBAAyB,CAAC;;IAGhD;IACA,IAAI,CAACQ,QAAQ,EAAE;IAEf;IACA,MAAMG,WAAW,GAAG,IAAI,CAACN,MAAM,CAAC;MAC5BK,OAAO,EAAI,IAAI,CAACA,OAAO;MACvBE,SAAS,EAAE,IAAI,CAACA;KACnB,CAAC;IAEF;IACA,IAAKD,WAAW,YAAYd,UAAU,EACtC;MACI;MACA,OAAOc,WAAW,CAACE,IAAI,CAACd,IAAI,CAAC,CAAC,CAAC,CAAC;;IAGpC;IACA,OAAOD,EAAE,CAACa,WAAW,CAAC,CAACE,IAAI,CAACd,IAAI,CAAC,CAAC,CAAC,CAAC;EACxC;EAEA;EACA;EACA;EAEA;;;;;EAKAe,KAAKA,CAACC,QAAkC;IAEpC;IACA,IAAI,CAACV,MAAM,GAAGU,QAAQ;EAC1B;EAEA;;;;;EAKAC,UAAUA,CAACC,KAAa;IAEpB;IACA,IAAI,CAACV,WAAW,GAAGU,KAAK;EAC5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}