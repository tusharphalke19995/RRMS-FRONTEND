{"ast":null,"code":"import { contacts } from 'app/mock-api/apps/contacts/data';\nimport { tasks } from 'app/mock-api/apps/tasks/data';\nimport { defaultNavigation } from 'app/mock-api/common/navigation/data';\nimport { cloneDeep } from 'lodash-es';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nimport * as i2 from \"@fuse/components/navigation\";\nexport class SearchMockApi {\n  /**\n   * Constructor\n   */\n  constructor(_fuseMockApiService, _fuseNavigationService) {\n    this._fuseMockApiService = _fuseMockApiService;\n    this._fuseNavigationService = _fuseNavigationService;\n    this._defaultNavigation = defaultNavigation;\n    this._contacts = contacts;\n    this._tasks = tasks;\n    // Register Mock API handlers\n    this.registerHandlers();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Register Mock API handlers\n   */\n  registerHandlers() {\n    // Get the flat navigation and store it\n    const flatNavigation = this._fuseNavigationService.getFlatNavigation(this._defaultNavigation);\n    // -----------------------------------------------------------------------------------------------------\n    // @ Search results - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPost('api/common/search').reply(({\n      request\n    }) => {\n      // Get the search query\n      const query = cloneDeep(request.body.query.toLowerCase());\n      // If the search query is an empty string,\n      // return an empty array\n      if (query === '') {\n        return [200, {\n          results: []\n        }];\n      }\n      // Filter the contacts\n      const contactsResults = cloneDeep(this._contacts).filter(contact => contact.name.toLowerCase().includes(query));\n      // Filter the navigation\n      const pagesResults = cloneDeep(flatNavigation).filter(page => page.title?.toLowerCase().includes(query) || page.subtitle && page.subtitle.includes(query));\n      // Filter the tasks\n      const tasksResults = cloneDeep(this._tasks).filter(task => task.title.toLowerCase().includes(query));\n      // Prepare the results array\n      const results = [];\n      // If there are contacts results...\n      if (contactsResults.length > 0) {\n        // Normalize the results\n        contactsResults.forEach(result => {\n          // Add a link\n          result.link = '/apps/contacts/' + result.id;\n          // Add the name as the value\n          result.value = result.name;\n        });\n        // Add to the results\n        results.push({\n          id: 'contacts',\n          label: 'Contacts',\n          results: contactsResults\n        });\n      }\n      // If there are page results...\n      if (pagesResults.length > 0) {\n        // Normalize the results\n        pagesResults.forEach(result => {\n          // Add the page title as the value\n          result.value = result.title;\n        });\n        // Add to the results\n        results.push({\n          id: 'pages',\n          label: 'Pages',\n          results: pagesResults\n        });\n      }\n      // If there are tasks results...\n      if (tasksResults.length > 0) {\n        // Normalize the results\n        tasksResults.forEach(result => {\n          // Add a link\n          result.link = '/apps/tasks/' + result.id;\n          // Add the title as the value\n          result.value = result.title;\n        });\n        // Add to the results\n        results.push({\n          id: 'tasks',\n          label: 'Tasks',\n          results: tasksResults\n        });\n      }\n      // Return the response\n      return [200, results];\n    });\n  }\n  static #_ = this.ɵfac = function SearchMockApi_Factory(t) {\n    return new (t || SearchMockApi)(i0.ɵɵinject(i1.FuseMockApiService), i0.ɵɵinject(i2.FuseNavigationService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SearchMockApi,\n    factory: SearchMockApi.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["contacts","tasks","defaultNavigation","cloneDeep","SearchMockApi","constructor","_fuseMockApiService","_fuseNavigationService","_defaultNavigation","_contacts","_tasks","registerHandlers","flatNavigation","getFlatNavigation","onPost","reply","request","query","body","toLowerCase","results","contactsResults","filter","contact","name","includes","pagesResults","page","title","subtitle","tasksResults","task","length","forEach","result","link","id","value","push","label","_","i0","ɵɵinject","i1","FuseMockApiService","i2","FuseNavigationService","_2","factory","ɵfac","providedIn"],"sources":["/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/src/app/mock-api/common/search/api.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { FuseNavigationItem, FuseNavigationService } from '@fuse/components/navigation';\nimport { FuseMockApiService } from '@fuse/lib/mock-api';\nimport { contacts } from 'app/mock-api/apps/contacts/data';\nimport { tasks } from 'app/mock-api/apps/tasks/data';\nimport { defaultNavigation } from 'app/mock-api/common/navigation/data';\nimport { cloneDeep } from 'lodash-es';\n\n@Injectable({providedIn: 'root'})\nexport class SearchMockApi\n{\n    private readonly _defaultNavigation: FuseNavigationItem[] = defaultNavigation;\n    private readonly _contacts: any[] = contacts;\n    private readonly _tasks: any[] = tasks;\n\n    /**\n     * Constructor\n     */\n    constructor(\n        private _fuseMockApiService: FuseMockApiService,\n        private _fuseNavigationService: FuseNavigationService,\n    )\n    {\n        // Register Mock API handlers\n        this.registerHandlers();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Register Mock API handlers\n     */\n    registerHandlers(): void\n    {\n        // Get the flat navigation and store it\n        const flatNavigation = this._fuseNavigationService.getFlatNavigation(this._defaultNavigation);\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Search results - GET\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPost('api/common/search')\n            .reply(({request}) =>\n            {\n                // Get the search query\n                const query = cloneDeep(request.body.query.toLowerCase());\n\n                // If the search query is an empty string,\n                // return an empty array\n                if ( query === '' )\n                {\n                    return [200, {results: []}];\n                }\n\n                // Filter the contacts\n                const contactsResults = cloneDeep(this._contacts)\n                    .filter(contact => contact.name.toLowerCase().includes(query));\n\n                // Filter the navigation\n                const pagesResults = cloneDeep(flatNavigation)\n                    .filter(page => (page.title?.toLowerCase().includes(query) || (page.subtitle && page.subtitle.includes(query))));\n\n                // Filter the tasks\n                const tasksResults = cloneDeep(this._tasks)\n                    .filter(task => task.title.toLowerCase().includes(query));\n\n                // Prepare the results array\n                const results = [];\n\n                // If there are contacts results...\n                if ( contactsResults.length > 0 )\n                {\n                    // Normalize the results\n                    contactsResults.forEach((result) =>\n                    {\n                        // Add a link\n                        result.link = '/apps/contacts/' + result.id;\n\n                        // Add the name as the value\n                        result.value = result.name;\n                    });\n\n                    // Add to the results\n                    results.push({\n                        id     : 'contacts',\n                        label  : 'Contacts',\n                        results: contactsResults,\n                    });\n                }\n\n                // If there are page results...\n                if ( pagesResults.length > 0 )\n                {\n                    // Normalize the results\n                    pagesResults.forEach((result: any) =>\n                    {\n                        // Add the page title as the value\n                        result.value = result.title;\n                    });\n\n                    // Add to the results\n                    results.push({\n                        id     : 'pages',\n                        label  : 'Pages',\n                        results: pagesResults,\n                    });\n                }\n\n                // If there are tasks results...\n                if ( tasksResults.length > 0 )\n                {\n                    // Normalize the results\n                    tasksResults.forEach((result) =>\n                    {\n                        // Add a link\n                        result.link = '/apps/tasks/' + result.id;\n\n                        // Add the title as the value\n                        result.value = result.title;\n                    });\n\n                    // Add to the results\n                    results.push({\n                        id     : 'tasks',\n                        label  : 'Tasks',\n                        results: tasksResults,\n                    });\n                }\n\n                // Return the response\n                return [200, results];\n            });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}