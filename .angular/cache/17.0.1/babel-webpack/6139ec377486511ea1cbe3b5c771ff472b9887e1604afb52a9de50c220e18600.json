{"ast":null,"code":"import { user as userData } from 'app/mock-api/common/user/data';\nimport { assign, cloneDeep } from 'lodash-es';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nexport class UserMockApi {\n  /**\n   * Constructor\n   */\n  constructor(_fuseMockApiService) {\n    this._fuseMockApiService = _fuseMockApiService;\n    this._user = userData;\n    // Register Mock API handlers\n    this.registerHandlers();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Register Mock API handlers\n   */\n  registerHandlers() {\n    // -----------------------------------------------------------------------------------------------------\n    // @ User - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/common/user').reply(() => [200, cloneDeep(this._user)]);\n    // -----------------------------------------------------------------------------------------------------\n    // @ User - PATCH\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPatch('api/common/user').reply(({\n      request\n    }) => {\n      // Get the user mock-api\n      const user = cloneDeep(request.body.user);\n      // Update the user mock-api\n      this._user = assign({}, this._user, user);\n      // Return the response\n      return [200, cloneDeep(this._user)];\n    });\n  }\n  static #_ = this.ɵfac = function UserMockApi_Factory(t) {\n    return new (t || UserMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserMockApi,\n    factory: UserMockApi.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["user","userData","assign","cloneDeep","UserMockApi","constructor","_fuseMockApiService","_user","registerHandlers","onGet","reply","onPatch","request","body","_","i0","ɵɵinject","i1","FuseMockApiService","_2","factory","ɵfac","providedIn"],"sources":["/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/src/app/mock-api/common/user/api.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { FuseMockApiService } from '@fuse/lib/mock-api';\nimport { user as userData } from 'app/mock-api/common/user/data';\nimport { assign, cloneDeep } from 'lodash-es';\n\n@Injectable({providedIn: 'root'})\nexport class UserMockApi\n{\n    private _user: any = userData;\n\n    /**\n     * Constructor\n     */\n    constructor(private _fuseMockApiService: FuseMockApiService)\n    {\n        // Register Mock API handlers\n        this.registerHandlers();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Register Mock API handlers\n     */\n    registerHandlers(): void\n    {\n        // -----------------------------------------------------------------------------------------------------\n        // @ User - GET\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onGet('api/common/user')\n            .reply(() => [200, cloneDeep(this._user)]);\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ User - PATCH\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPatch('api/common/user')\n            .reply(({request}) =>\n            {\n                // Get the user mock-api\n                const user = cloneDeep(request.body.user);\n\n                // Update the user mock-api\n                this._user = assign({}, this._user, user);\n\n                // Return the response\n                return [200, cloneDeep(this._user)];\n            });\n    }\n}\n"],"mappings":"AAEA,SAASA,IAAI,IAAIC,QAAQ,QAAQ,+BAA+B;AAChE,SAASC,MAAM,EAAEC,SAAS,QAAQ,WAAW;;;AAG7C,OAAM,MAAOC,WAAW;EAIpB;;;EAGAC,YAAoBC,mBAAuC;IAAvC,KAAAA,mBAAmB,GAAnBA,mBAAmB;IAL/B,KAAAC,KAAK,GAAQN,QAAQ;IAOzB;IACA,IAAI,CAACO,gBAAgB,EAAE;EAC3B;EAEA;EACA;EACA;EAEA;;;EAGAA,gBAAgBA,CAAA;IAEZ;IACA;IACA;IACA,IAAI,CAACF,mBAAmB,CACnBG,KAAK,CAAC,iBAAiB,CAAC,CACxBC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAEP,SAAS,CAAC,IAAI,CAACI,KAAK,CAAC,CAAC,CAAC;IAE9C;IACA;IACA;IACA,IAAI,CAACD,mBAAmB,CACnBK,OAAO,CAAC,iBAAiB,CAAC,CAC1BD,KAAK,CAAC,CAAC;MAACE;IAAO,CAAC,KAAI;MAEjB;MACA,MAAMZ,IAAI,GAAGG,SAAS,CAACS,OAAO,CAACC,IAAI,CAACb,IAAI,CAAC;MAEzC;MACA,IAAI,CAACO,KAAK,GAAGL,MAAM,CAAC,EAAE,EAAE,IAAI,CAACK,KAAK,EAAEP,IAAI,CAAC;MAEzC;MACA,OAAO,CAAC,GAAG,EAAEG,SAAS,CAAC,IAAI,CAACI,KAAK,CAAC,CAAC;IACvC,CAAC,CAAC;EACV;EAAC,QAAAO,CAAA,G;qBA7CQV,WAAW,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,kBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXf,WAAW;IAAAgB,OAAA,EAAXhB,WAAW,CAAAiB,IAAA;IAAAC,UAAA,EADC;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}