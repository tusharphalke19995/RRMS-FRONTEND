{"ast":null,"code":"import { FuseMockApiUtils } from '@fuse/lib/mock-api';\nimport { shortcuts as shortcutsData } from 'app/mock-api/common/shortcuts/data';\nimport { assign, cloneDeep } from 'lodash-es';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nexport class ShortcutsMockApi {\n  /**\n   * Constructor\n   */\n  constructor(_fuseMockApiService) {\n    this._fuseMockApiService = _fuseMockApiService;\n    this._shortcuts = shortcutsData;\n    // Register Mock API handlers\n    this.registerHandlers();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Register Mock API handlers\n   */\n  registerHandlers() {\n    // -----------------------------------------------------------------------------------------------------\n    // @ Shortcuts - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/common/shortcuts').reply(() => [200, cloneDeep(this._shortcuts)]);\n    // -----------------------------------------------------------------------------------------------------\n    // @ Shortcuts - POST\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPost('api/common/shortcuts').reply(({\n      request\n    }) => {\n      // Get the shortcut\n      const newShortcut = cloneDeep(request.body.shortcut);\n      // Generate a new GUID\n      newShortcut.id = FuseMockApiUtils.guid();\n      // Unshift the new shortcut\n      this._shortcuts.unshift(newShortcut);\n      // Return the response\n      return [200, newShortcut];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Shortcuts - PATCH\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPatch('api/common/shortcuts').reply(({\n      request\n    }) => {\n      // Get the id and shortcut\n      const id = request.body.id;\n      const shortcut = cloneDeep(request.body.shortcut);\n      // Prepare the updated shortcut\n      let updatedShortcut = null;\n      // Find the shortcut and update it\n      this._shortcuts.forEach((item, index, shortcuts) => {\n        if (item.id === id) {\n          // Update the shortcut\n          shortcuts[index] = assign({}, shortcuts[index], shortcut);\n          // Store the updated shortcut\n          updatedShortcut = shortcuts[index];\n        }\n      });\n      // Return the response\n      return [200, updatedShortcut];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Shortcuts - DELETE\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onDelete('api/common/shortcuts').reply(({\n      request\n    }) => {\n      // Get the id\n      const id = request.params.get('id');\n      // Prepare the deleted shortcut\n      let deletedShortcut = null;\n      // Find the shortcut\n      const index = this._shortcuts.findIndex(item => item.id === id);\n      // Store the deleted shortcut\n      deletedShortcut = cloneDeep(this._shortcuts[index]);\n      // Delete the shortcut\n      this._shortcuts.splice(index, 1);\n      // Return the response\n      return [200, deletedShortcut];\n    });\n  }\n  static #_ = this.ɵfac = function ShortcutsMockApi_Factory(t) {\n    return new (t || ShortcutsMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ShortcutsMockApi,\n    factory: ShortcutsMockApi.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["FuseMockApiUtils","shortcuts","shortcutsData","assign","cloneDeep","ShortcutsMockApi","constructor","_fuseMockApiService","_shortcuts","registerHandlers","onGet","reply","onPost","request","newShortcut","body","shortcut","id","guid","unshift","onPatch","updatedShortcut","forEach","item","index","onDelete","params","get","deletedShortcut","findIndex","splice","_","i0","ɵɵinject","i1","FuseMockApiService","_2","factory","ɵfac","providedIn"],"sources":["/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/src/app/mock-api/common/shortcuts/api.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { FuseMockApiService, FuseMockApiUtils } from '@fuse/lib/mock-api';\nimport { shortcuts as shortcutsData } from 'app/mock-api/common/shortcuts/data';\nimport { assign, cloneDeep } from 'lodash-es';\n\n@Injectable({providedIn: 'root'})\nexport class ShortcutsMockApi\n{\n    private _shortcuts: any = shortcutsData;\n\n    /**\n     * Constructor\n     */\n    constructor(private _fuseMockApiService: FuseMockApiService)\n    {\n        // Register Mock API handlers\n        this.registerHandlers();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Register Mock API handlers\n     */\n    registerHandlers(): void\n    {\n        // -----------------------------------------------------------------------------------------------------\n        // @ Shortcuts - GET\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onGet('api/common/shortcuts')\n            .reply(() => [200, cloneDeep(this._shortcuts)]);\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Shortcuts - POST\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPost('api/common/shortcuts')\n            .reply(({request}) =>\n            {\n                // Get the shortcut\n                const newShortcut = cloneDeep(request.body.shortcut);\n\n                // Generate a new GUID\n                newShortcut.id = FuseMockApiUtils.guid();\n\n                // Unshift the new shortcut\n                this._shortcuts.unshift(newShortcut);\n\n                // Return the response\n                return [200, newShortcut];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Shortcuts - PATCH\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPatch('api/common/shortcuts')\n            .reply(({request}) =>\n            {\n                // Get the id and shortcut\n                const id = request.body.id;\n                const shortcut = cloneDeep(request.body.shortcut);\n\n                // Prepare the updated shortcut\n                let updatedShortcut = null;\n\n                // Find the shortcut and update it\n                this._shortcuts.forEach((item: any, index: number, shortcuts: any[]) =>\n                {\n                    if ( item.id === id )\n                    {\n                        // Update the shortcut\n                        shortcuts[index] = assign({}, shortcuts[index], shortcut);\n\n                        // Store the updated shortcut\n                        updatedShortcut = shortcuts[index];\n                    }\n                });\n\n                // Return the response\n                return [200, updatedShortcut];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Shortcuts - DELETE\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onDelete('api/common/shortcuts')\n            .reply(({request}) =>\n            {\n                // Get the id\n                const id = request.params.get('id');\n\n                // Prepare the deleted shortcut\n                let deletedShortcut = null;\n\n                // Find the shortcut\n                const index = this._shortcuts.findIndex((item: any) => item.id === id);\n\n                // Store the deleted shortcut\n                deletedShortcut = cloneDeep(this._shortcuts[index]);\n\n                // Delete the shortcut\n                this._shortcuts.splice(index, 1);\n\n                // Return the response\n                return [200, deletedShortcut];\n            });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}