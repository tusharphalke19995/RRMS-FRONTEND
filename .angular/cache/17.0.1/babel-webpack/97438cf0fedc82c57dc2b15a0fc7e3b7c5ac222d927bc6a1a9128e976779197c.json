{"ast":null,"code":"import { map, ReplaySubject, switchMap, take, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ShortcutsService {\n  /**\n   * Constructor\n   */\n  constructor(_httpClient) {\n    this._httpClient = _httpClient;\n    this._shortcuts = new ReplaySubject(1);\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Accessors\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Getter for shortcuts\n   */\n  get shortcuts$() {\n    return this._shortcuts.asObservable();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Get all messages\n   */\n  getAll() {\n    return this._httpClient.get('api/common/shortcuts').pipe(tap(shortcuts => {\n      this._shortcuts.next(shortcuts);\n    }));\n  }\n  /**\n   * Create a shortcut\n   *\n   * @param shortcut\n   */\n  create(shortcut) {\n    return this.shortcuts$.pipe(take(1), switchMap(shortcuts => this._httpClient.post('api/common/shortcuts', {\n      shortcut\n    }).pipe(map(newShortcut => {\n      // Update the shortcuts with the new shortcut\n      this._shortcuts.next([...shortcuts, newShortcut]);\n      // Return the new shortcut from observable\n      return newShortcut;\n    }))));\n  }\n  /**\n   * Update the shortcut\n   *\n   * @param id\n   * @param shortcut\n   */\n  update(id, shortcut) {\n    return this.shortcuts$.pipe(take(1), switchMap(shortcuts => this._httpClient.patch('api/common/shortcuts', {\n      id,\n      shortcut\n    }).pipe(map(updatedShortcut => {\n      // Find the index of the updated shortcut\n      const index = shortcuts.findIndex(item => item.id === id);\n      // Update the shortcut\n      shortcuts[index] = updatedShortcut;\n      // Update the shortcuts\n      this._shortcuts.next(shortcuts);\n      // Return the updated shortcut\n      return updatedShortcut;\n    }))));\n  }\n  /**\n   * Delete the shortcut\n   *\n   * @param id\n   */\n  delete(id) {\n    return this.shortcuts$.pipe(take(1), switchMap(shortcuts => this._httpClient.delete('api/common/shortcuts', {\n      params: {\n        id\n      }\n    }).pipe(map(isDeleted => {\n      // Find the index of the deleted shortcut\n      const index = shortcuts.findIndex(item => item.id === id);\n      // Delete the shortcut\n      shortcuts.splice(index, 1);\n      // Update the shortcuts\n      this._shortcuts.next(shortcuts);\n      // Return the deleted status\n      return isDeleted;\n    }))));\n  }\n  static #_ = this.ɵfac = function ShortcutsService_Factory(t) {\n    return new (t || ShortcutsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ShortcutsService,\n    factory: ShortcutsService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","ReplaySubject","switchMap","take","tap","ShortcutsService","constructor","_httpClient","_shortcuts","shortcuts$","asObservable","getAll","get","pipe","shortcuts","next","create","shortcut","post","newShortcut","update","id","patch","updatedShortcut","index","findIndex","item","delete","params","isDeleted","splice","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/src/app/layout/common/shortcuts/shortcuts.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Shortcut } from 'app/layout/common/shortcuts/shortcuts.types';\nimport { map, Observable, ReplaySubject, switchMap, take, tap } from 'rxjs';\n\n@Injectable({providedIn: 'root'})\nexport class ShortcutsService\n{\n    private _shortcuts: ReplaySubject<Shortcut[]> = new ReplaySubject<Shortcut[]>(1);\n\n    /**\n     * Constructor\n     */\n    constructor(private _httpClient: HttpClient)\n    {\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Getter for shortcuts\n     */\n    get shortcuts$(): Observable<Shortcut[]>\n    {\n        return this._shortcuts.asObservable();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Get all messages\n     */\n    getAll(): Observable<Shortcut[]>\n    {\n        return this._httpClient.get<Shortcut[]>('api/common/shortcuts').pipe(\n            tap((shortcuts) =>\n            {\n                this._shortcuts.next(shortcuts);\n            }),\n        );\n    }\n\n    /**\n     * Create a shortcut\n     *\n     * @param shortcut\n     */\n    create(shortcut: Shortcut): Observable<Shortcut>\n    {\n        return this.shortcuts$.pipe(\n            take(1),\n            switchMap(shortcuts => this._httpClient.post<Shortcut>('api/common/shortcuts', {shortcut}).pipe(\n                map((newShortcut) =>\n                {\n                    // Update the shortcuts with the new shortcut\n                    this._shortcuts.next([...shortcuts, newShortcut]);\n\n                    // Return the new shortcut from observable\n                    return newShortcut;\n                }),\n            )),\n        );\n    }\n\n    /**\n     * Update the shortcut\n     *\n     * @param id\n     * @param shortcut\n     */\n    update(id: string, shortcut: Shortcut): Observable<Shortcut>\n    {\n        return this.shortcuts$.pipe(\n            take(1),\n            switchMap(shortcuts => this._httpClient.patch<Shortcut>('api/common/shortcuts', {\n                id,\n                shortcut,\n            }).pipe(\n                map((updatedShortcut: Shortcut) =>\n                {\n                    // Find the index of the updated shortcut\n                    const index = shortcuts.findIndex(item => item.id === id);\n\n                    // Update the shortcut\n                    shortcuts[index] = updatedShortcut;\n\n                    // Update the shortcuts\n                    this._shortcuts.next(shortcuts);\n\n                    // Return the updated shortcut\n                    return updatedShortcut;\n                }),\n            )),\n        );\n    }\n\n    /**\n     * Delete the shortcut\n     *\n     * @param id\n     */\n    delete(id: string): Observable<boolean>\n    {\n        return this.shortcuts$.pipe(\n            take(1),\n            switchMap(shortcuts => this._httpClient.delete<boolean>('api/common/shortcuts', {params: {id}}).pipe(\n                map((isDeleted: boolean) =>\n                {\n                    // Find the index of the deleted shortcut\n                    const index = shortcuts.findIndex(item => item.id === id);\n\n                    // Delete the shortcut\n                    shortcuts.splice(index, 1);\n\n                    // Update the shortcuts\n                    this._shortcuts.next(shortcuts);\n\n                    // Return the deleted status\n                    return isDeleted;\n                }),\n            )),\n        );\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}