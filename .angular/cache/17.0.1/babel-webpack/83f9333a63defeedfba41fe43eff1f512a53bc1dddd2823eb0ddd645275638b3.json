{"ast":null,"code":"import { inject } from '@angular/core';\nimport { FuseLoadingService } from '@fuse/services/loading/loading.service';\nimport { finalize, take } from 'rxjs';\nexport const fuseLoadingInterceptor = (req, next) => {\n  const fuseLoadingService = inject(FuseLoadingService);\n  let handleRequestsAutomatically = false;\n  fuseLoadingService.auto$.pipe(take(1)).subscribe(value => {\n    handleRequestsAutomatically = value;\n  });\n  // If the Auto mode is turned off, do nothing\n  if (!handleRequestsAutomatically) {\n    return next(req);\n  }\n  // Set the loading status to true\n  fuseLoadingService._setLoadingStatus(true, req.url);\n  return next(req).pipe(finalize(() => {\n    // Set the status to false if there are any errors or the request is completed\n    fuseLoadingService._setLoadingStatus(false, req.url);\n  }));\n};","map":{"version":3,"names":["inject","FuseLoadingService","finalize","take","fuseLoadingInterceptor","req","next","fuseLoadingService","handleRequestsAutomatically","auto$","pipe","subscribe","value","_setLoadingStatus","url"],"sources":["/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/src/@fuse/services/loading/loading.interceptor.ts"],"sourcesContent":["import { HttpEvent, HttpHandlerFn, HttpRequest } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { FuseLoadingService } from '@fuse/services/loading/loading.service';\nimport { finalize, Observable, take } from 'rxjs';\n\nexport const fuseLoadingInterceptor = (req: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> =>\n{\n    const fuseLoadingService = inject(FuseLoadingService);\n    let handleRequestsAutomatically = false;\n\n    fuseLoadingService.auto$\n        .pipe(take(1))\n        .subscribe((value) =>\n        {\n            handleRequestsAutomatically = value;\n        });\n\n    // If the Auto mode is turned off, do nothing\n    if ( !handleRequestsAutomatically )\n    {\n        return next(req);\n    }\n\n    // Set the loading status to true\n    fuseLoadingService._setLoadingStatus(true, req.url);\n\n    return next(req).pipe(\n        finalize(() =>\n        {\n            // Set the status to false if there are any errors or the request is completed\n            fuseLoadingService._setLoadingStatus(false, req.url);\n        }));\n};\n"],"mappings":"AACA,SAASA,MAAM,QAAQ,eAAe;AACtC,SAASC,kBAAkB,QAAQ,wCAAwC;AAC3E,SAASC,QAAQ,EAAcC,IAAI,QAAQ,MAAM;AAEjD,OAAO,MAAMC,sBAAsB,GAAGA,CAACC,GAAyB,EAAEC,IAAmB,KAAoC;EAErH,MAAMC,kBAAkB,GAAGP,MAAM,CAACC,kBAAkB,CAAC;EACrD,IAAIO,2BAA2B,GAAG,KAAK;EAEvCD,kBAAkB,CAACE,KAAK,CACnBC,IAAI,CAACP,IAAI,CAAC,CAAC,CAAC,CAAC,CACbQ,SAAS,CAAEC,KAAK,IAAI;IAEjBJ,2BAA2B,GAAGI,KAAK;EACvC,CAAC,CAAC;EAEN;EACA,IAAK,CAACJ,2BAA2B,EACjC;IACI,OAAOF,IAAI,CAACD,GAAG,CAAC;;EAGpB;EACAE,kBAAkB,CAACM,iBAAiB,CAAC,IAAI,EAAER,GAAG,CAACS,GAAG,CAAC;EAEnD,OAAOR,IAAI,CAACD,GAAG,CAAC,CAACK,IAAI,CACjBR,QAAQ,CAAC,MAAK;IAEV;IACAK,kBAAkB,CAACM,iBAAiB,CAAC,KAAK,EAAER,GAAG,CAACS,GAAG,CAAC;EACxD,CAAC,CAAC,CAAC;AACX,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}