{"ast":null,"code":"import { FuseMockApiUtils } from '@fuse/lib/mock-api';\nimport { brands as brandsData, categories as categoriesData, products as productsData, tags as tagsData, vendors as vendorsData } from 'app/mock-api/apps/ecommerce/inventory/data';\nimport { assign, cloneDeep } from 'lodash-es';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nexport class ECommerceInventoryMockApi {\n  /**\n   * Constructor\n   */\n  constructor(_fuseMockApiService) {\n    this._fuseMockApiService = _fuseMockApiService;\n    this._categories = categoriesData;\n    this._brands = brandsData;\n    this._products = productsData;\n    this._tags = tagsData;\n    this._vendors = vendorsData;\n    // Register Mock API handlers\n    this.registerHandlers();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Register Mock API handlers\n   */\n  registerHandlers() {\n    // -----------------------------------------------------------------------------------------------------\n    // @ Categories - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/ecommerce/inventory/categories').reply(() => [200, cloneDeep(this._categories)]);\n    // -----------------------------------------------------------------------------------------------------\n    // @ Brands - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/ecommerce/inventory/brands').reply(() => [200, cloneDeep(this._brands)]);\n    // -----------------------------------------------------------------------------------------------------\n    // @ Products - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/ecommerce/inventory/products', 300).reply(({\n      request\n    }) => {\n      // Get available queries\n      const search = request.params.get('search');\n      const sort = request.params.get('sort') || 'name';\n      const order = request.params.get('order') || 'asc';\n      const page = parseInt(request.params.get('page') ?? '1', 10);\n      const size = parseInt(request.params.get('size') ?? '10', 10);\n      // Clone the products\n      let products = cloneDeep(this._products);\n      // Sort the products\n      if (sort === 'sku' || sort === 'name' || sort === 'active') {\n        products.sort((a, b) => {\n          const fieldA = a[sort].toString().toUpperCase();\n          const fieldB = b[sort].toString().toUpperCase();\n          return order === 'asc' ? fieldA.localeCompare(fieldB) : fieldB.localeCompare(fieldA);\n        });\n      } else {\n        products.sort((a, b) => order === 'asc' ? a[sort] - b[sort] : b[sort] - a[sort]);\n      }\n      // If search exists...\n      if (search) {\n        // Filter the products\n        products = products.filter(contact => contact.name && contact.name.toLowerCase().includes(search.toLowerCase()));\n      }\n      // Paginate - Start\n      const productsLength = products.length;\n      // Calculate pagination details\n      const begin = page * size;\n      const end = Math.min(size * (page + 1), productsLength);\n      const lastPage = Math.max(Math.ceil(productsLength / size), 1);\n      // Prepare the pagination object\n      let pagination = {};\n      // If the requested page number is bigger than\n      // the last possible page number, return null for\n      // products but also send the last possible page so\n      // the app can navigate to there\n      if (page > lastPage) {\n        products = null;\n        pagination = {\n          lastPage\n        };\n      } else {\n        // Paginate the results by size\n        products = products.slice(begin, end);\n        // Prepare the pagination mock-api\n        pagination = {\n          length: productsLength,\n          size: size,\n          page: page,\n          lastPage: lastPage,\n          startIndex: begin,\n          endIndex: end - 1\n        };\n      }\n      // Return the response\n      return [200, {\n        products,\n        pagination\n      }];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Product - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/ecommerce/inventory/product').reply(({\n      request\n    }) => {\n      // Get the id from the params\n      const id = request.params.get('id');\n      // Clone the products\n      const products = cloneDeep(this._products);\n      // Find the product\n      const product = products.find(item => item.id === id);\n      // Return the response\n      return [200, product];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Product - POST\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPost('api/apps/ecommerce/inventory/product').reply(() => {\n      // Generate a new product\n      const newProduct = {\n        id: FuseMockApiUtils.guid(),\n        category: '',\n        name: 'A New Product',\n        description: '',\n        tags: [],\n        sku: '',\n        barcode: '',\n        brand: '',\n        vendor: '',\n        stock: '',\n        reserved: '',\n        cost: '',\n        basePrice: '',\n        taxPercent: '',\n        price: '',\n        weight: '',\n        thumbnail: '',\n        images: [],\n        active: false\n      };\n      // Unshift the new product\n      this._products.unshift(newProduct);\n      // Return the response\n      return [200, newProduct];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Product - PATCH\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPatch('api/apps/ecommerce/inventory/product').reply(({\n      request\n    }) => {\n      // Get the id and product\n      const id = request.body.id;\n      const product = cloneDeep(request.body.product);\n      // Prepare the updated product\n      let updatedProduct = null;\n      // Find the product and update it\n      this._products.forEach((item, index, products) => {\n        if (item.id === id) {\n          // Update the product\n          products[index] = assign({}, products[index], product);\n          // Store the updated product\n          updatedProduct = products[index];\n        }\n      });\n      // Return the response\n      return [200, updatedProduct];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Product - DELETE\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onDelete('api/apps/ecommerce/inventory/product').reply(({\n      request\n    }) => {\n      // Get the id\n      const id = request.params.get('id');\n      // Find the product and delete it\n      this._products.forEach((item, index) => {\n        if (item.id === id) {\n          this._products.splice(index, 1);\n        }\n      });\n      // Return the response\n      return [200, true];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Tags - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/ecommerce/inventory/tags').reply(() => [200, cloneDeep(this._tags)]);\n    // -----------------------------------------------------------------------------------------------------\n    // @ Tags - POST\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPost('api/apps/ecommerce/inventory/tag').reply(({\n      request\n    }) => {\n      // Get the tag\n      const newTag = cloneDeep(request.body.tag);\n      // Generate a new GUID\n      newTag.id = FuseMockApiUtils.guid();\n      // Unshift the new tag\n      this._tags.unshift(newTag);\n      // Return the response\n      return [200, newTag];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Tags - PATCH\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPatch('api/apps/ecommerce/inventory/tag').reply(({\n      request\n    }) => {\n      // Get the id and tag\n      const id = request.body.id;\n      const tag = cloneDeep(request.body.tag);\n      // Prepare the updated tag\n      let updatedTag = null;\n      // Find the tag and update it\n      this._tags.forEach((item, index, tags) => {\n        if (item.id === id) {\n          // Update the tag\n          tags[index] = assign({}, tags[index], tag);\n          // Store the updated tag\n          updatedTag = tags[index];\n        }\n      });\n      // Return the response\n      return [200, updatedTag];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Tag - DELETE\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onDelete('api/apps/ecommerce/inventory/tag').reply(({\n      request\n    }) => {\n      // Get the id\n      const id = request.params.get('id');\n      // Find the tag and delete it\n      this._tags.forEach((item, index) => {\n        if (item.id === id) {\n          this._tags.splice(index, 1);\n        }\n      });\n      // Get the products that have the tag\n      const productsWithTag = this._products.filter(product => product.tags.indexOf(id) > -1);\n      // Iterate through them and delete the tag\n      productsWithTag.forEach(product => {\n        product.tags.splice(product.tags.indexOf(id), 1);\n      });\n      // Return the response\n      return [200, true];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Vendors - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/ecommerce/inventory/vendors').reply(() => [200, cloneDeep(this._vendors)]);\n  }\n  static #_ = this.ɵfac = function ECommerceInventoryMockApi_Factory(t) {\n    return new (t || ECommerceInventoryMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ECommerceInventoryMockApi,\n    factory: ECommerceInventoryMockApi.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["FuseMockApiUtils","brands","brandsData","categories","categoriesData","products","productsData","tags","tagsData","vendors","vendorsData","assign","cloneDeep","ECommerceInventoryMockApi","constructor","_fuseMockApiService","_categories","_brands","_products","_tags","_vendors","registerHandlers","onGet","reply","request","search","params","get","sort","order","page","parseInt","size","a","b","fieldA","toString","toUpperCase","fieldB","localeCompare","filter","contact","name","toLowerCase","includes","productsLength","length","begin","end","Math","min","lastPage","max","ceil","pagination","slice","startIndex","endIndex","id","product","find","item","onPost","newProduct","guid","category","description","sku","barcode","brand","vendor","stock","reserved","cost","basePrice","taxPercent","price","weight","thumbnail","images","active","unshift","onPatch","body","updatedProduct","forEach","index","onDelete","splice","newTag","tag","updatedTag","productsWithTag","indexOf","_","i0","ɵɵinject","i1","FuseMockApiService","_2","factory","ɵfac","providedIn"],"sources":["/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/src/app/mock-api/apps/ecommerce/inventory/api.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { FuseMockApiService, FuseMockApiUtils } from '@fuse/lib/mock-api';\nimport { brands as brandsData, categories as categoriesData, products as productsData, tags as tagsData, vendors as vendorsData } from 'app/mock-api/apps/ecommerce/inventory/data';\nimport { assign, cloneDeep } from 'lodash-es';\n\n@Injectable({providedIn: 'root'})\nexport class ECommerceInventoryMockApi\n{\n    private _categories: any[] = categoriesData;\n    private _brands: any[] = brandsData;\n    private _products: any[] = productsData;\n    private _tags: any[] = tagsData;\n    private _vendors: any[] = vendorsData;\n\n    /**\n     * Constructor\n     */\n    constructor(private _fuseMockApiService: FuseMockApiService)\n    {\n        // Register Mock API handlers\n        this.registerHandlers();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Register Mock API handlers\n     */\n    registerHandlers(): void\n    {\n        // -----------------------------------------------------------------------------------------------------\n        // @ Categories - GET\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onGet('api/apps/ecommerce/inventory/categories')\n            .reply(() => [200, cloneDeep(this._categories)]);\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Brands - GET\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onGet('api/apps/ecommerce/inventory/brands')\n            .reply(() => [200, cloneDeep(this._brands)]);\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Products - GET\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onGet('api/apps/ecommerce/inventory/products', 300)\n            .reply(({request}) =>\n            {\n                // Get available queries\n                const search = request.params.get('search');\n                const sort = request.params.get('sort') || 'name';\n                const order = request.params.get('order') || 'asc';\n                const page = parseInt(request.params.get('page') ?? '1', 10);\n                const size = parseInt(request.params.get('size') ?? '10', 10);\n\n                // Clone the products\n                let products: any[] | null = cloneDeep(this._products);\n\n                // Sort the products\n                if ( sort === 'sku' || sort === 'name' || sort === 'active' )\n                {\n                    products.sort((a, b) =>\n                    {\n                        const fieldA = a[sort].toString().toUpperCase();\n                        const fieldB = b[sort].toString().toUpperCase();\n                        return order === 'asc' ? fieldA.localeCompare(fieldB) : fieldB.localeCompare(fieldA);\n                    });\n                }\n                else\n                {\n                    products.sort((a, b) => order === 'asc' ? a[sort] - b[sort] : b[sort] - a[sort]);\n                }\n\n                // If search exists...\n                if ( search )\n                {\n                    // Filter the products\n                    products = products.filter(contact => contact.name && contact.name.toLowerCase().includes(search.toLowerCase()));\n                }\n\n                // Paginate - Start\n                const productsLength = products.length;\n\n                // Calculate pagination details\n                const begin = page * size;\n                const end = Math.min((size * (page + 1)), productsLength);\n                const lastPage = Math.max(Math.ceil(productsLength / size), 1);\n\n                // Prepare the pagination object\n                let pagination = {};\n\n                // If the requested page number is bigger than\n                // the last possible page number, return null for\n                // products but also send the last possible page so\n                // the app can navigate to there\n                if ( page > lastPage )\n                {\n                    products = null;\n                    pagination = {\n                        lastPage,\n                    };\n                }\n                else\n                {\n                    // Paginate the results by size\n                    products = products.slice(begin, end);\n\n                    // Prepare the pagination mock-api\n                    pagination = {\n                        length    : productsLength,\n                        size      : size,\n                        page      : page,\n                        lastPage  : lastPage,\n                        startIndex: begin,\n                        endIndex  : end - 1,\n                    };\n                }\n\n                // Return the response\n                return [\n                    200,\n                    {\n                        products,\n                        pagination,\n                    },\n                ];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Product - GET\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onGet('api/apps/ecommerce/inventory/product')\n            .reply(({request}) =>\n            {\n                // Get the id from the params\n                const id = request.params.get('id');\n\n                // Clone the products\n                const products = cloneDeep(this._products);\n\n                // Find the product\n                const product = products.find(item => item.id === id);\n\n                // Return the response\n                return [200, product];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Product - POST\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPost('api/apps/ecommerce/inventory/product')\n            .reply(() =>\n            {\n                // Generate a new product\n                const newProduct = {\n                    id         : FuseMockApiUtils.guid(),\n                    category   : '',\n                    name       : 'A New Product',\n                    description: '',\n                    tags       : [],\n                    sku        : '',\n                    barcode    : '',\n                    brand      : '',\n                    vendor     : '',\n                    stock      : '',\n                    reserved   : '',\n                    cost       : '',\n                    basePrice  : '',\n                    taxPercent : '',\n                    price      : '',\n                    weight     : '',\n                    thumbnail  : '',\n                    images     : [],\n                    active     : false,\n                };\n\n                // Unshift the new product\n                this._products.unshift(newProduct);\n\n                // Return the response\n                return [200, newProduct];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Product - PATCH\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPatch('api/apps/ecommerce/inventory/product')\n            .reply(({request}) =>\n            {\n                // Get the id and product\n                const id = request.body.id;\n                const product = cloneDeep(request.body.product);\n\n                // Prepare the updated product\n                let updatedProduct = null;\n\n                // Find the product and update it\n                this._products.forEach((item, index, products) =>\n                {\n                    if ( item.id === id )\n                    {\n                        // Update the product\n                        products[index] = assign({}, products[index], product);\n\n                        // Store the updated product\n                        updatedProduct = products[index];\n                    }\n                });\n\n                // Return the response\n                return [200, updatedProduct];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Product - DELETE\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onDelete('api/apps/ecommerce/inventory/product')\n            .reply(({request}) =>\n            {\n                // Get the id\n                const id = request.params.get('id');\n\n                // Find the product and delete it\n                this._products.forEach((item, index) =>\n                {\n                    if ( item.id === id )\n                    {\n                        this._products.splice(index, 1);\n                    }\n                });\n\n                // Return the response\n                return [200, true];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Tags - GET\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onGet('api/apps/ecommerce/inventory/tags')\n            .reply(() => [200, cloneDeep(this._tags)]);\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Tags - POST\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPost('api/apps/ecommerce/inventory/tag')\n            .reply(({request}) =>\n            {\n                // Get the tag\n                const newTag = cloneDeep(request.body.tag);\n\n                // Generate a new GUID\n                newTag.id = FuseMockApiUtils.guid();\n\n                // Unshift the new tag\n                this._tags.unshift(newTag);\n\n                // Return the response\n                return [200, newTag];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Tags - PATCH\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onPatch('api/apps/ecommerce/inventory/tag')\n            .reply(({request}) =>\n            {\n                // Get the id and tag\n                const id = request.body.id;\n                const tag = cloneDeep(request.body.tag);\n\n                // Prepare the updated tag\n                let updatedTag = null;\n\n                // Find the tag and update it\n                this._tags.forEach((item, index, tags) =>\n                {\n                    if ( item.id === id )\n                    {\n                        // Update the tag\n                        tags[index] = assign({}, tags[index], tag);\n\n                        // Store the updated tag\n                        updatedTag = tags[index];\n                    }\n                });\n\n                // Return the response\n                return [200, updatedTag];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Tag - DELETE\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onDelete('api/apps/ecommerce/inventory/tag')\n            .reply(({request}) =>\n            {\n                // Get the id\n                const id = request.params.get('id');\n\n                // Find the tag and delete it\n                this._tags.forEach((item, index) =>\n                {\n                    if ( item.id === id )\n                    {\n                        this._tags.splice(index, 1);\n                    }\n                });\n\n                // Get the products that have the tag\n                const productsWithTag = this._products.filter(product => product.tags.indexOf(id) > -1);\n\n                // Iterate through them and delete the tag\n                productsWithTag.forEach((product) =>\n                {\n                    product.tags.splice(product.tags.indexOf(id), 1);\n                });\n\n                // Return the response\n                return [200, true];\n            });\n\n        // -----------------------------------------------------------------------------------------------------\n        // @ Vendors - GET\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onGet('api/apps/ecommerce/inventory/vendors')\n            .reply(() => [200, cloneDeep(this._vendors)]);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}