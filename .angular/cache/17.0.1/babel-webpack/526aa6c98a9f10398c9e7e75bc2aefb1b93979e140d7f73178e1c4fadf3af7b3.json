{"ast":null,"code":"import { items as itemsData } from 'app/mock-api/apps/file-manager/data';\nimport { cloneDeep } from 'lodash-es';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api/mock-api.service\";\nexport class FileManagerMockApi {\n  /**\n   * Constructor\n   */\n  constructor(_fuseMockApiService) {\n    this._fuseMockApiService = _fuseMockApiService;\n    this._items = itemsData;\n    // Register Mock API handlers\n    this.registerHandlers();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Register Mock API handlers\n   */\n  registerHandlers() {\n    // -----------------------------------------------------------------------------------------------------\n    // @ Items - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/file-manager').reply(({\n      request\n    }) => {\n      // Clone the items\n      let items = cloneDeep(this._items);\n      // See if the folder id exist\n      const folderId = request.params.get('folderId') === 'null' ? null : request.params.get('folderId');\n      // Filter the items by folder id. If folder id is null,\n      // that means we want to root items which have folder id\n      // of null\n      items = items.filter(item => item.folderId === folderId);\n      // Separate the items by folders and files\n      const folders = items.filter(item => item.type === 'folder');\n      const files = items.filter(item => item.type !== 'folder');\n      // Sort the folders and files alphabetically by filename\n      folders.sort((a, b) => a.name.localeCompare(b.name));\n      files.sort((a, b) => a.name.localeCompare(b.name));\n      // Figure out the path and attach it to the response\n      // Prepare the empty paths array\n      const pathItems = cloneDeep(this._items);\n      const path = [];\n      // Prepare the current folder\n      let currentFolder = null;\n      // Get the current folder and add it as the first entry\n      if (folderId) {\n        currentFolder = pathItems.find(item => item.id === folderId);\n        path.push(currentFolder);\n      }\n      // Start traversing and storing the folders as a path array\n      // until we hit null on the folder id\n      while (currentFolder?.folderId) {\n        currentFolder = pathItems.find(item => item.id === currentFolder.folderId);\n        if (currentFolder) {\n          path.unshift(currentFolder);\n        }\n      }\n      return [200, {\n        folders,\n        files,\n        path\n      }];\n    });\n  }\n  static #_ = this.ɵfac = function FileManagerMockApi_Factory(t) {\n    return new (t || FileManagerMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FileManagerMockApi,\n    factory: FileManagerMockApi.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["items","itemsData","cloneDeep","FileManagerMockApi","constructor","_fuseMockApiService","_items","registerHandlers","onGet","reply","request","folderId","params","get","filter","item","folders","type","files","sort","a","b","name","localeCompare","pathItems","path","currentFolder","find","id","push","unshift","_","i0","ɵɵinject","i1","FuseMockApiService","_2","factory","ɵfac","providedIn"],"sources":["/Users/tusharphalke/Documents/Freelancing_Work/rrms_frontend/src/app/mock-api/apps/file-manager/api.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { FuseMockApiService } from '@fuse/lib/mock-api/mock-api.service';\nimport { items as itemsData } from 'app/mock-api/apps/file-manager/data';\nimport { cloneDeep } from 'lodash-es';\n\n@Injectable({providedIn: 'root'})\nexport class FileManagerMockApi\n{\n    private _items: any[] = itemsData;\n\n    /**\n     * Constructor\n     */\n    constructor(private _fuseMockApiService: FuseMockApiService)\n    {\n        // Register Mock API handlers\n        this.registerHandlers();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Register Mock API handlers\n     */\n    registerHandlers(): void\n    {\n        // -----------------------------------------------------------------------------------------------------\n        // @ Items - GET\n        // -----------------------------------------------------------------------------------------------------\n        this._fuseMockApiService\n            .onGet('api/apps/file-manager')\n            .reply(({request}) =>\n            {\n                // Clone the items\n                let items = cloneDeep(this._items);\n\n                // See if the folder id exist\n                const folderId = request.params.get('folderId') === 'null' ? null : request.params.get('folderId');\n\n                // Filter the items by folder id. If folder id is null,\n                // that means we want to root items which have folder id\n                // of null\n                items = items.filter(item => item.folderId === folderId);\n\n                // Separate the items by folders and files\n                const folders = items.filter(item => item.type === 'folder');\n                const files = items.filter(item => item.type !== 'folder');\n\n                // Sort the folders and files alphabetically by filename\n                folders.sort((a, b) => a.name.localeCompare(b.name));\n                files.sort((a, b) => a.name.localeCompare(b.name));\n\n                // Figure out the path and attach it to the response\n                // Prepare the empty paths array\n                const pathItems = cloneDeep(this._items);\n                const path = [];\n\n                // Prepare the current folder\n                let currentFolder = null;\n\n                // Get the current folder and add it as the first entry\n                if ( folderId )\n                {\n                    currentFolder = pathItems.find(item => item.id === folderId);\n                    path.push(currentFolder);\n                }\n\n                // Start traversing and storing the folders as a path array\n                // until we hit null on the folder id\n                while ( currentFolder?.folderId )\n                {\n                    currentFolder = pathItems.find(item => item.id === currentFolder.folderId);\n                    if ( currentFolder )\n                    {\n                        path.unshift(currentFolder);\n                    }\n                }\n\n                return [\n                    200,\n                    {\n                        folders,\n                        files,\n                        path,\n                    },\n                ];\n            });\n    }\n}\n"],"mappings":"AAEA,SAASA,KAAK,IAAIC,SAAS,QAAQ,qCAAqC;AACxE,SAASC,SAAS,QAAQ,WAAW;;;AAGrC,OAAM,MAAOC,kBAAkB;EAI3B;;;EAGAC,YAAoBC,mBAAuC;IAAvC,KAAAA,mBAAmB,GAAnBA,mBAAmB;IAL/B,KAAAC,MAAM,GAAUL,SAAS;IAO7B;IACA,IAAI,CAACM,gBAAgB,EAAE;EAC3B;EAEA;EACA;EACA;EAEA;;;EAGAA,gBAAgBA,CAAA;IAEZ;IACA;IACA;IACA,IAAI,CAACF,mBAAmB,CACnBG,KAAK,CAAC,uBAAuB,CAAC,CAC9BC,KAAK,CAAC,CAAC;MAACC;IAAO,CAAC,KAAI;MAEjB;MACA,IAAIV,KAAK,GAAGE,SAAS,CAAC,IAAI,CAACI,MAAM,CAAC;MAElC;MACA,MAAMK,QAAQ,GAAGD,OAAO,CAACE,MAAM,CAACC,GAAG,CAAC,UAAU,CAAC,KAAK,MAAM,GAAG,IAAI,GAAGH,OAAO,CAACE,MAAM,CAACC,GAAG,CAAC,UAAU,CAAC;MAElG;MACA;MACA;MACAb,KAAK,GAAGA,KAAK,CAACc,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACJ,QAAQ,KAAKA,QAAQ,CAAC;MAExD;MACA,MAAMK,OAAO,GAAGhB,KAAK,CAACc,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACE,IAAI,KAAK,QAAQ,CAAC;MAC5D,MAAMC,KAAK,GAAGlB,KAAK,CAACc,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACE,IAAI,KAAK,QAAQ,CAAC;MAE1D;MACAD,OAAO,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,IAAI,CAACC,aAAa,CAACF,CAAC,CAACC,IAAI,CAAC,CAAC;MACpDJ,KAAK,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,IAAI,CAACC,aAAa,CAACF,CAAC,CAACC,IAAI,CAAC,CAAC;MAElD;MACA;MACA,MAAME,SAAS,GAAGtB,SAAS,CAAC,IAAI,CAACI,MAAM,CAAC;MACxC,MAAMmB,IAAI,GAAG,EAAE;MAEf;MACA,IAAIC,aAAa,GAAG,IAAI;MAExB;MACA,IAAKf,QAAQ,EACb;QACIe,aAAa,GAAGF,SAAS,CAACG,IAAI,CAACZ,IAAI,IAAIA,IAAI,CAACa,EAAE,KAAKjB,QAAQ,CAAC;QAC5Dc,IAAI,CAACI,IAAI,CAACH,aAAa,CAAC;;MAG5B;MACA;MACA,OAAQA,aAAa,EAAEf,QAAQ,EAC/B;QACIe,aAAa,GAAGF,SAAS,CAACG,IAAI,CAACZ,IAAI,IAAIA,IAAI,CAACa,EAAE,KAAKF,aAAa,CAACf,QAAQ,CAAC;QAC1E,IAAKe,aAAa,EAClB;UACID,IAAI,CAACK,OAAO,CAACJ,aAAa,CAAC;;;MAInC,OAAO,CACH,GAAG,EACH;QACIV,OAAO;QACPE,KAAK;QACLO;OACH,CACJ;IACL,CAAC,CAAC;EACV;EAAC,QAAAM,CAAA,G;qBAnFQ5B,kBAAkB,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,kBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAlBjC,kBAAkB;IAAAkC,OAAA,EAAlBlC,kBAAkB,CAAAmC,IAAA;IAAAC,UAAA,EADN;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}